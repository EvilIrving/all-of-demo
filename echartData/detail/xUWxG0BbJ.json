{"status":0,"data":{"cid":"xUWxG0BbJ","authorUid":"bd-2452781596","authorUserName":"双***b","title":"Graphic","description":"","latestVersion":2,"alwaysLatest":1,"createTime":"2020-03-03T08:46:49.000Z","lastUpdateTime":"2020-03-03T08:46:49.000Z","auth":2,"uid":"bd-2452781596","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":2,"parentVersion":1,"echartsVersion":"4.4.0","versionCreateTime":"2020-03-04T05:28:20.000Z","code":"var bgPatternImg = new Image();\nbgPatternImg.setAttribute(\"crossOrigin\",'Anonymous');\nbgPatternImg.src = 'http://image.91chep.com/3b731aac1f9441c7b505c7c7357e2e43680_680.jpg';\n\n\n \nlet pointList = [{\n        name: '测点1',\n        position: [250, 10],\n        color: 'green',\n        items: [{\n                name: '沉降',\n                value: 132\n            },\n            {\n                name: '温度',\n                value: 12\n            },\n        ]\n    },\n    {\n        name: '测点2',\n        position: [323, 36],\n        color: 'green',\n        items: [{\n            name: '沉降',\n            value: 132\n        }, ]\n    },\n    {\n        name: '测点3',\n        position: [360, 50],\n        color: 'green',\n        items: [{\n                name: '沉降测点3测点3测点3测点3测',\n                value: 132\n            },\n            {\n                name: '温度',\n                value: 12\n            },\n        ]\n    },\n    {\n        name: '测点4',\n        position: [300, 150],\n        color: 'skyblue',\n        items: [{\n                name: '沉降',\n                value: 132\n            },\n            {\n                name: '温度',\n                value: 12\n            },\n        ]\n    },\n    {\n        name: '测点5',\n        position: [440, 150],\n        color: 'skyblue',\n        items: [{\n                name: '沉降',\n                value: 132\n            },\n            {\n                name: '温度',\n                value: 12\n            },\n        ]\n    },\n    {\n        name: '测点6',\n        position: [480, 150],\n        color: 'skyblue',\n        items: [{\n                name: '沉降',\n                value: 132\n            },\n            {\n                name: '温度',\n                value: 12\n            },\n        ]\n    },\n    {\n        name: '测点7',\n        position: [480, 80],\n        color: 'red',\n        items: [{\n                name: '沉降',\n                value: 132\n            },\n            {\n                name: '温度',\n                value: 12\n            },\n        ]\n    },\n];\n\nlet lineList = [{\n        name: '测线1',\n        nodes: [{\n            name: '测点1'\n        }, {\n            name: '测点2'\n        }, {\n            name: '测点3'\n        }, ]\n    },\n    {\n        name: '测线2',\n        nodes: [{\n            name: '测点4'\n        }, {\n            name: '测点5'\n        }, {\n            name: '测点6'\n        }, ]\n    }\n];\n\noption = {\n    graphic: [{\n            // 拖拽的透明面板\n            id: 'toolPan',\n            type: 'rect',\n            z: 2, // z 方向上的高度\n            position: [200, 0],\n            invisible: true, // 节点不可见，不然会挡住底图\n            style: {\n                fill: '#ccc'\n            },\n            //draggable: true,\n            cursor: 'all-scroll',\n            shape: {\n                height: 300,\n                width: 600,\n            },\n            //ondrag: groupCanDrag(), // 拖动组\n            onmousedown: dragPanStart(),\n            onmouseup: dragPanEnd(),\n            onmousemove: dragPan(),\n            onmouseout: dragPanEnd(),\n            onmousewheel: groupCanZoom('group1', 'toolPan'), // 缩放组\n            onclick: e => {\n                //const curPos = vecSub([e.offsetX, e.offsetY])\n                // console.log(curPos)\n                panPosition = myChart.getOption().graphic[0].elements[0].position;\n                console.log(panPosition)\n            },\n        },\n        {\n            type: 'group',\n            id: 'group1',\n            scale: [1, 1],\n            position: [0, 0],\n            children: [{\n                    // 背景图\n                    type: 'image',\n                    id: 'bg',\n                    position: [200, 0],\n                    //bounding: 'raw',\n                    // origin: [75, 75],\n                    z: 1,\n                    style: {\n                        image: bgPatternImg\n                    },\n                    shape: {\n                        height: 300,\n                        width: 600,\n                    }\n                },\n                //{\n                //     id: 'p1',\n                //     type: 'circle',\n                //     position: [10, 10], // 圆心的坐标位置\n                //     draggable: true,\n                //     z: 3,\n                //     style: {\n                //         fill: 'red'\n                //     },\n                //     shape: {\n                //         r: 10 // 半径\n                //     }\n                // },\n                // {\n                //     id: 'p2',\n                //     type: 'circle',\n                //     position: [100, 10],\n                //     draggable: true,\n                //     z: 3,\n                //     style: {\n                //         fill: 'red'\n                //     },\n                //     shape: {\n                //         r: 10 // 半径\n                //     }\n                // },\n                // {\n                //     id: 'l1',\n                //     type: 'line',\n                //     // position: [100, 10],\n                //     draggable: true,\n                //     z: 2,\n                //     style: {\n                //         fill: 'red'\n                //     },\n                //     shape: {\n                //         x1: 10,\n                //         y1: 10,\n                //         x2: 100,\n                //         y2: 10\n                //     }\n                // },\n                {\n                    type: 'group',\n                    id: 'tooltip',\n                    ignore: true,\n                    children: [{\n                            type: 'rect',\n                            id: 'tooltip-bg',\n                            z: 100,\n                            left: 'center',\n                            shape: {\n                                width: 190,\n                                height: 90\n                            },\n                            style: {\n                                fill: 'rgba(22,50,79,0.7)',\n                                stroke: '#555',\n                                lineWidth: 0,\n                                shadowBlur: 8,\n                                shadowOffsetX: 0,\n                                shadowOffsetY: 2,\n                                shadowColor: 'rgba(0,0,0,0.15)'\n                            }\n                        }, {\n                            type: 'text',\n                            id: 't-text',\n                            z: 100,\n                            left: 'center',\n                            top: 10,\n                            style: {\n                                fill: '#fff',\n                                textAlign: 'center',\n                                text: '横轴表示温度，单位是°C',\n                                font: '400 14px Microsoft YaHei'\n                            }\n                        },\n                        {\n                            type: 'text',\n                            id: 't-text0',\n                            z: 100,\n                            left: 'center',\n                            top: 10,\n                            style: {\n                                fill: '#fff',\n                                textAlign: 'center',\n                                text: '横轴表示温度，单位是°C',\n                                font: '400 14px Microsoft YaHei'\n                            }\n                        },\n                        {\n                            type: 'text',\n                            id: 't-text1',\n                            z: 100,\n                            left: 'center',\n                            top: 30,\n                            style: {\n                                fill: '#fff',\n                                textAlign: 'center',\n                                text: '，单位是°C',\n                                font: '400 14px Microsoft YaHei'\n                            }\n                        }\n                    ]\n                }\n\n            ]\n\n        },\n        {\n            id: 'legend',\n            type: 'group',\n            children: [{\n                id: 'legend-bg',\n                type: 'rect',\n                z: 66,\n                cursor: 'default',\n                shape: {\n                    width: 200,\n                    height: 300\n                },\n                style: {\n                    fill: 'yellow'\n                }\n            }]\n        }\n    ]\n};\n\n/*\nlet dragMoveV = [0, 0]; // 拖动产生的偏移\nlet pointListCopy\n// 拖动组\nfunction groupCanDrag() {\n    return e => {\n        const curPosition = e.target.position; // 拖拽面板的位置\n        dragMoveV = curPosition;\n        //移动背景图\n        myChart.setOption({\n            graphic: [{\n                    id: 'group1',\n                    $action: 'merge',\n                    position: vecSub(curPosition, scaleMoveV)\n                },\n            ]\n        });\n    };\n}*/\n\nlet isDrag // 是否在拖动\nlet dragOrigin //拖动的起始点\nlet panPosition = [0, 0]; // 拖拽盘的位置\nfunction dragPanStart() {\n\n    return e => {\n        isDrag = true;\n        dragOrigin = [e.offsetX, e.offsetY];\n        panPosition = myChart.getOption().graphic[0].elements[0].position;\n    }\n\n}\n\nlet pointListCopy;\n\nfunction dragPan() {\n    return e => {\n\n        if (!isDrag) return;\n        const curPos = [e.offsetX, e.offsetY]\n        const moveV = vecSub(curPos, dragOrigin);\n        pointListCopy = JSON.parse(JSON.stringify(pointList));\n        pointListCopy.forEach(point => {\n            point.position = vecAdd(point.position, moveV)\n        })\n        updatePoints(pointListCopy);\n        drawLine(lineList, pointListCopy);\n\n\n        myChart.setOption({\n            graphic: [{\n                    id: 'toolPan',\n                    $action: 'merge',\n                    position: vecAdd(moveV, panPosition),\n                },\n                {\n                    id: 'bg',\n                    $action: 'merge',\n                    position: vecAdd(moveV, panPosition),\n                }\n            ],\n\n        })\n    }\n\n}\n\nfunction dragPanEnd() {\n    return e => {\n        isDrag = false;\n        dragOrigin = undefined;\n        if (!pointListCopy) return\n        pointList = pointListCopy;\n        panPosition = myChart.getOption().graphic[0].elements[0].position;\n    }\n\n}\n\n\nlet curScale = 1.00;\n// 缩放 group\nfunction groupCanZoom(groupId, dragPanId) {\n    return e => {\n        let curPointerPos = [e.offsetX, e.offsetY];\n        const minScale = 0.5; // 最小缩小尺寸\n        const maxScale = 5; // 最大放大尺寸\n        const scaleStep = 1.25; // 每次滚轮滑动改变的尺寸\n        const isWheelUp = e.wheelDelta > 0;\n        scale = isWheelUp ? scaleStep : (1 / scaleStep);\n\n\n      \n\n        \n        \n       if (curScale * scale < minScale || curScale * scale > maxScale) return;\n       curScale = curScale * scale;\n\n        //const pointListCopy = JSON.parse(JSON.stringify(pointList)); // 深拷贝\n        pointList.forEach(point => {\n            const tmp1 = vecSub(point.position, curPointerPos);\n            const tmp2 = vecScale(tmp1, scale);\n            point.position = vecAdd(tmp2, curPointerPos);\n        })\n        updatePoints(pointList);\n        drawLine(lineList, pointList)\n        panPosition = myChart.getOption().graphic[0].elements[0].position;\n        // 计算背景图原点的偏移\n        const temp1 = vecSub(panPosition, curPointerPos);\n        const temp2 = vecScale(temp1, scale);\n        panPosition = vecAdd(temp2, curPointerPos)\n\n        myChart.setOption({\n            graphic: [{\n                    id: 'bg',\n                    $action: 'merge',\n                    scale: [curScale, curScale],\n                    shape: {\n                        height: 300 * curScale,\n                        width: 600 * curScale,\n                    },\n                    position: panPosition,\n                },\n\n                {\n                    id: 'toolPan',\n                    $action: 'merge',\n                    shape: {\n                        height: 300 * curScale,\n                        width: 600 * curScale,\n                    },\n                    position: panPosition\n                }\n            ]\n        });\n\n\n    };\n}\n\n// 画点\nfunction drawPoint(points) {\n    const pointsInGroup = [];\n    // 给每个点设置 circle 的配置\n    points.forEach(point => {\n        const pointOpt = {\n            id: point.name,\n            name: point.name,\n            type: 'circle',\n            items: point.items,\n            position: point.position,\n            draggable: true,\n            z: 3,\n            style: {\n                fill: point.color || 'black'\n            },\n            shape: {\n                r: 10 // 半径\n            },\n            ondrag: onDragPoint(lineList, pointList),\n            onclick: onPointClick(),\n            onmouseover: showTooltip(),\n            onmousemove: showTooltip(),\n            onmouseout: hideTooltip(),\n        };\n        pointsInGroup.push(pointOpt);\n    });\n    myChart.setOption({\n        graphic: [{\n            id: 'group1',\n            type: 'group',\n            $action: 'merge',\n            children: pointsInGroup\n        }]\n    });\n\n}\n\n// 更新点\nfunction updatePoints(points) {\n    const pointsOpt = [];\n    points.forEach(point => {\n        pointsOpt.push({\n            id: point.name,\n            $action: 'merge',\n            position: point.position\n        })\n    });\n    myChart.setOption({\n        graphic: pointsOpt\n    })\n}\n\n// 画线\nfunction drawLine(lines, points) {\n    const linesInGroup = [];\n    lines.forEach(line => {\n        const pointsInLine = [];\n        line.nodes.forEach(item => {\n            points.forEach(point => {\n                if (item.name === point.name) pointsInLine.push(point.position)\n            })\n        });\n        const lineOpt = {\n            id: line.name,\n            type: 'polyline',\n            z: 2,\n            style: {\n                stroke: '#838A9D',\n                lineWidth: 2,\n            },\n            shape: {\n                points: pointsInLine,\n            },\n            onclick: onClickLine()\n        };\n        linesInGroup.push(lineOpt);\n\n    });\n    myChart.setOption({\n        graphic: [{\n            id: 'group1',\n            type: 'group',\n            $action: 'merge',\n            children: linesInGroup\n        }]\n    });\n\n}\n\n// 当移动点时，重新画线\nfunction onDragPoint(lines, points) {\n    return e => {\n        const curPointName = e.target.__ecGraphicId;\n        const curPointPosition = [e.offsetX, e.offsetY];\n        pointList.forEach(point => {\n            if (point.name === curPointName) {\n                point.position = curPointPosition;\n\n            }\n        });\n        // 只从新画该测点的测线\n        const linesNeedDraw = lines.filter(line => {\n            if (line.nodes.filter(item => item.name === curPointName).length) return true;\n        });\n        updatePoints(pointList);\n        drawLine(linesNeedDraw, pointList);\n    };\n}\n\nlet lastClickedPoint = '';\n// 鼠标点击测点，测点放大和加上阴影\nfunction onPointClick() {\n    // 放大后的scale\n    magnifyScale = 1.2;\n    return e => {\n        const curPoint = e.target;\n        const curPointName = curPoint.__ecGraphicId;\n        const curScale = curPoint.scale[0];\n        const curColor = curPoint.style.fill;\n        const scale = curScale === magnifyScale ? 1 : magnifyScale;\n        optList = [{\n            id: curPointName,\n            $action: 'merge',\n            scale: [scale, scale],\n            style: {\n                shadowBlur: curScale === magnifyScale ? 0 : 4,\n                shadowColor: curColor\n            }\n        }];\n        // 取消上次的选中\n        if (lastClickedPoint && lastClickedPoint !== curPointName) {\n            optList.push({\n                id: lastClickedPoint,\n                $action: 'merge',\n                scale: [1, 1],\n                style: {\n                    shadowBlur: 0,\n                }\n            });\n            lastClickedPoint = '';\n        }\n        myChart.setOption({\n            graphic: optList\n        });\n        lastClickedPoint = curPointName;\n    }\n}\n\nlastClickedLine = ''\n// 点击线后放大线\nfunction onClickLine() {\n    // 放大后的线宽\n    magnifyWidth = 4.5;\n    return e => {\n        const curLine = e.target;\n        const curLineName = curLine.__ecGraphicId;\n        const curLineWidth = curLine.style.lineWidth;\n        optList = [{\n            id: curLineName,\n            $action: 'merge',\n            style: {\n                lineWidth: curLineWidth === magnifyWidth ? 2 : magnifyWidth,\n            }\n        }];\n        // 取消上次的选中\n        if (lastClickedLine && lastClickedLine !== curLineName) {\n            optList.push({\n                id: lastClickedLine,\n                $action: 'merge',\n                style: {\n                    lineWidth: 2,\n                }\n            });\n            lastClickedLine = '';\n        }\n        myChart.setOption({\n            graphic: optList\n        });\n        lastClickedLine = curLineName;\n    }\n}\n\n// 还原上次放大的点\n/*\nfunction resizeLastPoint() {\n    if (!lastClickedPoint) return;\n    console.log(lastClickedPoint);\n    optList = [{\n        id: lastClickedPoint,\n        $action: 'merge',\n        scale: [1, 1],\n    }];\n    myChart.setOption({\n        graphic: optList\n    });\n    lastClickedPoint = '';\n}\n*/\n\n\n// 显示 tooltip\nfunction showTooltip() {\n    return e => {\n        const point = e.target;\n\n        let maxLen = 0; // 最长字符数\n        point.items.forEach(item => {\n            const str = item.name + item.value;\n            maxLen = str.length > maxLen ? str.length : maxLen;\n        });\n\n        const width = maxLen * 14 + 20;\n        const height = point.items ? point.items.length * 20 + 40 : 40;\n        const position = point.position;\n        let tipX;\n        let tipY;\n\n        if (position[0] < width + 10) {\n            // x 坐标过小,tooltip 在右方\n            tipX = position[0] + width / 2 + 10;\n        } else {\n            tipX = position[0] - width / 2 - 10;\n        }\n\n        if (position[1] < height + 10) {\n            // y 坐标过小,tooltip 在下方\n            tipY = position[1] + 10;\n        } else {\n            tipY = position[1] - height - 10;\n        }\n\n        const textList = [{\n            type: 'text',\n            id: 't-text',\n            $action: 'merge',\n            top: 10,\n            style: {\n                text: point.name,\n            }\n        }]\n        point.items.forEach((item, i) => {\n            textOpt = {\n                type: 'text',\n                id: 't-text' + i,\n                $action: 'merge',\n                top: 10 + (i + 1) * 20,\n                style: {\n                    fill: '#fff',\n                    textAlign: 'center',\n                    text: item.name + ': ' + item.value,\n                    font: '400 14px Microsoft YaHei'\n                }\n            }\n            textList.push(textOpt)\n        })\n        // 先把 tooltip 内容置空\n        myChart.setOption({\n            graphic: [{\n                    id: 't-text',\n                    $action: 'merge',\n                    style: {\n                        text: '',\n                    }\n                },\n                {\n                    id: 't-text0',\n                    $action: 'merge',\n                    style: {\n                        text: '',\n                    }\n                },\n                {\n                    id: 't-text1',\n                    $action: 'merge',\n                    style: {\n                        text: '',\n                    }\n                }\n            ]\n        });\n        myChart.setOption({\n            graphic: [{\n                    id: 'tooltip',\n                    ignore: false,\n                    $action: 'merge',\n                    position: [tipX, tipY],\n                }, {\n                    id: 'tooltip-bg',\n                    $action: 'merge',\n                    shape: {\n                        height,\n                        width\n                    }\n                },\n                ...textList\n            ]\n        });\n\n    }\n}\n\n//隐藏 tooltip\nfunction hideTooltip() {\n    return e => {\n        myChart.setOption({\n            graphic: {\n                id: 'tooltip',\n                ignore: true,\n                $action: 'merge',\n            }\n        });\n    }\n}\n\nfunction vecAdd(vec1, vec2) {\n    if (vec1.length < 2 || vec2.length < 2) return\n    return [vec1[0] + vec2[0], vec1[1] + vec2[1]]\n}\n\nfunction vecSub(vec1, vec2) {\n    if (vec1.length < 2 || vec2.length < 2) return\n    return [vec1[0] - vec2[0], vec1[1] - vec2[1]]\n}\n\nfunction vecScale(vec, size) {\n    if (vec.length < 2) return\n    return [vec[0] * size, vec[1] * size]\n}\n// 取反向量\nfunction vecNegate(vec) {\n    if (vec.length < 2) return\n    return [-vec[0], -vec[1]]\n}\n\n// 画图例\nfunction drawLegend() {\n\n    const legendOpt = pointList.map((point, i) => {\n        return {\n            id: 'legend' + i,\n            type: 'group',\n            position: [10, 25 * i],\n            children: [{\n                        // 点击的透明面板\n                        id: 'legend' + i + '-pan',\n                        pId: point.name,\n                        legendId: 'legend' + i,\n                        color: point.color,\n                        type: 'rect',\n                        z: 67, // z 方向上的高度\n                        position: [0,0],\n                        invisible: true, // 节点不可见，不然会挡住底图\n                        shape: {\n                            height: 20,\n                            width: 100,\n                        },\n                        onclick: onLegendClick()\n                    },\n\n                    {\n                        id: 'legend' + i + '-c',\n                        type: 'circle',\n                        position: [10, 10], // 圆心的坐标位置\n                        z: 66,\n                        silent: true,\n                        style: {\n                            fill: point.color\n                        },\n                        shape: {\n                            r: 10 // 半径\n                        }\n                    },\n                    {\n                        id: 'legend' + i + '-t',\n                        type: 'text',\n                        position: [30, 10 - 5], // 圆心的坐标位置\n                        z: 66,\n                        silent: true,\n                        style: {\n                            text: point.name,\n                            font: 'bolder 14px \"Microsoft YaHei\", sans-serif',\n                            fill: point.color\n                        },\n                    },]\n        }\n\n    });\n\n\n    myChart.setOption({\n        graphic: [{\n            id: 'legend',\n            type: 'group',\n            $action: 'merge',\n            children: legendOpt\n        }]\n    });\n\n}\n\n// 点击图例\nfunction onLegendClick() {\n    return e => {\n        const legend = e.target;\n        const pId = legend.pId;\n        const legendId = legend.legendId\n        if (!legend.isHide) {\n            myChart.setOption({\n                graphic:[{\n                    id: legendId + '-c',\n                    style: {\n                        fill: 'rgba(230,233,239,1)',\n                    }\n                },\n                {\n                    id: legendId + '-t',\n                    style: {\n                        fill: 'rgba(230,233,239,1)',\n                    }\n                },\n                {\n                    id: pId,\n                    ignore: true,\n                }\n                ]\n            });\n            legend.isHide = true;\n            \n        }else {\n              myChart.setOption({\n                graphic:[{\n                    id: legendId + '-c',\n                    style: {\n                        fill: legend.color,\n                    }\n                },\n                {\n                    id: legendId + '-t',\n                    style: {\n                        fill: legend.color,\n                    }\n                },\n                 {\n                    id: pId,\n                    ignore: false,\n                }\n                ]\n            });\n            legend.isHide = false;\n        } \n        \n    }\n}\n\n\nsetTimeout(function() {\n    drawPoint(pointList);\n    drawLine(lineList, pointList);\n    drawLegend();\n}, 100);","html":"","externalScripts":"","updaterUID":"bd-2452781596","theme":"","layout":"","viewCount":45,"userName":"双***b","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xUWxG0BbJ.png?v=1583299700895","isCustomThumbnail":0,"builtinTags":["category-work","graphic"],"customTags":[],"updaterUserName":"双***b"}}