{"status":0,"data":{"cid":"xfjcF88jSs","authorUid":"bd-759773267","authorUserName":"马***哥","title":"多子图line每个子图可单独查看","description":"点击子图的标题grid高亮，再点击右上custom tool单独查看","latestVersion":3,"alwaysLatest":1,"createTime":"2019-02-20T06:56:47.000Z","lastUpdateTime":"2019-02-20T06:56:47.000Z","auth":2,"uid":"bd-759773267","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":3,"parentVersion":2,"echartsVersion":"4.2.1","versionCreateTime":"2019-02-27T08:28:12.000Z","code":"let easingFuncs = {\n    linear: function(k) {\n        return k;\n    },\n    quadraticIn: function(k) {\n        return k * k;\n    },\n    quadraticOut: function(k) {\n        return k * (2 - k);\n    },\n    quadraticInOut: function(k) {\n        if ((k *= 2) < 1) {\n            return 0.5 * k * k;\n        }\n        return -0.5 * (--k * (k - 2) - 1);\n    },\n    cubicIn: function(k) {\n        return k * k * k;\n    },\n    cubicOut: function(k) {\n        return --k * k * k + 1;\n    },\n    cubicInOut: function(k) {\n        if ((k *= 2) < 1) {\n            return 0.5 * k * k * k;\n        }\n        return 0.5 * ((k -= 2) * k * k + 2);\n    },\n    quarticIn: function(k) {\n        return k * k * k * k;\n    },\n    quarticOut: function(k) {\n        return 1 - (--k * k * k * k);\n    },\n    quarticInOut: function(k) {\n        if ((k *= 2) < 1) {\n            return 0.5 * k * k * k * k;\n        }\n        return -0.5 * ((k -= 2) * k * k * k - 2);\n    },\n    quinticIn: function(k) {\n        return k * k * k * k * k;\n    },\n    quinticOut: function(k) {\n        return --k * k * k * k * k + 1;\n    },\n    quinticInOut: function(k) {\n        if ((k *= 2) < 1) {\n            return 0.5 * k * k * k * k * k;\n        }\n        return 0.5 * ((k -= 2) * k * k * k * k + 2);\n    },\n    sinusoidalIn: function(k) {\n        return 1 - Math.cos(k * Math.PI / 2);\n    },\n    sinusoidalOut: function(k) {\n        return Math.sin(k * Math.PI / 2);\n    },\n    sinusoidalInOut: function(k) {\n        return 0.5 * (1 - Math.cos(Math.PI * k));\n    },\n    exponentialIn: function(k) {\n        return k === 0 ? 0 : Math.pow(1024, k - 1);\n    },\n    exponentialOut: function(k) {\n        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\n    },\n    exponentialInOut: function(k) {\n        if (k === 0) {\n            return 0;\n        }\n        if (k === 1) {\n            return 1;\n        }\n        if ((k *= 2) < 1) {\n            return 0.5 * Math.pow(1024, k - 1);\n        }\n        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\n    },\n    circularIn: function(k) {\n        return 1 - Math.sqrt(1 - k * k);\n    },\n    circularOut: function(k) {\n        return Math.sqrt(1 - (--k * k));\n    },\n    circularInOut: function(k) {\n        if ((k *= 2) < 1) {\n            return -0.5 * (Math.sqrt(1 - k * k) - 1);\n        }\n        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n    },\n    elasticIn: function(k) {\n        let s;\n        let a = 0.1;\n        let p = 0.4;\n        if (k === 0) {\n            return 0;\n        }\n        if (k === 1) {\n            return 1;\n        }\n        if (!a || a < 1) {\n            a = 1;\n            s = p / 4;\n        } else {\n            s = p * Math.asin(1 / a) / (2 * Math.PI);\n        }\n        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n    },\n    elasticOut: function(k) {\n        let s;\n        let a = 0.1;\n        let p = 0.4;\n        if (k === 0) {\n            return 0;\n        }\n        if (k === 1) {\n            return 1;\n        }\n        if (!a || a < 1) {\n            a = 1;\n            s = p / 4;\n        } else {\n            s = p * Math.asin(1 / a) / (2 * Math.PI);\n        }\n        return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1);\n    },\n    elasticInOut: function(k) {\n        let s;\n        let a = 0.1;\n        let p = 0.4;\n        if (k === 0) {\n            return 0;\n        }\n        if (k === 1) {\n            return 1;\n        }\n        if (!a || a < 1) {\n            a = 1;\n            s = p / 4;\n        } else {\n            s = p * Math.asin(1 / a) / (2 * Math.PI);\n        }\n        if ((k *= 2) < 1) {\n            return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\n        }\n        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\n\n    },\n\n    // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动\n    backIn: function(k) {\n        let s = 1.70158;\n        return k * k * ((s + 1) * k - s);\n    },\n    backOut: function(k) {\n        let s = 1.70158;\n        return --k * k * ((s + 1) * k + s) + 1;\n    },\n    backInOut: function(k) {\n        let s = 1.70158 * 1.525;\n        if ((k *= 2) < 1) {\n            return 0.5 * (k * k * ((s + 1) * k - s));\n        }\n        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n    },\n\n    // 创建弹跳效果\n    bounceIn: function(k) {\n        return 1 - easingFuncs.bounceOut(1 - k);\n    },\n    bounceOut: function(k) {\n        if (k < (1 / 2.75)) {\n            return 7.5625 * k * k;\n        } else if (k < (2 / 2.75)) {\n            return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n        } else if (k < (2.5 / 2.75)) {\n            return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n        } else {\n            return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n        }\n    },\n    bounceInOut: function(k) {\n        if (k < 0.5) {\n            return easingFuncs.bounceIn(k * 2) * 0.5;\n        }\n        return easingFuncs.bounceOut(k * 2 - 1) * 0.5 + 0.5;\n    }\n};\n\nlet N_POINT = 30;\n\nlet grids = [];\nlet xAxes = [];\nlet yAxes = [];\nlet series = [];\nlet titles = [];\nlet dataZooms = [];\nlet count = 0;\nlet seriesCount = 0;\nlet seriseMap = [];\n\nlet selectMap = [];\nlet selectIndex = -1;\nlet selectGrid = {};\nlet showOneChart = false;\n\necharts.util.each(easingFuncs, function(easingFunc, name) {\n    let data = [];\n    let half_data = [];\n    let quarter_data = [];\n    for (let i = 0; i <= N_POINT; i++) {\n        let x = i / N_POINT;\n        let y = easingFunc(x);\n        data.push([x, y]);\n        half_data.push([x, y * 0.5]);\n        quarter_data.push([x, y * 0.25]);\n    }\n    selectMap.push(false);\n    grids.push({\n        show: true,\n        borderWidth: 0,\n        backgroundColor: '#fff',\n        shadowColor: selectMap[count] ? 'rgba(255, 0, 0, 1)' : 'rgba(0, 0, 0, 0.3)',\n        shadowBlur: selectMap[count] ? 10 : 2,\n        containLabel: true,\n    });\n    xAxes.push({\n        type: 'value',\n        show: true,\n        min: 0,\n        max: 1,\n        gridIndex: count,\n    });\n    yAxes.push({\n        type: 'value',\n        show: true,\n        min: -0.4,\n        max: 1.4,\n        gridIndex: count,\n    });\n    seriseMap.push([]);\n    series.push({\n        name: 'origin',\n        type: 'line',\n        xAxisIndex: count,\n        yAxisIndex: count,\n        data: data,\n        showSymbol: false,\n        animationEasing: name,\n        animationDuration: 1000,\n        itemStyle: {\n            color: 'rgba(255, 0, 0, 1)'\n        }\n    });\n    seriseMap[count].push(seriesCount++);\n    series.push({\n        name: \"half\",\n        type: 'line',\n        xAxisIndex: count,\n        yAxisIndex: count,\n        data: half_data,\n        showSymbol: false,\n        animationEasing: name,\n        animationDuration: 1000,\n        itemStyle: {\n            color: 'rgba(0, 255, 0, 1)'\n        }\n    });\n    seriseMap[count].push(seriesCount++);\n    series.push({\n        name: \"quarter\",\n        type: 'line',\n        xAxisIndex: count,\n        yAxisIndex: count,\n        data: quarter_data,\n        showSymbol: false,\n        animationEasing: name,\n        animationDuration: 1000,\n        itemStyle: {\n            color: 'rgba(0, 0, 255, 1)'\n        }\n    });\n    seriseMap[count].push(seriesCount++);\n    titles.push({\n        textAlign: 'center',\n        text: name,\n        textStyle: {\n            fontSize: 12,\n            fontWeight: 'normal'\n        },\n        triggerEvent: true,\n    });\n    dataZooms.push({\n        type: 'inside',\n        xAxisIndex: [count],\n        filterMode: 'filter',\n        start: 0,\n        end: 100,\n    });\n    // dataZooms.push({\n    //     type: 'inside',\n    //     yAxisIndex: [count],\n    //     filterMode: 'empty',\n    //     start: 0,\n    //     end: 100,\n    // });\n    count++;\n});\ntitles = titles.concat([{\n    text: '点击小图标题高亮=>点击放大按钮单独查看子图',\n    top: 'bottom',\n    left: 'center',\n}])\nselectGrid = grids[0];\n\n\n// rowNumber = 每行显示多少个子图\n\n// let rowNumber = Math.ceil(Math.sqrt(count));\nlet rowNumber = 3;\necharts.util.each(grids, function(grid, idx) {\n    grid.left = ((idx % rowNumber) / rowNumber * 100) + '%';\n    grid.top = (Math.floor(idx / rowNumber) / rowNumber * 100 + 4) + '%';\n    grid.width = (1 / rowNumber * 100 - 4) + '%';\n    grid.height = (1 / rowNumber * 100 - 4) + '%';\n\n    titles[idx].left = parseFloat(grid.left) + parseFloat(grid.width) / 2 + '%';\n    titles[idx].top = parseFloat(grid.top) + '%';\n});\n\noption = {\n    title: titles,\n    grid: grids,\n    xAxis: xAxes,\n    yAxis: yAxes,\n    series: series,\n    tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n            type: 'cross'\n        },\n        confine: true\n    },\n    toolbox: {\n        show: true,\n        itemSize: 20,\n        feature: {\n            myTool1: {\n                title: '放大按钮',\n                icon: 'path://M31.008 27.231l-7.58-6.447c-0.784-0.705-1.622-1.029-2.299-0.998 1.789-2.096 2.87-4.815 2.87-7.787 0-6.627-5.373-12-12-12s-12 5.373-12 12 5.373 12 12 12c2.972 0 5.691-1.081 7.787-2.87-0.031 0.677 0.293 1.515 0.998 2.299l6.447 7.58c1.104 1.226 2.907 1.33 4.007 0.23s0.997-2.903-0.23-4.007zM12 20c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8-3.582 8-8 8zM14 6h-4v4h-4v4h4v4h4v-4h4v-4h-4z',\n                onclick: function() {\n                    if (selectIndex != -1) {\n                        showOneChart = !showOneChart;\n                        myChart.setOption({\n                            toolbox: {\n                                feature: {\n                                    myTool1: {\n                                        iconStyle: {\n                                            color: (showOneChart) ? '#7CFC00' : '#cdcdcd',\n                                        },\n                                    },\n                                },\n                            },\n                        });\n                        if (showOneChart) {\n                            let oneSeries = [];\n                            for (let i = 0; i < seriseMap[selectIndex].length; ++i) {\n                                let s = series[seriseMap[selectIndex][i]];\n                                let se = {\n                                    name: s.name,\n                                    type: s.type,\n                                    xAxisIndex: 0,\n                                    yAxisIndex: 0,\n                                    data: s.data,\n                                    showSymbol: false,\n                                    animationEasing: name,\n                                    animationDuration: 1000,\n                                    itemStyle: s.itemStyle\n                                };\n                                oneSeries.push(se);\n                            }\n                            let option = {\n                                title: {\n                                    text: titles[selectIndex].text,\n                                    top: 'bottom',\n                                    left: 'center',\n                                },\n                                grid: {\n                                    show: true,\n                                    borderWidth: 0,\n                                    backgroundColor: '#fff',\n                                    shadowColor: 'rgba(0, 0, 0, 1)',\n                                    shadowBlur: 10,\n                                    // left: '4%',\n                                    top: '4%',\n                                    // width: '95%',\n                                    // height: '90%',\n                                    containLabel: true,\n                                },\n                                xAxis: {\n                                    type: 'value',\n                                    show: true,\n                                    min: xAxes[selectIndex].min,\n                                    max: xAxes[selectIndex].max,\n                                    gridIndex: 0\n                                },\n                                yAxis: {\n                                    type: 'value',\n                                    show: true,\n                                    min: yAxes[selectIndex].min,\n                                    max: yAxes[selectIndex].max,\n                                    gridIndex: 0\n                                },\n                                series: oneSeries,\n                                tooltip: {\n                                    trigger: 'axis',\n                                    axisPointer: {\n                                        type: 'cross'\n                                    }\n                                },\n                                dataZoom: {\n                                    type: 'inside',\n                                    xAxisIndex: [0],\n                                    filterMode: 'filter',\n                                    start: 0,\n                                    end: 100,\n                                },\n                                toolbox: myChart.getOption().toolbox\n                            };\n                            myChart.clear();\n                            myChart.setOption(option);\n                        } else {\n                            echarts.util.each(grids, function(grid, idx) {\n                                grid.left = ((idx % rowNumber) / rowNumber * 100) + '%';\n                                grid.top = (Math.floor(idx / rowNumber) / rowNumber * 100 + 4) + '%';\n                                grid.width = (1 / rowNumber * 100) + '%';\n                                grid.height = (1 / rowNumber * 100) + '%';\n\n                                titles[idx].left = parseFloat(grid.left) + parseFloat(grid.width) / 2 + '%';\n                                titles[idx].top = parseFloat(grid.top) + '%';\n                            });\n                            let option = {\n                                title: titles,\n                                grid: grids,\n                                xAxis: xAxes,\n                                yAxis: yAxes,\n                                series: series,\n                                tooltip: {\n                                    trigger: 'axis',\n                                    axisPointer: {\n                                        type: 'cross'\n                                    }\n                                },\n                                dataZoom: dataZooms,\n                                toolbox: myChart.getOption().toolbox\n                            };\n                            myChart.clear();\n                            myChart.setOption(option);\n                        }\n                    }\n                }\n            }\n        }\n    },\n    dataZoom: dataZooms,\n};\n\nmyChart.on('click', 'title', function(params) {\n    let mouseIndex = params['componentIndex'];\n    if (selectIndex != -1) {\n        selectMap[selectIndex] = false;\n        grids[selectIndex] = selectGrid;\n    }\n    if (mouseIndex != selectIndex) {\n        selectMap[mouseIndex] = !selectMap[mouseIndex];\n        selectIndex = mouseIndex;\n        selectGrid = grids[mouseIndex];\n        grids[mouseIndex] = {\n            show: true,\n            borderWidth: 0,\n            backgroundColor: '#fff',\n            shadowColor: selectMap[mouseIndex] ? 'rgba(255, 0, 0, 1)' : 'rgba(0, 0, 0, 0.3)',\n            shadowBlur: selectMap[mouseIndex] ? 12 : 2\n        }\n    } else {\n        selectIndex = -1;\n    }\n    myChart.setOption({\n        grid: grids\n    });\n});","html":"","externalScripts":"","updaterUID":"bd-759773267","theme":"","layout":"","viewCount":341,"userName":"马***哥","commentCount":0,"starCount":3,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xfjcF88jSs.png?v=1551256092796","isCustomThumbnail":0,"builtinTags":["category-work","dataZoom","grid","series-line","title","toolbox","tooltip"],"customTags":[],"updaterUserName":"马***哥"}}