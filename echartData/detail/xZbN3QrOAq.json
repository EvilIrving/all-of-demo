{"status":0,"data":{"cid":"xZbN3QrOAq","authorUid":"obd-oN6D3qfp-72Q3GmepBJ4XZpEj5XIyCI","authorUserName":"b***n","title":"饼状图 三层圆","description":"饼状图 三层圆","latestVersion":21,"alwaysLatest":1,"createTime":"2020-08-12T02:13:05.000Z","lastUpdateTime":"2020-08-12T02:13:05.000Z","auth":2,"uid":"obd-oN6D3qfp-72Q3GmepBJ4XZpEj5XIyCI","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":21,"parentVersion":20,"echartsVersion":"4.8.0","versionCreateTime":"2020-10-30T02:00:51.000Z","code":"\r\n// 过滤掉 非0的数值\r\nlet resultList = [{\r\n        \"NAME\": \"未解除\",\r\n        \"COUNT\": 100\r\n    },\r\n    {\r\n        \"NAME\": \"已解除\",\r\n        \"COUNT\": 1\r\n    },\r\n] //后台只返回 数据部位0的数据\r\n// 颜色数组\r\nlet colorList = ['rgba(230,0,18,1)', 'rgba(19,181,177,1)'];\r\nlet animateBgColor = \"#09354d\"\r\nlet noDataColor = \"rgba(9,53,77,0.4)\"\r\nlet listOut = [] //最外层数据\r\nlet listCenter = [] //中间层数据\r\nlet listAnimate = [] //动画层数据 \r\nlet legendState = true // 图例显示隐藏\r\n\r\nlet innerRadius = [\"0\", \"30%\"]; //内层半径\r\nlet centerRadius = [\"40%\", \"68%\"]; //中间层半径\r\nlet outRadius = [\"68%\", \"72%\"]; //最外层半径\r\nlet animateRadius = [\"74%\", \"76%\"]; //动画半径\r\nlet animateSplitNum = 4; //动画拆分数据\r\nlet animateState = true; //打开 关闭动画\r\nlet total = 0 //数据总数\r\nlet labelLineState = true\r\nlet labelLength = 10; //label长度\r\nlet labelLength2 = 20; //label长度\r\nlet legendData = []\r\nfor (let i in resultList) {\r\n    total += resultList[i].COUNT\r\n}\r\n\r\n// 空白间隔\r\nlet placeHolderStyle = {\r\n    normal: {\r\n        label: {\r\n            show: false\r\n        },\r\n        labelLine: {\r\n            show: false\r\n        },\r\n        color: 'rgba(0, 0, 0, 0)',\r\n        borderColor: 'rgba(0, 0, 0, 0)',\r\n        borderWidth: 0\r\n    }\r\n};\r\n// 最外层label 样式\r\nlet rich = {\r\n    white: {\r\n        align: 'center',\r\n        padding: [3, 0]\r\n    }\r\n};\r\n\r\nlet splitNum = 100 //拆分数目\r\nif (resultList.length == 1) {\r\n    splitNum = 10000000000\r\n}\r\n\r\n// 饼状图 数据\r\nif (total == 0) {\r\n    // 最外层 数值为0\r\n    let aryOut0 = [{\r\n        value: 0,\r\n        name: \"\",\r\n        itemStyle: {\r\n            normal: {\r\n                // borderWidth: 5,\r\n                // shadowBlur: 20,\r\n                // borderColor: color[i],\r\n                // shadowColor: color[i],\r\n                color: noDataColor\r\n            }\r\n        }\r\n    }];\r\n    listOut = [...listOut, ...aryOut0];\r\n    listCenter = [...listCenter, ...aryOut0];\r\n\r\n} else {\r\n    for (let i in resultList) {\r\n        legendData.push(resultList[i].NAME)\r\n        // 最外层 数值为0\r\n        let aryOut0 = [{\r\n            value: resultList[i].COUNT,\r\n            name: resultList[i].NAME,\r\n            itemStyle: {\r\n                normal: {\r\n                    // borderWidth: 5,\r\n                    // shadowBlur: 20,\r\n                    // borderColor: color[i],\r\n                    // shadowColor: color[i],\r\n                    color: colorList[i]\r\n                }\r\n            }\r\n        }];\r\n        // 最外层 数值为不为0\r\n        let aryOut1 = [{\r\n                value: resultList[i].COUNT,\r\n                name: resultList[i].NAME,\r\n                itemStyle: {\r\n                    normal: {\r\n                        // borderWidth: 5,\r\n                        // shadowBlur: 20,\r\n                        // borderColor: color[i],\r\n                        // shadowColor: color[i],\r\n                        color: colorList[i]\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                value: total / splitNum,\r\n                name: \"\",\r\n                itemStyle: placeHolderStyle\r\n            }\r\n        ];\r\n\r\n        // 最外层 数值为0\r\n        let aryCenter0 = [{\r\n            value: resultList[i].COUNT,\r\n            name: resultList[i].NAME,\r\n            itemStyle: {\r\n                normal: {\r\n                    // borderWidth: 5,\r\n                    // shadowBlur: 20,\r\n                    // borderColor: color[i],\r\n                    // shadowColor: color[i],\r\n                    color: colorList[i],\r\n                    opacity: 0.2\r\n                }\r\n            }\r\n        }];\r\n        // 最外层 数值为不为0\r\n        let aryCenter1 = [{\r\n                value: resultList[i].COUNT,\r\n                name: resultList[i].NAME,\r\n                itemStyle: {\r\n                    normal: {\r\n                        // borderWidth: 5,\r\n                        // shadowBlur: 20,\r\n                        // borderColor: color[i],\r\n                        // shadowColor: color[i],\r\n                        color: colorList[i],\r\n                        opacity: 0.2\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                value: total / splitNum,\r\n                name: \"\",\r\n                itemStyle: placeHolderStyle\r\n            }\r\n        ];\r\n\r\n        if (resultList[i].COUNT == 0) {\r\n            // 外层数据\r\n            listOut = [...listOut, ...aryOut0];\r\n            // // 中间层数据\r\n            listCenter = [...listCenter, ...aryCenter0];\r\n        } else {\r\n            // 外层数据\r\n            listOut = [...listOut, ...aryOut1];\r\n            // 中间层数据\r\n            listCenter = [...listCenter, ...aryCenter1];\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// 动画部分 数据\r\nfor (let i = 0; i < animateSplitNum; i++) {\r\n    listAnimate.push({\r\n        value: 20,\r\n        name: i,\r\n        itemStyle: {\r\n            normal: {\r\n                color: animateBgColor\r\n            }\r\n        }\r\n    }, {\r\n        value: 1,\r\n        name: '',\r\n        itemStyle: placeHolderStyle\r\n    })\r\n}\r\n\r\n\r\n// 最外层的label\r\nlet func = (params) => {\r\n    let percent = ((params.value / total) * 100).toFixed(1)\r\n    let name = params.name.replace(/\\n/g, '')\r\n    if (params.name !== '') {\r\n        return name + params.value + '\\n{white|' + percent + '%}'\r\n    } else {\r\n        return ''\r\n    }\r\n}\r\n\r\n\r\n\r\noption = {\r\n    backgroundColor: '#04243E',\r\n    tooltip: {\r\n        show: true,\r\n        trigger: \"item\",\r\n        formatter: e => {\r\n            console.log(e)\r\n            if (e.data.name == \"\" || e.seriesName == \"最内层\" ||e.seriesName == \"动画部分\" || total == 0) {\r\n                return \"\";\r\n            } else {\r\n                let bgColor = \"\";\r\n                resultList.map((item, index) => {\r\n                    if (item.NAME == e.name) {\r\n                        bgColor = colorList[index];\r\n                    }\r\n                });\r\n                let percent = (e.value / total * 100)\r\n                if(parseInt(percent) != parseFloat(percent)){\r\n                    percent = percent.toFixed(2)\r\n                }\r\n                let marker = `<div style='display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${bgColor};'></div>`;\r\n                let str = `${marker}${e.name}<br>${e.value}(${percent}%)`;\r\n                return str;\r\n            }\r\n        }\r\n    },\r\n    legend: {\r\n        show:legendState,\r\n        orient: 'vertical',\r\n        data: legendData,\r\n        icon: 'circle',\r\n        left: '5px',\r\n        top: '10px',\r\n        textStyle: {\r\n            fontSize: 20,\r\n            color: \"#fff\"\r\n        }\r\n    },\r\n    series: [{\r\n            name: '动画部分',\r\n            type: 'pie',\r\n            label: {\r\n                normal: {\r\n                    show: false\r\n                },\r\n            },\r\n            labelLine: {\r\n                normal: {\r\n                    show: false\r\n                }\r\n            },\r\n            center: ['50%', '50%'],\r\n            radius: animateRadius,\r\n            hoverAnimation: false,\r\n            itemStyle: {\r\n                normal: {\r\n                    label: {\r\n                        show: false,\r\n                    },\r\n                    labelLine: {\r\n                        show: false,\r\n                    }\r\n                }\r\n            },\r\n            data: animateState ? listAnimate : [],\r\n        },\r\n        {\r\n            name: '最外层',\r\n            type: 'pie',\r\n            clockWise: false,\r\n            zlevel: 3,\r\n            center: ['50%', '50%'],\r\n            radius: outRadius,\r\n            hoverAnimation: false,\r\n            itemStyle: {\r\n                normal: {\r\n                    label: {\r\n                        show: labelLineState,\r\n                        position: 'outside',\r\n                        formatter: func,\r\n                        rich: rich\r\n                    },\r\n                    labelLine: {\r\n                        length: labelLength,\r\n                        length2: labelLength2,\r\n                        show: labelLineState,\r\n                    }\r\n                }\r\n            },\r\n            data: listOut,\r\n            animationType: 'scale',\r\n            animationEasing: 'elasticOut',\r\n            animationDelay: function(idx) {\r\n                return idx * 50;\r\n            }\r\n        },\r\n        {\r\n            name: '中间层',\r\n            type: 'pie',\r\n            clockWise: false,\r\n            center: ['50%', '50%'],\r\n            radius: centerRadius,\r\n            hoverAnimation: false,\r\n            itemStyle: {\r\n                normal: {\r\n                    label: {\r\n                        show: false,\r\n                    },\r\n                    labelLine: {\r\n                        show: false,\r\n                    }\r\n                }\r\n            },\r\n            data: listCenter,\r\n        },\r\n        {\r\n            name: '最内层',\r\n            type: \"pie\",\r\n            hoverAnimation: false,\r\n            radius: innerRadius,\r\n            center: [\"50%\", \"50%\"],\r\n\r\n            labelLine: {\r\n                normal: {\r\n                    show: false\r\n                }\r\n            },\r\n            data: [{\r\n                // 总数\r\n                value: total,\r\n                name: \"\",\r\n                label: {\r\n                    normal: {\r\n                        show: true,\r\n                        position: \"center\",\r\n                        color: \"#fff\",\r\n                        formatter: params => {\r\n                            return params.value;\r\n                        },\r\n                        fontSize: 28\r\n                    }\r\n                },\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: new echarts.graphic.RadialGradient(\r\n                            0.5,\r\n                            0.5,\r\n                            0.99,\r\n                            [{\r\n                                    offset: 0,\r\n                                    color: \"rgb(0, 0, 0, 0)\"\r\n                                },\r\n                                {\r\n                                    offset: 1,\r\n                                    color: \"#d7eaf5\"\r\n                                }\r\n                            ],\r\n                            false\r\n                        )\r\n                    }\r\n                }\r\n            }]\r\n        }\r\n    ]\r\n};\r\n\r\n// 网站加载缓慢问题\r\nsetTimeout(loop, 1000);\r\n\r\nfunction loop() {\r\n    let option = myChart.getOption();\r\n    option.series[0].startAngle = option.series[0].startAngle - 1;\r\n    myChart.setOption(option);\r\n    setTimeout(function() {\r\n        window.requestAnimationFrame(loop);\r\n    }, 50);\r\n}","html":"","externalScripts":"","updaterUID":"obd-oN6D3qfp-72Q3GmepBJ4XZpEj5XIyCI","theme":"","layout":"","viewCount":275,"userName":"b***n","commentCount":0,"starCount":2,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xZbN3QrOAq.png?v=1604023251959","isCustomThumbnail":0,"builtinTags":["category-work","legend","series-pie","tooltip"],"customTags":["pic"],"updaterUserName":"b***n"}}