{"status":0,"data":{"cid":"xR555Oavc","authorUid":"bd-101698999","authorUserName":"Z***8","title":"关系图点击节点展开次级节点效果尝试","description":"通过点击事件，结合图例 API 完成节点的显示/隐藏","latestVersion":1,"alwaysLatest":1,"createTime":"2019-12-02T16:17:58.000Z","lastUpdateTime":"2019-12-02T16:17:58.000Z","auth":2,"uid":"bd-101698999","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"4.4.0","versionCreateTime":"2019-12-02T16:17:58.000Z","code":"data = [{\n    name: 'node0',\n    category: 'node0',\n    value: 64,\n    x: 100,\n    y: 20\n}];\nlinks = [];\ncategories = [];\n\n// 生成 2 个子节点函数\nfunction generateNodes(nodeName, nodeX, nodeY, nodeValue, times) {\n\n    let children_0 = {\n        name: nodeName + '_0',\n        category: nodeName + '_childrens',\n        value: nodeValue / 2,\n        x: nodeX - 10 - times * 5,\n        y: nodeY + 17.32\n    };\n\n    let children_1 = {\n        name: nodeName + '_1',\n        category: nodeName + '_childrens',\n        value: nodeValue / 2,\n        x: nodeX + 10 + times * 5,\n        y: nodeY + 17.32\n    };\n\n    data.push(children_0, children_1);\n\n    links.push({\n        source: nodeName,\n        target: nodeName + '_0'\n    }, {\n        source: nodeName,\n        target: nodeName + '_1'\n    });\n\n    // 递归\n    if (times - 1 > 0) {\n        generateNodes(children_0.name, children_0.x, children_0.y, nodeValue / 2, times - 1);\n        generateNodes(children_1.name, children_1.x, children_1.y, nodeValue / 2, times - 1);\n    }\n}\n\nfunction getCategories(src) {\n    tmp = {};\n    ret = [];\n\n    for (let i in src) {\n        if (typeof tmp[src[i].category] === 'undefined') {\n            tmp[src[i].category] = '';\n            ret.push(src[i].category);\n        }\n    }\n\n    return ret;\n}\n\ngenerateNodes(data[0].name, data[0].x, data[0].y, data[0].value, 3);\n\ncategories = getCategories(data);\n\ncategoryStatus = (function(){\n    let ret = {};\n    for (let i in categories){\n        ret[categories[i]] = true;\n    }\n    return ret;\n})();\n//console.log(data);\n//console.log(links);\n//console.log(categories);\n//console.log(categoryStatus);\n\n\ndata.forEach(function(node) {\n    node.itemStyle = null;\n    node.symbolSize = node.value;\n    node.label = {\n        normal: {\n            show: node.value > 30\n        }\n    };\n    node.label.normal.show = node.value > 30;\n    node.category = categories.indexOf(node.category);\n});\n\n\noption = {\n    title: {\n        text: '关系图点击节点展开次级节点效果尝试'\n    },\n    tooltip: {},\n    legend: {\n        show:false,\n        y: '8%',\n        data: categories\n    },\n    animationDuration: 1500,\n    animationEasingUpdate: 'quinticInOut',\n    series: [{\n        name: 'ECharts学习',\n        type: 'graph',\n        layout: 'none',\n        data: data,\n        links: links,\n        categories: categories.map(function(a) {\n            return {\n                name: a\n            };\n        }),\n        roam: true,\n        focusNodeAdjacency: true,\n        itemStyle: {\n            normal: {\n                borderColor: '#fff',\n                borderWidth: 1,\n                shadowBlur: 10,\n                shadowColor: 'rgba(0, 0, 0, 0.3)'\n            }\n        },\n        label: {\n            position: 'right',\n            formatter: '{b}'\n        },\n        lineStyle: {\n            color: 'source',\n            curveness: 0.3\n        },\n        emphasis: {\n            lineStyle: {\n                width: 10\n            }\n        }\n    }]\n};\n\nmyChart.on('click', function(params) {\n    \n    categoryName = params.name + '_childrens';\n\n    // 如果 category 状态为显示，则通过一定规则隐藏所有 childres\n    if (categoryStatus[categoryName]) {\n\n        // 这里为了省事，直接通过字符串匹配判断了\n        for (let i in categories) {\n            if (categories[i].includes(params.name) && categories[i] != 'node0') {\n                myChart.dispatchAction({\n                    type: 'legendUnSelect',\n                    // 图例名称\n                    name: categories[i]\n                });\n            }\n        }\n        \n        categoryStatus[categoryName] = false;\n    \n    // 如 category 状态为隐藏，则显示    \n    } else {\n        for (let i in categories) {\n            if (categories[i].includes(params.name) && categoryStatus[categories[i]] || categories[i] === categoryName) {\n                myChart.dispatchAction({\n                    type: 'legendSelect',\n                    // 图例名称\n                    name: categories[i]\n                });\n            }\n        }\n        \n        categoryStatus[categoryName] = true;\n    }\n\n});\n\n/** \n【备注】\n1、此处为了省事,没有按照层级结构做判断（毕竟只是示意），所以显示隐藏时会有些 bug。\n  比如先点击 node0_1 隐藏，再点击 2 下 node0\n\n2、也可以通过直接修改 legend.selected + myChart.setOption 的方式实现。\n\n*/","html":"","externalScripts":"","updaterUID":"bd-101698999","theme":"","layout":"","viewCount":1501,"userName":"Z***8","commentCount":1,"starCount":7,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xR555Oavc.png?v=1575303478694","isCustomThumbnail":0,"builtinTags":["category-work","legend","series-graph","title","tooltip"],"customTags":[],"updaterUserName":"Z***8"}}