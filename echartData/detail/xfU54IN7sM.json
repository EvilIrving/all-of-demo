{"status":0,"data":{"cid":"xfU54IN7sM","authorUid":"bd-181101713","authorUserName":"j***6","title":"分析评估-图表2","description":"","latestVersion":1,"alwaysLatest":1,"createTime":"2021-11-10T07:02:39.000Z","lastUpdateTime":"2021-11-10T07:02:39.000Z","auth":2,"uid":"bd-181101713","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"4.9.0","versionCreateTime":"2021-11-10T07:02:39.000Z","code":"/*************************\npie3D 尝试\n\n更新时间: 2020.10.8 17:12 v1.1\n使用组件: grid3D、xAxis3D、yAxis3D、zAxis3D、surface\n EC 版本: 4.8.0\n GL 版本：0.4.3\n根据用户ZhXand618的模板克隆\n如果转载: 请注明出处\n\n*************************\n【 getParametricEquation 函数说明 】 :\n*************************\n    根据传入的\n    startRatio（浮点数）: 当前扇形起始比例，取值区间 [0, endRatio)\n    endRatio（浮点数）: 当前扇形结束比例，取值区间 (startRatio, 1]\n    isSelected（布尔值）:是否选中，效果参照二维饼图选中效果（单选）\n    isHovered（布尔值）: 是否放大，效果接近二维饼图高亮（放大）效果（未能实现阴影）\n    k（0~1之间的浮点数）：用于参数方程的一个参数，取值 0~1 之间，通过「内径/外径」的值换算而来。\n    \n    生成 3D 扇形环曲面\n\n*************************\n【 getPie3D 函数说明 】 :\n*************************\n    根据传入的\n    pieData（object）：饼图数据\n    internalDiameterRatio（0~1之间的浮点数）：内径/外径的值（默认值 1/2），当该值等于 0 时，为普通饼图\n    \n    生成模拟 3D 饼图的配置项 option\n    \n    备注：饼图数据格式示意如下\n    [{\n        name: '数据1',\n        value: 10\n    }, {\n        // 数据项名称\n        name: '数据2',\n        value : 56,\n        itemStyle:{\n            // 透明度\n            opacity: 0.5,\n            // 扇形颜色\n            color: 'green'\n        }\n    }]\n    \n*************************\n【 鼠标事件监听说明 】 :\n*************************\n    click： 实现饼图的选中效果（单选）\n            大致思路是，通过监听点击事件，获取到被点击数据的系列序号 params.seriesIndex，\n            然后将对应扇形向外/向内移动 10% 的距离。\n            \n    mouseover： 近似实现饼图的高亮（放大）效果\n            大致思路是，在饼图外部套一层透明的圆环，然后监听 mouseover 事件，获取\n            到对应数据的系列序号 params.seriesIndex 或系列名称 params.seriesName，\n            如果鼠标移到了扇形上，则先取消高亮之前的扇形（如果有）,再高亮当前扇形；\n            如果鼠标移到了透明圆环上，则只取消高亮之前的扇形（如果有），不做任何高亮。\n            \n    globalout： 当鼠标移动过快，直接划出图表区域时，有可能监听不到透明圆环的 mouseover，\n            导致此前高亮没能取消，所以补充了对 globalout 的监听。\n\n        \n*************************/\n\n// 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\nfunction getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, h) {\n    // 计算\n    let midRatio = (startRatio + endRatio) / 2;\n\n    let startRadian = startRatio * Math.PI * 2;\n    let endRadian = endRatio * Math.PI * 2;\n    let midRadian = midRatio * Math.PI * 2;\n\n    // 如果只有一个扇形，则不实现选中效果。\n    if (startRatio === 0 && endRatio === 1) {\n        isSelected = false;\n    }\n\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n    k = typeof k !== 'undefined' ? k : 1 / 3;\n\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n    let offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n    let offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\n    let hoverRate = isHovered ? 0.55 : 0.5;\n\n    // 返回曲面参数方程\n    return {\n        u: {\n            min: -Math.PI,\n            max: Math.PI * 3,\n            step: Math.PI / 32,\n        },\n\n        v: {\n            min: 0,\n            max: Math.PI * 2,\n            step: Math.PI / 20,\n        },\n\n        x: function (u, v) {\n            if (u < startRadian) {\n                return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n\n        y: function (u, v) {\n            if (u < startRadian) {\n                return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n\n        z: function (u, v) {\n            if (u < -Math.PI * 0.5) {\n                return Math.sin(u);\n            }\n            if (u > Math.PI * 2.5) {\n                return Math.sin(u) * h * 0.1;\n            }\n            return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\n        },\n    };\n}\n\n// 生成模拟 3D 饼图的配置项\nfunction getPie3D(pieData, internalDiameterRatio) {\n    let series = [];\n    let sumValue = 0;\n    let startValue = 0;\n    let endValue = 0;\n    let legendData = [];\n    let k =\n        typeof internalDiameterRatio !== 'undefined'\n            ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\n            : 1 / 3;\n\n    // 为每一个饼图数据，生成一个 series-surface 配置\n    for (let i = 0; i < pieData.length; i++) {\n        sumValue += pieData[i].value;\n        let seriesItem = {\n            name: typeof pieData[i].name === 'undefined' ? `series${i}` : pieData[i].name,\n            type: 'surface',\n            parametric: true,\n            wireframe: {\n                show: false,\n            },\n            pieData: pieData[i],\n            pieStatus: {\n                selected: false,\n                hovered: false,\n                k: k,\n            },\n        };\n\n        if (typeof pieData[i].itemStyle != 'undefined') {\n            let itemStyle = {};\n\n            typeof pieData[i].itemStyle.color != 'undefined' ? (itemStyle.color = pieData[i].itemStyle.color) : null;\n            typeof pieData[i].itemStyle.opacity != 'undefined'\n                ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\n                : null;\n\n            seriesItem.itemStyle = itemStyle;\n        }\n        series.push(seriesItem);\n    }\n\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n    for (let i = 0; i < series.length; i++) {\n        endValue = startValue + series[i].pieData.value;\n\n        series[i].pieData.startRatio = startValue / sumValue;\n        series[i].pieData.endRatio = endValue / sumValue;\n        series[i].parametricEquation = getParametricEquation(\n            series[i].pieData.startRatio,\n            series[i].pieData.endRatio,\n            false,\n            false,\n            k,\n            series[i].pieData.value\n        );\n\n        startValue = endValue;\n\n        legendData.push(series[i].name);\n    }\n\n    // 补充一个透明的圆环，用于支撑高亮功能的近似实现。\n    series.push({\n        name: 'mouseoutSeries',\n        type: 'surface',\n        parametric: true,\n        wireframe: {\n            show: false,\n        },\n        itemStyle: {\n            opacity: 0,\n        },\n        parametricEquation: {\n            u: {\n                min: 0,\n                max: Math.PI * 2,\n                step: Math.PI / 20,\n            },\n            v: {\n                min: 0,\n                max: Math.PI,\n                step: Math.PI / 20,\n            },\n            x: function (u, v) {\n                return Math.sin(v) * Math.sin(u) + Math.sin(u);\n            },\n            y: function (u, v) {\n                return Math.sin(v) * Math.cos(u) + Math.cos(u);\n            },\n            z: function (u, v) {\n                return Math.cos(v) > 0 ? 0.1 : -0.1;\n            },\n        },\n    });\n\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\n    let option = {\n        //animation: false,\n        xAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        yAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        zAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        grid3D: {\n            show: false,\n            boxHeight: 10,\n            viewControl: {\n                //3d效果可以放大、旋转等，请自己去查看官方配置\n                alpha: 40,\n                // beta: 40,\n                rotateSensitivity: 0,\n                zoomSensitivity: 0,\n                panSensitivity: 0,\n                autoRotate: false,\n            },\n            //后处理特效可以为画面添加高光、景深、环境光遮蔽（SSAO）、调色等效果。可以让整个画面更富有质感。\n            postEffect: {\n                //配置这项会出现锯齿，请自己去查看官方配置有办法解决\n                enable: true,\n                bloom: {\n                    enable: true,\n                    bloomIntensity: 0.1,\n                },\n                SSAO: {\n                    enable: true,\n                    quality: 'medium',\n                    radius: 1,\n                },\n            },\n        },\n\n        series: series,\n    };\n    console.log('option', option);\n    return option;\n}\n\n// 传入数据生成 option\noption = getPie3D(\n    [\n        {\n            name: '员工类型1',\n            value: 44,\n            itemStyle: {\n                color: 'rgba(155,245,93,0.8)',\n            },\n        },\n        {\n            name: '员工类型2',\n            value: 28,\n            itemStyle: {\n                color: 'rgba(221,149,38,0.8)',\n            },\n        },\n        {\n            name: '员工类型3',\n            value: 15,\n            itemStyle: {\n                color: 'rgba(15,106,229,0.8)',\n            },\n        },\n        {\n            name: '员工类型4',\n            value: 13,\n            itemStyle: {\n                color: 'rgba(30,209,175,0.8)',\n            },\n        },\n    ],\n    0\n);\n\n// 监听鼠标事件，实现饼图选中效果（单选），近似实现高亮（放大）效果。\nlet selectedIndex = '';\nlet hoveredIndex = '';\n\n// 监听点击事件，实现选中效果（单选）\nmyChart.on('click', function (params) {\n    // 从 option.series 中读取重新渲染扇形所需的参数，将是否选中取反。\n    let isSelected = !option.series[params.seriesIndex].pieStatus.selected;\n    let isHovered = option.series[params.seriesIndex].pieStatus.hovered;\n    let k = option.series[params.seriesIndex].pieStatus.k;\n    let startRatio = option.series[params.seriesIndex].pieData.startRatio;\n    let endRatio = option.series[params.seriesIndex].pieData.endRatio;\n\n    // 如果之前选中过其他扇形，将其取消选中（对 option 更新）\n    if (selectedIndex !== '' && selectedIndex !== params.seriesIndex) {\n        option.series[selectedIndex].parametricEquation = getParametricEquation(\n            option.series[selectedIndex].pieData.startRatio,\n            option.series[selectedIndex].pieData.endRatio,\n            false,\n            false,\n            k,\n            option.series[selectedIndex].pieData.value\n        );\n        option.series[selectedIndex].pieStatus.selected = false;\n    }\n\n    // 对当前点击的扇形，执行选中/取消选中操作（对 option 更新）\n    option.series[params.seriesIndex].parametricEquation = getParametricEquation(\n        startRatio,\n        endRatio,\n        isSelected,\n        isHovered,\n        k,\n        option.series[selectedIndex].pieData.value\n    );\n    option.series[params.seriesIndex].pieStatus.selected = isSelected;\n\n    // 如果本次是选中操作，记录上次选中的扇形对应的系列号 seriesIndex\n    isSelected ? (selectedIndex = params.seriesIndex) : null;\n\n    // 使用更新后的 option，渲染图表\n    myChart.setOption(option);\n});\n\n// 监听 mouseover，近似实现高亮（放大）效果\nmyChart.on('mouseover', function (params) {\n    // 准备重新渲染扇形所需的参数\n    let isSelected;\n    let isHovered;\n    let startRatio;\n    let endRatio;\n    let k;\n\n    // 如果触发 mouseover 的扇形当前已高亮，则不做操作\n    if (hoveredIndex === params.seriesIndex) {\n        return;\n\n        // 否则进行高亮及必要的取消高亮操作\n    } else {\n        // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）\n        if (hoveredIndex !== '') {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。\n            isSelected = option.series[hoveredIndex].pieStatus.selected;\n            isHovered = false;\n            startRatio = option.series[hoveredIndex].pieData.startRatio;\n            endRatio = option.series[hoveredIndex].pieData.endRatio;\n            k = option.series[hoveredIndex].pieStatus.k;\n\n            // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n            option.series[hoveredIndex].parametricEquation = getParametricEquation(\n                startRatio,\n                endRatio,\n                isSelected,\n                isHovered,\n                k,\n                option.series[hoveredIndex].pieData.value\n            );\n            option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n            // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n            hoveredIndex = '';\n        }\n\n        // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）\n        if (params.seriesName !== 'mouseoutSeries') {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n            isSelected = option.series[params.seriesIndex].pieStatus.selected;\n            isHovered = true;\n            startRatio = option.series[params.seriesIndex].pieData.startRatio;\n            endRatio = option.series[params.seriesIndex].pieData.endRatio;\n            k = option.series[params.seriesIndex].pieStatus.k;\n\n            // 对当前点击的扇形，执行高亮操作（对 option 更新）\n            option.series[params.seriesIndex].parametricEquation = getParametricEquation(\n                startRatio,\n                endRatio,\n                isSelected,\n                isHovered,\n                k,\n                option.series[params.seriesIndex].pieData.value + 5\n            );\n            option.series[params.seriesIndex].pieStatus.hovered = isHovered;\n\n            // 记录上次高亮的扇形对应的系列号 seriesIndex\n            hoveredIndex = params.seriesIndex;\n        }\n\n        // 使用更新后的 option，渲染图表\n        myChart.setOption(option);\n    }\n});\n\n// 修正取消高亮失败的 bug\nmyChart.on('globalout', function () {\n    if (hoveredIndex !== '') {\n        // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n        isSelected = option.series[hoveredIndex].pieStatus.selected;\n        isHovered = false;\n        k = option.series[hoveredIndex].pieStatus.k;\n        startRatio = option.series[hoveredIndex].pieData.startRatio;\n        endRatio = option.series[hoveredIndex].pieData.endRatio;\n\n        // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n        option.series[hoveredIndex].parametricEquation = getParametricEquation(\n            startRatio,\n            endRatio,\n            isSelected,\n            isHovered,\n            k,\n            option.series[hoveredIndex].pieData.value\n        );\n        option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n        // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n        hoveredIndex = '';\n    }\n\n    // 使用更新后的 option，渲染图表\n    myChart.setOption(option);\n});\n","html":"","externalScripts":"https://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js,https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js","updaterUID":"bd-181101713","theme":"","layout":"","viewCount":0,"userName":"j***6","commentCount":0,"starCount":5,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xfU54IN7sM.png?v=1636527759833","isCustomThumbnail":0,"builtinTags":["category-work","grid3D","series-surface"],"customTags":[],"updaterUserName":"j***6"}}