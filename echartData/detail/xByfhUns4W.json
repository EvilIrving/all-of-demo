{"status":0,"data":{"cid":"xByfhUns4W","authorUid":"bd-1023445549","authorUserName":"宋***和","title":"Common Time Discovery","description":"给定一堆起止时间，交互式地选择公共时间最长且数据最多的时间区间。","latestVersion":1,"alwaysLatest":1,"createTime":"2017-07-06T13:10:02.000Z","lastUpdateTime":"2017-07-06T13:10:02.000Z","auth":2,"uid":"bd-1023445549","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"3.6.2","versionCreateTime":"2017-07-06T13:10:02.000Z","code":"var gridCount = 50;\nvar data = [\n    1478729724, 1479311478,\n    1478761660, 1479307021,\n    1478729885, 1479232519,\n    1478732238, 1479194757,\n    1478711101, 1479311996,\n    1478707230, 1479307195,\n    1478730048, 1479306188,\n    1478707206, 1479311128,\n    1479085312, 1479311271,\n    1478711635, 1479311998,\n    1478728498, 1479311999,\n    1478731526, 1479309311,\n    1478730676, 1479307276,\n    1478728717, 1479297930,\n    1478767403, 1479311994,\n    1478818927, 1479311998,\n    1478724285, 1479310387,\n    1478707205, 1479311390,\n    1478731145, 1479229316,\n    1478775204, 1479264482,\n    1478707205, 1479311879,\n    1478707205, 1479311994,\n    1478707206, 1479310890,\n    1479003360, 1479221106,\n    1478727895, 1479235223,\n    1478707203, 1479307996,\n    1478707201, 1479310388,\n    1478724694, 1479244875,\n    1478709314, 1479305480,\n    1478730502, 1479311506,\n    1478747274, 1479296426,\n    1478707264, 1479311999,\n    1478727436, 1479306982,\n    1478707204, 1479311994,\n    1478707206, 1479309008,\n    1478707762, 1479311957,\n    1478731348, 1479226004,\n    1478732983, 1479311296,\n    1478758006, 1479297177,\n    1478732624, 1479311995,\n    1478707204, 1479310260,\n    1478727295, 1479311997,\n    1479009556, 1479304022,\n    1478728047, 1479304756,\n    1478731409, 1479311994,\n    1478738554, 1479305618,\n    1478838482, 1479311994,\n    1478707624, 1479310732,\n    1478707240, 1479308394,\n    1478718520, 1479304536,\n    1478734323, 1479288904,\n    1478707202, 1479309501,\n    1478713771, 1479311859,\n    1478708635, 1479311478,\n    1478707202, 1479289802,\n    1478731092, 1479304848,\n    1478731592, 1479303829,\n    1478724961, 1479309346,\n    1478731196, 1479309348,\n    1478707206, 1479311560,\n    1478707205, 1479288653,\n    1478730962, 1479199476,\n    1478707204, 1479303015,\n    1478731994, 1479309152,\n    1478728876, 1479287088,\n    1478707266, 1479300729,\n    1478708111, 1479130712,\n    1478731061, 1479306130,\n    1478733092, 1479311651,\n    1478726863, 1479309931,\n    1478818445, 1479308438,\n    1478818176, 1479310822,\n    1478732149, 1479266358,\n    1478707206, 1479308779,\n    1478730323, 1479303450,\n    1478728318, 1479296128,\n    1478708318, 1479287815,\n    1478726086, 1479311998,\n    1478733362, 1479306667,\n    1478846528, 1479307204,\n    1478707205, 1479311971,\n    1478728060, 1479212106,\n    1478731436, 1479307836,\n    1478723527, 1479311991,\n    1478732854, 1479307296,\n    1478739740, 1479311998,\n    1478727046, 1479311994,\n    1478707573, 1479311652,\n    1478707215, 1479311986,\n    1478745396, 1479276767,\n    1478751561, 1479311996,\n    1478708392, 1479311994,\n    1478725996, 1479288990,\n    1478707201, 1479311991,\n    1478732584, 1479302518,\n    1478708190, 1479305596,\n    1478708685, 1479307847,\n    1478707204, 1479309067,\n    1478707206, 1479310392,\n    1478845900, 1479310515\n];\n\nvar startTime = [];\nvar endTime = [];\nvar heatmapData = []\nvar durationLenData = []\nvar rawData = []\nvar maxCount = 0;\nvar maxCarCount = 0;\nvar maxDuration = 0;\nvar minDuration;\nvar durationMap = {}\n\nfunction runMe() {\n    var objs = []\n    for (var i = 1; i < data.length; i += 2) {\n        objs.push({\n            start: data[i - 1],\n            end: data[i]\n        })\n    }\n    minCount = objs.length\n    \n\n    var start = _.min(data)\n    var end = _.max(data)\n    var dt = parseInt((end - start) / gridCount)\n    minDuration = end-start\n    console.log(start, end, dt)\n\n    for (var x = 0; x < gridCount+1; x++) {\n        var tx = start + x * dt\n        startTime.push(moment(tx*1000).format('YYYY/MM/DD HH:mm'))\n        for (var y = 0; y < gridCount+1; y++) {\n        \tvar ty = start + y * dt\n            if (x === 0) {\n                endTime.push(moment(ty*1000).format('YYYY/MM/DD HH:mm'))\n            }\n            if (y <= x) {\n                //heatmapData.push([x, y, '-'])\n            } else {\n                heatmapData.push([x, y, calc(objs, tx, ty)])\n                durationLenData.push([x, y, ty-tx])\n                var key = x+'-'+y\n                durationMap[key]=ty-tx\n                if(maxDuration<ty-tx) maxDuration = ty-tx\n                if(minDuration>ty-tx) minDuration = ty-tx\n            }\n        }\n    }\n\n    calcRaw(objs, start, dt)\n    console.log(maxDuration, minDuration)\n    //console.log(JSON.stringify(rawData))\n    //console.log(JSON.stringify(grids));\n}\n\n\nfunction calc(objs, ts, te) {\n    var coverCount = 0;\n    for (var i in objs) {\n        var traj = objs[i]\n        if (traj.start <= ts && te <= traj.end) {\n            coverCount++\n        }\n    }\n    if(coverCount>maxCount) maxCount=coverCount;\n    if(coverCount<minCount) minCount=coverCount;\n    return coverCount\n}\n\nvar pointMap = {}\n\nfunction calcRaw(objs, start, dt){\n\tvar m = {}\n\tfor(var j in objs){\n    \tvar o = objs[j]\n    \tvar x = parseInt((o.start-start)/dt)\n    \tvar y = parseInt((o.end - start)/dt)\n    \tvar key = x+'-'+y\n    \tif(!(key in m)){\n    \t\tm[key] = [o.end - o.start, 1]\n    \t}else{\n    \t\tif(o.end-o.start<m[key][0]){\n    \t\t\tm[key][0] = o.end-o.start\n    \t\t}\n    \t\tm[key][1] = m[key][1]+1\n    \t}\n    }\n    for(var i in m){\n    \tvar arr = i.split('-')\n    \tvar t = moment.duration(m[i][0], 'seconds')\n    \tpointMap[i] = {\n    \t    duration:t.days()+' days '+t.hours()+' hours',\n    \t    carCount:m[i][1]\n    \t}\n    \trawData.push([\n    \t\tparseInt(arr[0]),\n    \t\tparseInt(arr[1]),\n    \t\tt.days()+' days '+t.hours()+' hours'\n    \t])\n    \tif(m[i][1]>maxCarCount){\n    \t\tmaxCarCount = m[i][1]\n    \t}\n    }\n}\n\n\nrunMe();\n\n\noption = {\n    legend: {\n        right: 10,\n        data: ['Coverage', 'Duration length','Raw']\n    },\n    animation: false,\n    grid: {\n        height: '80%',\n        y: '10%',\n        x: '12%'\n    },\n    xAxis: {\n        type: 'category',\n        data: startTime,\n        splitArea: {\n            show: true\n        }\n    },\n    yAxis: {\n        type: 'category',\n        data: endTime,\n        splitArea: {\n            show: true\n        }\n    },\n    tooltip: {\n        position: 'right',\n        formatter: function (params) {\n            //console.log(params)\n            var key = params.value[0]+'-'+params.value[1]\n            if(params.seriesType=='heatmap'){\n                if(params.seriesName=='Coverage'){\n                    var du = moment.duration(durationMap[key]*1000)\n                    return params.value[2] + ' cars cover '+du.days()+' days '+du.hours()+' hours ('+startTime[params.value[0]]+' - '+endTime[params.value[1]]+')';\n                }else{\n                    var t = moment.duration(params.value[2]*1000)\n                    return t.days()+' days '+t.hours()+' hours';\n                }\n            }else{\n                var key = params.value[0]+'-'+params.value[1]\n                var p = pointMap[key]\n            \treturn p.duration + ' ('+p.carCount+' cars. timeline ('+startTime[params.value[0]]+' - '+endTime[params.value[1]]+')';\n            }\n        }\n    },\n    visualMap: [{\n        seriesIndex:0,\n        min: 0,\n        max: maxCount,\n        calculable: true,\n        orient: 'horizontal',\n        left: 'center',\n        bottom: '25%',\n        inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        }\n    },{\n        seriesIndex:1,\n        min: minDuration,\n        max: maxDuration,\n        calculable: true,\n        orient: 'horizontal',\n        left: 'center',\n        bottom: '10%',\n        inRange: {\n            opacity: [0,0.3],\n            color:['#000','#333']\n            // color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n        },\n        formatter: function (value) {\n            var t = moment.duration(value*1000)\n            return t.days()+' days '+t.hours()+' hours'; // 范围标签显示内容。\n        }\n    }],\n    series: [{\n        name: 'Coverage',\n        type: 'heatmap',\n        data: heatmapData,\n        label: {\n            normal: {\n                show: false\n            }\n        },\n        itemStyle: {\n            emphasis: {\n                shadowBlur: 10,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n        },\n        animation: false\n    },\n    {\n        name: 'Duration length',\n        type: 'heatmap',\n        data: durationLenData,\n        label: {\n            normal: {\n                show: false\n            }\n        },\n        itemStyle: {\n            normal:{\n                color:'#BCF'\n            }\n        }\n    },\n    {\n        name: 'Raw',\n        type: 'scatter',\n        data: rawData,\n        label: {\n            normal: {\n                show: false\n            }\n        },\n        itemStyle: {\n        \tnormal:{\n        \t\tcolor: 'rgb(0,180,20)'\n        \t},\n            emphasis: {\n                shadowBlur: 16,\n                shadowColor: 'rgba(0, 0, 200, 0.5)'\n            }\n        },\n        animation: false\n    }]\n}","html":"","externalScripts":"http://cdn.bootcss.com/underscore.js/1.8.3/underscore-min.js,https://cdn.staticfile.org/moment.js/2.18.1/moment.min.js","updaterUID":"bd-1023445549","theme":"","layout":"","viewCount":1662,"userName":"宋***和","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xByfhUns4W.png?v=1499346602370","isCustomThumbnail":0,"builtinTags":["category-work","grid","legend","series-heatmap","series-scatter","tooltip","visualMap"],"customTags":[],"updaterUserName":"宋***和"}}