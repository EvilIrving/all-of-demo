{"status":0,"data":{"cid":"xFW-MBuWQ5","authorUid":"obd-ol9ApUNzruRtm2D-0e5Fb-FETwsWF0O","authorUserName":"相***光","title":"最近12个月空气质量分布","description":"AQI预测 - 空气质量预报 - 最近12个月空气质量分布","latestVersion":1,"alwaysLatest":0,"createTime":"2021-10-28T08:05:34.000Z","lastUpdateTime":"2021-10-28T08:05:34.000Z","auth":2,"uid":"obd-ol9ApUNzruRtm2D-0e5Fb-FETwsWF0O","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"5.2.1","versionCreateTime":"2021-10-28T08:05:34.000Z","code":"const uploadedDataURL = '/asset/get/s/data-1635390802457-HRSoVX4EN.json';\n\n// AQI 等级\nconst AQI_LEVELS = [\n    {\n        icon: 'k1',\n        label: '优',\n        otherName: '一级',\n        value: 1,\n        min: 0,\n        max: 50,\n        proposal: '空气质量令人满意，基本无空气污染',\n        influence: '各类人群可正常活动',\n        color: '#00E500',\n        lightColor: '#D2F5A5',\n    },\n    {\n        icon: 'k2',\n        label: '良',\n        otherName: '二级',\n        value: 2,\n        min: 51,\n        max: 100,\n        proposal: '空气质量可接受，但某些污染物可能对极少数异常敏感人群健康有较弱影响',\n        influence: '极少数异常敏感人群应减少户外活动',\n        color: '#FFFF00',\n        lightColor: '#EBEBD8',\n    },\n    {\n        icon: 'k3',\n        label: '轻度',\n        otherName: '三级',\n        value: 3,\n        min: 101,\n        max: 150,\n        proposal: '易感人群症状有轻度加剧，健康人群出现刺激症状',\n        influence: '儿童、老年人及心脏病、呼吸系统疾病患者应减少长时间、高强度的户外锻炼',\n        color: '#FF7E00',\n        lightColor: '#F2E1C7',\n    },\n    {\n        icon: 'k4',\n        label: '中度',\n        otherName: '四级',\n        value: 4,\n        min: 151,\n        max: 200,\n        proposal: '进一步加剧易感人群症状，可能对健康人群心脏、呼吸系统有影响',\n        influence: '儿童、老年人及心脏病、呼吸系统疾病患者避免长时间、高强度的户外锻炼，一般人群适量减少户外运动',\n        color: '#FE0000',\n        lightColor: '#F3D3D3',\n    },\n    {\n        icon: 'k5',\n        label: '重度',\n        otherName: '五级',\n        value: 5,\n        min: 201,\n        max: 300,\n        proposal: '心脏病和肺病患者症状显著加剧，运动耐受力降低，健康人群普遍出现症状',\n        influence: '儿童、老年人及心脏病、肺病患者应停留在室内，停止户外运动，一般人群减少户外运动',\n        color: '#99004C',\n        lightColor: '#E5D2ED',\n    },\n    {\n        icon: 'k6',\n        label: '严重',\n        otherName: '六级',\n        value: 6,\n        min: 301,\n        max: '+',\n        proposal: '健康人群运动耐受力降低，有明显强烈症状，提前出现某些疾病',\n        influence: '儿童、老年人和病人应停留在室内，避免体力消耗，一般人群避免户外活动',\n        color: '#7E0022',\n        lightColor: '#F3CBD7',\n    },\n];\n\n// 首要污染物别名配置\nconst PRIMARY = {\n    NA: '无',\n};\n\n// 获取首要污染物Label\nconst getPrimaryLabel = (value) => {\n    if (!value) return '';\n    if (PRIMARY[value]) return PRIMARY[value];\n    return value;\n};\n\n/**\n * @description 将接口数据转化为符合 echarts 的数据\n * @param {object} sourceData 原数据\n * @param {boolean} diff 是否按AQI等级拆分数据\n * @returns echartsData 符合echarts配置数据\n */\nconst transformData = (sourceData = {}, isDiff = false) => {\n    let seriesData = [];\n    let seriesDatas = [];\n    for (const key in sourceData) {\n        const value = (sourceData[key] || {}).aqi || null;\n        seriesData.push([key, value]); // 笛卡尔坐标数据\n    }\n\n    // 按AQI等级区分数据\n    if (isDiff) {\n        seriesDatas = AQI_LEVELS.map(({ label, min, max, color }) => {\n            const data = seriesData.filter(([, value]) => {\n                if (max === '+') return value >= min;\n                return value >= min && value <= max;\n            });\n            return { name: label, data, color };\n        });\n        seriesDatas.push({\n            name: '空值',\n            color: '#efefef',\n            data: seriesData.filter((v) => v[1] === -1),\n        });\n    }\n\n    // 开始日期\n    const startDay = seriesData[0][0];\n    // 结束日期\n    const endDay = seriesData[seriesData.length - 1][0];\n\n    return { startDay, endDay, seriesData, seriesDatas };\n};\n\n// 获取悬浮提示元素\nconst getTooltipRow = (params, isHideEmpty = false) => {\n    if (isHideEmpty && !params.value) return '';\n    return `\n  <div style=\"display: flex; justify-content: space-between; min-width: 80px; padding-top: 3px;\">\n    <span>${params.marker || ''} ${params.seriesName}</span>\n    <span style=\"padding-left: 10px; font-weight: bold;\">${\n        params.value === -1 || !params.value ? '-' : params.value\n    }</span>\n  </div>`;\n};\n\n// 补全日期\nconst getVirtulData = (data = {}, format) => {\n    const today = new Date();\n    const dayTime = 3600 * 24 * 1000;\n    const thatday = today - dayTime * 365;\n    const result = JSON.parse(JSON.stringify(data));\n    for (let time = thatday; time < today; time += dayTime) {\n        const key = format(new Date(time), 'Y-m-d');\n        if (!result[key])\n            result[key] = {\n                aqi: -1,\n                aqidate: key,\n                data_type: 'history',\n                primary: '',\n            };\n    }\n    return result;\n};\n\nconst formatDate = (dateObj = null, fmt = 'Y-m-d', empty = '-') => {\n    const days = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n    const months = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];\n\n    const lz = (n) => {\n        const num = n.toString();\n        if (num.length === 1) {\n            return `0${num}`;\n        }\n        return num;\n    };\n\n    let t = dateObj;\n    // typeof dateObj !== 'string'是为了判断万一传过来的是y-m-d h:i:s格式，会直接执行最后一个else if，格式化为日期格式\n    if (dateObj === null || (Number.isNaN(dateObj) && typeof dateObj !== 'string')) {\n        if (typeof empty === 'string') {\n            return empty;\n        }\n        t = new Date();\n    } else if (typeof dateObj === 'number') {\n        if (dateObj === 0) {\n            return empty;\n        }\n        t = new Date(dateObj * 1000);\n    } else if (typeof dateObj === 'string') {\n        if (parseInt(dateObj) == dateObj) {\n            // eslint-disable-line\n            t = new Date(dateObj * 1000);\n        } else {\n            if (dateObj.includes('T')) {\n                t = new Date(dateObj);\n            } else {\n                t = new Date(dateObj.replace(/-/g, '/'));\n            }\n        }\n    }\n    if (!(t instanceof Date)) {\n        throw new Error('被处理的只能是Date对象');\n    }\n    if (Number.isNaN(t.getTime())) {\n        if (typeof dateObj === 'string') {\n            return dateObj;\n        }\n        throw new Error('非法日期对象');\n    }\n\n    const date = t.getDate();\n    const year = t.getFullYear();\n    const hours = t.getHours();\n    const day = t.getDay();\n    const dayName = days[day];\n    const min = t.getMinutes();\n    const sec = t.getSeconds();\n    const month = t.getMonth();\n    const am = hours < 12 ? 'am' : 'pm';\n    const ms = t.getTime() % 1000;\n    let hours12 = hours % 12;\n    hours12 = hours12 || 12;\n\n    const fd = new Date(t.getFullYear(), 0, 1);\n    const dayOfYear = Math.round((t - fd) / 8.64e7);\n    const weekNum = Math.ceil(((t - fd) / 8.64e7 + fd.getDay() - 1) / 7);\n\n    const a = {\n        d: lz(date),\n        D: dayName.substr(0, 3),\n        l: dayName,\n        w: day,\n        j: date,\n        z: dayOfYear,\n        W: weekNum,\n        M: months[month].substr(0, 3),\n        F: months[month],\n        Y: year,\n        a: am,\n        A: am.toUpperCase(),\n        y: `${year}`.substr(2, 2),\n        c: t.toISOString(),\n        m: lz(month + 1),\n        U: Math.round(t / 1000),\n        g: hours12,\n        G: lz(hours12),\n        h: hours,\n        H: lz(hours),\n        i: lz(min),\n        s: lz(sec),\n        e: ms,\n    };\n\n    const v = [];\n    Object.keys(a).forEach((k) => {\n        v.push(`(\\\\\\\\)?${k}`);\n    });\n\n    return fmt.replace(new RegExp(v.join('|'), 'g'), (k) => {\n        if (a[k]) {\n            return a[k];\n        }\n        return k.replace('\\\\', '');\n    });\n};\n\n$.getJSON(uploadedDataURL, (apiData) => {\n    const data = getVirtulData(apiData.history, formatDate);\n    const titleText = '最近12个月空气质量分布';\n    const visualMapPieces = AQI_LEVELS.map(({ min, max, color }) => ({ min, max, color }));\n    const { seriesDatas } = transformData(data, true);\n    const getPrimary = (key) => getPrimaryLabel((data[key] || {}).primary) || '';\n    const myOption = {\n        title: {\n            text: titleText,\n            left: 'center',\n        },\n        tooltip: {\n            position: 'top',\n            formatter: (params) => {\n                const primary = getPrimary(params.value[0]);\n                return `${params.value[0]}<br />${getTooltipRow({ ...params, value: params.value[1] })}${getTooltipRow({\n                    seriesName: '首要污染物',\n                    value: primary,\n                })}`;\n            },\n        },\n        legend: {\n            show: true,\n            icon: 'circle',\n            bottom: 0,\n        },\n        calendar: {\n            // range: [startDay, endDay],\n            range: new Date().getFullYear(),\n            top: 60,\n            left: 60,\n            right: 15,\n            bottom: 40,\n            height: 150,\n            cellSize: [14, 14],\n            itemStyle: {\n                borderWidth: 4,\n                borderColor: '#fff',\n            },\n            yearLabel: {\n                show: false,\n            },\n            splitLine: {\n                show: false,\n            },\n            monthLabel: {\n                nameMap: 'cn',\n            },\n            dayLabel: {\n                nameMap: ['日', '一', '二', '三', '四', '五', '六'],\n                firstDay: 1,\n                left: 10,\n            },\n        },\n        visualMap: {\n            show: false,\n            type: 'piecewise',\n            pieces: [{ max: 0, min: -10, color: '#efefef', name: '空值' }, ...visualMapPieces],\n        },\n        series: seriesDatas.map(({ name, data, color }) => ({\n            type: 'heatmap',\n            coordinateSystem: 'calendar',\n            name,\n            data,\n            color,\n            label: {\n                show: true,\n                fontSize: 10,\n                formatter: (params) => getPrimary(params.value[0]),\n            },\n        })),\n    };\n    myChart.setOption(myOption);\n});\n","html":"","externalScripts":"","updaterUID":"obd-ol9ApUNzruRtm2D-0e5Fb-FETwsWF0O","theme":"","layout":"","viewCount":0,"userName":"相***光","commentCount":0,"starCount":2,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xFW-MBuWQ5.png?v=1635408334815","isCustomThumbnail":1,"builtinTags":["calendar","category-work","legend","series-heatmap","title","tooltip","visualMap"],"customTags":[],"updaterUserName":"相***光"}}