{"status":0,"data":{"cid":"xxlz1UR9A3","authorUid":"bd-2304026310","authorUserName":"x***e","title":"流程图","description":"自动生成流程图，并带特效","latestVersion":1,"alwaysLatest":1,"createTime":"2020-06-20T05:41:37.000Z","lastUpdateTime":"2020-06-20T05:41:37.000Z","auth":2,"uid":"bd-2304026310","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"4.8.0","versionCreateTime":"2020-06-20T05:41:37.000Z","code":"var points = [{\r\n            name: \"故障初判\",\r\n            //x,y坐标\r\n            value: [0, 300],\r\n            target: ['离线实验', '装置检修'],\r\n            // offset: true,\r\n        }, {\r\n            name: \"离线实验\",\r\n            value: [300, 300],\r\n            target: ['告警确认', '在线数据审核']\r\n        }, {\r\n            name: \"告警确认\",\r\n            value: [300, 500],\r\n            target: ['离线实验'],\r\n            offset: true\r\n        }, {\r\n            name: \"装置检修\",\r\n            value: [300, 100],\r\n            offset: true,\r\n            target: ['在线数据审核'],\r\n            selected: true\r\n        }, {\r\n            name: \"在线数据审核\",\r\n            value: [600, 300],\r\n            target: ['关闭']\r\n        }, {\r\n            name: \"关闭\",\r\n            value: [900, 300]\r\n        }];\r\n        /*\r\n           获取target在source中的坐标\r\n           */\r\n        var getPointCoordinate = function (source, targetName) {\r\n            var targetItem = source.filter(item => {\r\n                return item.name == targetName;\r\n            });\r\n            console.log('targetItem,', targetItem);\r\n            return targetItem[0].value;\r\n        }\r\n\r\n        /*\r\n        获取路径要添加的点\r\n        */\r\n        var getRoutePoint = function (startCoordinate, endPointName) {\r\n            var endPoint = getPointCoordinate(points, endPointName);\r\n            var gap = 100;\r\n            var rs = [];\r\n            let startPointX = startCoordinate[0];\r\n            let startPointY = startCoordinate[1];\r\n            let endPointX = endPoint[0];\r\n            let endPointY = endPoint[1];\r\n            //横坐标相同\r\n            if (startPointX == endPointX) {\r\n                var point1 = {\r\n                    name: 'offset1' + endPointName,\r\n                    value: [startPointX + gap, startPointY],\r\n                    symbol: 'none',\r\n                    target: ['offset2' + endPointName]\r\n                };\r\n                var point2 = {\r\n                    name: 'offset2' + endPointName,\r\n                    value: [startPointX + gap, endPointY],\r\n                    symbol: 'none',\r\n                    target: [endPointName]\r\n                };\r\n                rs.push(point1);\r\n                rs.push(point2);\r\n            } else if (startPointY == endPointY) {\r\n                var point1 = {\r\n                    name: 'offset1' + endPointName,\r\n                    value: [startPointX, startPointY - gap],\r\n                    symbol: 'none',\r\n                    target: ['offset2' + endPointName]\r\n                };\r\n                var point2 = {\r\n                    name: 'offset2' + endPointName,\r\n                    value: [endPointX, startPointY - gap],\r\n                    symbol: 'none',\r\n                    target: [endPointName]\r\n                };\r\n                rs.push(point1);\r\n                rs.push(point2);\r\n            } else {\r\n                rs.push({\r\n                    name: 'offset1' + endPointName,\r\n                    value: [endPointX, startPointY],\r\n                    symbol: 'none',\r\n                    target: [endPointName]\r\n                });\r\n            }\r\n            return rs;\r\n        }\r\n\r\n        var handlePoints = function (points) {\r\n\r\n            for (var i = 0; i < points.length; i++) {\r\n                var item = points[i];\r\n                //当前点坐标\r\n                var currentCoordinate = item.value;\r\n                //是否存在目标点连线\r\n                if (item.target) {\r\n                    var targetItem = item.target;\r\n                    for (var j = 0; j < targetItem.length; j++) {\r\n                        var selected = item.selected;\r\n                        //是否需要偏移偏移需要虚拟点\r\n                        if (item.offset) {\r\n                            var routes = getRoutePoint(currentCoordinate, targetItem[j]);\r\n                            var newTarget = [routes[0].name]\r\n                            item.target = newTarget;\r\n                            for (const key in routes) {\r\n                                var element = routes[key];\r\n                                element.selected = selected;\r\n                                points.push(element)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return points;\r\n        }\r\n\r\n        var newPoints = handlePoints(points);\r\n\r\n        console.log('newPoints', newPoints)\r\n\r\n        var linesData = function (points) {\r\n\r\n            return [{\r\n                coords: [\r\n                    [300, 100],\r\n                    [600, 100]\r\n                ],                \r\n            },{\r\n                coords: [\r\n                    [600, 100],\r\n                    [600, 300]\r\n                ]\r\n            }]\r\n        }\r\n\r\n        var seriesData = function (data) {\r\n            return data.map(item => ({\r\n                name: item.name,\r\n                symbol: item.symbol && item.symbol === 'none' ? 'none' : 'rect',\r\n                symbolSize: item.name.indexOf('offset') != -1 ? 0 : [80, 40], //图标大小                 \r\n                draggable: false,\r\n                fixed: true,\r\n                value: item.value,\r\n                edgeSymbol: ['circle', 'arrow'],\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: new echarts.graphic.LinearGradient(0, 0, 1, 0, [{\r\n                                offset: 0,\r\n                                color: \"#157eff\"\r\n                            },\r\n                            {\r\n                                offset: 1,\r\n                                color: \"#35c2ff\"\r\n                            }\r\n                        ])\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n        console.log('seriesData', seriesData(newPoints))\r\n\r\n\r\n\r\n        var links = function (data) {\r\n            console.log('links data', data)\r\n            var res = [];\r\n            for (var i = 0; i < data.length; i++) {\r\n                var item = data[i];\r\n                var currentCoordinate = item.value;\r\n                console.debug('currentCoordinate', currentCoordinate)\r\n                if (item.target) {\r\n                    console.debug('item.target', item.target)\r\n                    for (var j = 0; j < item.target.length; j++) {\r\n                        res.push({\r\n                            source: item.name,\r\n                            target: item.target[j],\r\n                            lineStyle: {\r\n                                normal: {\r\n                                    color: \"#12b5d0\",\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n            }\r\n            console.log('links', res)\r\n\r\n            return res;\r\n        }\r\n\r\n\r\n        // 指定图表的配置项和数据\r\n        option = ({\r\n\r\n            backgroundColor: \"#fff\",\r\n            roam: true,\r\n            xAxis: {\r\n                show: false,\r\n                type: \"value\"\r\n            },\r\n            yAxis: {\r\n                show: false,\r\n                type: \"value\"\r\n            },\r\n            tooltip: {},\r\n            series: [{\r\n                    type: \"graph\",\r\n                    // zlevel: 5,\r\n\r\n                    draggable: false,\r\n                    coordinateSystem: \"cartesian2d\", //使用二维的直角坐标系（也称笛卡尔坐标系）\r\n\r\n                    // edgeSymbolSize: [0, 8], //边两端的标记大小，可以是一个数组分别指定两端，也可以是单个统一指定\r\n                    // edgeLabel: {\r\n                    //   normal: {\r\n                    //     textStyle: {\r\n                    //       fontSize: 60\r\n                    //     }\r\n                    //   }\r\n                    // },\r\n                    edgeSymbol: ['circle', 'arrow'],\r\n                    edgeSymbolSize: [2, 6],\r\n\r\n                    //关系图节点标记的图形\r\n                    symbol: \"rect\",\r\n                    symbolOffset: ['15%', 0],\r\n                    label: {\r\n                        normal: {\r\n                            show: true\r\n                        }\r\n                    },\r\n                    lineStyle: {\r\n                        normal: {\r\n                            opacity: 1,\r\n                            // color: \"#cccccc\",\r\n                            curveness: 0,\r\n                            // 12b5d0\r\n                            type: \"dashed\",\r\n                            width: 1\r\n                        }\r\n                    },\r\n                    data: seriesData(newPoints),\r\n                    links: links(newPoints)\r\n\r\n                },\r\n                {\r\n                    type: \"lines\",\r\n                    coordinateSystem: \"cartesian2d\",\r\n                    z: 1,\r\n                    zlevel: 2,\r\n                    animation: false,\r\n                    effect: {\r\n                        show: true,\r\n                        period: 5,\r\n                        trailLength: 0.01,\r\n                        symbolSize: 6,\r\n                        symbol: \"arrow\",\r\n                        loop: true,\r\n                        color: \"rgba(55,155,255,0.5)\"\r\n                    },\r\n                    lineStyle: {\r\n                        curveness: 0,\r\n                        color: '#0ca361',\r\n                        opacity: 0.6,\r\n                        width: 1,\r\n                        type: \"dashed\"\r\n                    },\r\n                    data: linesData()\r\n                }\r\n\r\n            ]\r\n        });","html":"","externalScripts":"","updaterUID":"bd-2304026310","theme":"","layout":"","viewCount":5347,"userName":"x***e","commentCount":0,"starCount":28,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xxlz1UR9A3.png?v=1592631697473","isCustomThumbnail":0,"builtinTags":["category-work","grid","series-graph","series-lines","tooltip"],"customTags":[],"updaterUserName":"x***e"}}