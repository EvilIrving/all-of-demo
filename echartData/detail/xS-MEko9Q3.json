{"status":0,"data":{"cid":"xS-MEko9Q3","authorUid":"bd-943272051","authorUserName":"啊很古","title":"地球坐标旋转转换","description":"","latestVersion":1,"alwaysLatest":1,"createTime":"2019-05-17T07:28:38.000Z","lastUpdateTime":"2019-05-17T07:28:38.000Z","auth":2,"uid":"bd-943272051","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"4.2.1","versionCreateTime":"2019-05-17T07:28:38.000Z","code":"// function randomData() {\r\n//     return Math.round(Math.random() * 300);\r\n// }\r\n\r\n// var geoCoordMap = {\r\n//     上海: [121.4648, 31.2891],\r\n//     尼日利亚: [-4.388361, 11.186148],\r\n//     美国洛杉矶: [-118.24311, 34.052713],\r\n//     香港邦泰: [114.195466, 22.282751],\r\n//     美国芝加哥: [-87.801833, 41.870975],\r\n//     加纳库马西: [-4.62829, 7.72415],\r\n//     英国曼彻斯特: [-1.657222, 51.886863],\r\n//     德国汉堡: [10.01959, 54.38474],\r\n//     哈萨克斯坦阿拉木图: [45.326912, 41.101891],\r\n//     俄罗斯伊尔库茨克: [89.116876, 67.757906],\r\n//     巴西: [-48.678945, -10.493623],\r\n//     埃及达米埃塔: [31.815593, 31.418032],\r\n//     西班牙巴塞罗纳: [2.175129, 41.385064],\r\n//     柬埔寨金边: [104.88659, 11.545469],\r\n//     意大利米兰: [9.189948, 45.46623],\r\n//     乌拉圭蒙得维的亚: [-56.162231, -34.901113],\r\n//     莫桑比克马普托: [32.608571, -25.893473],\r\n//     阿尔及利亚阿尔及尔: [3.054275, 36.753027],\r\n//     阿联酋迪拜: [55.269441, 25.204514],\r\n//     匈牙利布达佩斯: [17.108519, 48.179162],\r\n//     澳大利亚悉尼: [150.993137, -33.675509],\r\n//     美国加州: [-121.910642, 41.38028],\r\n//     澳大利亚墨尔本: [144.999416, -37.781726],\r\n//     墨西哥: [-99.094092, 19.365711],\r\n//     加拿大温哥华: [-123.023921, 49.311753]\r\n// };\r\n// var BJData = [\r\n//     [{\r\n//         name: \"尼日利亚\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\",\r\n//     }],\r\n//     [{\r\n//         name: \"美国洛杉矶\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"香港邦泰\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"美国芝加哥\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"加纳库马西\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"英国曼彻斯特\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"德国汉堡\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"哈萨克斯坦阿拉木图\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"俄罗斯伊尔库茨克\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"巴西\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"埃及达米埃塔\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"西班牙巴塞罗纳\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"柬埔寨金边\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"意大利米兰\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"乌拉圭蒙得维的亚\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"莫桑比克马普托\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"阿尔及利亚阿尔及尔\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"阿联酋迪拜\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"匈牙利布达佩斯\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"澳大利亚悉尼\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"美国加州\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"澳大利亚墨尔本\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"墨西哥\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }],\r\n//     [{\r\n//         name: \"加拿大温哥华\",\r\n//         value: randomData()\r\n//     }, {\r\n//         name: \"上海\"\r\n//     }]\r\n// ];\r\n// var convertData = function(data) {\r\n//     var res = [];\r\n//     for (var i = 0; i < data.length; i++) {\r\n//         var dataItem = data[i];\r\n//         var fromCoord = geoCoordMap[dataItem[0].name];\r\n//         var toCoord = geoCoordMap[dataItem[1].name];\r\n//         if (fromCoord && toCoord) {\r\n//             res.push([{\r\n//                     coord: fromCoord,\r\n//                     value: dataItem[0].value\r\n//                 },\r\n//                 {\r\n//                     coord: toCoord\r\n//                 }\r\n//             ]);\r\n//         }\r\n//     }\r\n//     return res;\r\n// };\r\n// var convertData2 = function(data) {\r\n//     var res = [];\r\n//     for (var i = 0; i < data.length; i++) {\r\n//         var dataItem = data[i];\r\n//         var fromCoord = geoCoordMap[dataItem[1].name];\r\n//         var toCoord = geoCoordMap[dataItem[0].name];\r\n//         if (fromCoord && toCoord) {\r\n//             res.push([{\r\n//                     coord: fromCoord,\r\n//                     value: dataItem[0].value\r\n//                 },\r\n//                 {\r\n//                     coord: toCoord\r\n//                 }\r\n//             ]);\r\n//         }\r\n//     }\r\n//     return res;\r\n// };\r\n\r\nvar series = [];\r\n// [\r\n//     [\"上海\", BJData]\r\n// ].forEach(function(item, i) {\r\n//     series.push(\r\n//         // {\r\n//         //     type: \"lines\",\r\n//         //     zlevel: 2,\r\n//         //     effect: {\r\n//         //         show: true,\r\n//         //         // color: \"#0bc7f3\",\r\n//         //         period: 4, //箭头指向速度，值越小速度越快\r\n//         //         trailLength: 0.02, //特效尾迹长度[0,1]值越大，尾迹越长重\r\n//         //         symbol: \"arrow\", //箭头图标\r\n//         //         symbolSize: 5 //图标大小\r\n//         //     },\r\n//         //     lineStyle: {\r\n//         //         normal: {\r\n//         //             width: 1, //尾迹线条宽度\r\n//         //             opacity: 0, //尾迹线条透明度\r\n//         //             curveness: 0.3 //尾迹线条曲直度\r\n//         //         }\r\n//         //     },\r\n//         //     data: convertData(item[1])\r\n//         // }, {\r\n//         //     type: \"lines\",\r\n//         //     zlevel: 2,\r\n//         //     effect: {\r\n//         //         show: true,\r\n//         //         color: '#FF0000',\r\n//         //         period: 4, //箭头指向速度，值越小速度越快\r\n//         //         trailLength: 0.02, //特效尾迹长度[0,1]值越大，尾迹越长重\r\n//         //         symbol: \"arrow\", //箭头图标\r\n//         //         symbolSize: 5 //图标大小\r\n//         //     },\r\n//         //     lineStyle: {\r\n//         //         normal: {\r\n//         //             width: 1, //尾迹线条宽度\r\n//         //             opacity: 0, //尾迹线条透明度\r\n//         //             curveness: -0.3 //尾迹线条曲直度\r\n//         //         }\r\n//         //     },\r\n//         //     data: convertData2(item[1])\r\n//         // },\r\n        \r\n//         // {\r\n//         //     type: \"effectScatter\",\r\n//         //     coordinateSystem: \"geo\",\r\n//         //     zlevel: 2,\r\n//         //     rippleEffect: {\r\n//         //         //涟漪特效\r\n//         //         period: 4, //动画时间，值越小速度越快\r\n//         //         brushType: \"stroke\", //波纹绘制方式 stroke, fill\r\n//         //         scale: 4 //波纹圆环最大限制，值越大波纹越大\r\n//         //     },\r\n//         //     label: {\r\n//         //         normal: {\r\n//         //             show: true,\r\n//         //             position: \"right\", //显示位置\r\n//         //             offset: [5, 0], //偏移设置\r\n//         //             formatter: \"{b}\" //圆环显示文字\r\n//         //         },\r\n//         //         emphasis: {\r\n//         //             show: true,\r\n//         //             color: \"#FF6A6A\"\r\n//         //         }\r\n//         //     },\r\n//         //     symbol: \"circle\",\r\n//         //     symbolSize: function(val) {\r\n//         //         return 8 + val[2] / 1000; //圆环大小\r\n//         //     },\r\n//         //     itemStyle: {\r\n//         //         normal: {\r\n//         //             show: true,\r\n//         //         },\r\n//         //         emphasis: {\r\n//         //             show: true,\r\n//         //             color: \"#FF6A6A\"\r\n//         //         }\r\n//         //     },\r\n//         //     data: item[1].map(function(dataItem) {\r\n//         //         return {\r\n//         //             name: dataItem[0].name,\r\n//         //             value: geoCoordMap[dataItem[0].name].concat([dataItem[0].value])\r\n//         //         };\r\n//         //     })\r\n//         // },\r\n        \r\n//         //被攻击点\r\n//         // {\r\n//         //     type: \"scatter\",\r\n//         //     coordinateSystem: \"geo\",\r\n//         //     zlevel: 2,\r\n//         //     rippleEffect: {\r\n//         //         period: 4,\r\n//         //         brushType: \"stroke\",\r\n//         //         scale: 4\r\n//         //     },\r\n//         //     label: {\r\n//         //         normal: {\r\n//         //             show: true,\r\n//         //             color: \"red\",\r\n//         //             position: \"right\",\r\n//         //             formatter: \"{b}\",\r\n//         //         },\r\n//         //         emphasis: {\r\n//         //             show: true,\r\n//         //             color: \"#FF6A6A\"\r\n//         //         }\r\n//         //     },\r\n//         //     symbol: \"pin\",\r\n//         //     symbolSize: 30,\r\n//         //     itemStyle: {\r\n//         //         normal: {\r\n//         //             show: true,\r\n//         //             color: \"red\",\r\n//         //         },\r\n//         //         emphasis: {\r\n//         //             show: true,\r\n//         //             color: \"#FF6A6A\"\r\n//         //         }\r\n//         //     },\r\n//         //     data: [{\r\n//         //         name: item[0],\r\n//         //         value: geoCoordMap[item[0]].concat([100]),\r\n//         //         visualMap: false\r\n//         //     }]\r\n//         // }\r\n//     );\r\n// });\r\n\r\n\r\nvar worldMap = echarts.getMap('world');\r\n\r\noption = {\r\n    backgroundColor: 'green', ///rgb(3, 9, 27)\r\n    tooltip: {\r\n        trigger: \"item\",\r\n        backgroundColor: \"#1540a1\",\r\n        borderColor: \"#FFFFCC\",\r\n        showDelay: 0,\r\n        hideDelay: 0,\r\n        enterable: true,\r\n        transitionDuration: 0,\r\n        extraCssText: \"z-index:100\",\r\n        formatter: function(params, ticket, callback) {\r\n            //根据业务自己拓展要显示的内容\r\n            var res = \"\";\r\n            var name = params.name;\r\n            var value = params.value[params.seriesIndex + 1];\r\n            res =\r\n                \"<span style='color:#fff;'>\" +\r\n                name +\r\n                \"</span><br/>数据：\" +\r\n                value;\r\n            return res;\r\n        }\r\n    },\r\n    // visualMap: {\r\n    //     //图例值控制\r\n    //     show: false,\r\n    //     type: 'piecewise',\r\n    //     pieces: [{\r\n    //             max: 80,\r\n    //             color: 'red'\r\n    //         },\r\n    //         {\r\n    //             min: 80,\r\n    //             max: 120,\r\n    //             color: 'yellow'\r\n    //         },\r\n    //         {\r\n    //             min: 120,\r\n    //             color: 'green'\r\n    //         }\r\n    //     ],\r\n    //     calculable: true,\r\n    // },\r\n    \r\n    // geo: {\r\n    //     map: \"nWorld\",\r\n    //     show: true,\r\n    //     // label: {\r\n    //     //     show: true,\r\n    //     //     offset:[30,40],\r\n    //     //     // formatter: '{b}',\r\n    //     //     color: '#41768f',\r\n    //     //     fontSize: 5,\r\n    //     //     emphasis: {\r\n    //     //         show: false\r\n    //     //     }\r\n    //     // },\r\n    //     // boundingCoords: [\r\n    //     //     // 定位左上角经纬度\r\n    //     //     [-100, 90],\r\n    //     //     // 定位右下角经纬度\r\n    //     //     [100, -90]\r\n    //     // ],\r\n    //     zoom:1,\r\n    //     roam: false, //是否允许缩放\r\n    //     // layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n    //     // center: [0, 0],\r\n    //     // center: ['50%', '50%'],\r\n    //     // layoutSize: \"100%\",\r\n    //     left: 0, top: 20, right: 0, bottom: 20,\r\n    //     itemStyle: {\r\n    //         normal: {\r\n    //             show: 'true',\r\n    //             borderWidth: 1,\r\n    //             // color: \"rgb(6, 31, 48)\", //地图背景色\r\n    //             areaColor: '#eee', //rgb(6, 31, 48)\r\n    //             borderColor: \"#1EFFEC\", //省市边界线\r\n    //             // shadowColor: 'rgba(58, 157, 242, .8)',\r\n    //             // shadowBlur: 12,\r\n    //         },\r\n    //         emphasis: {\r\n    //             show: 'true',\r\n    //             color: \"rgba(37, 43, 61, .5)\" //悬浮背景\r\n    //         }\r\n    //     },\r\n    //     zlevel: 1\r\n    //     // regions: [{\r\n    //     //     name: '中国',\r\n    //     //     itemStyle: {\r\n    //     //         //'#5ab1d8'\r\n    //     //         areaColor: {\r\n    //     //             type: 'linear',\r\n    //     //             x: 0,\r\n    //     //             y: 0,\r\n    //     //             x2: 0,\r\n    //     //             y2: 1,\r\n    //     //             colorStops: [{\r\n    //     //                 offset: 0, color: '#36698b' // 0% 处的颜色\r\n    //     //             }, {\r\n    //     //                 offset: 1, color: '#60bfe8' // 100% 处的颜色\r\n    //     //             }],\r\n    //     //             global: false // 缺省为 false\r\n    //     //         },\r\n    //     //         color: '#5ab1d8'\r\n    //     //     }\r\n    //     // }],\r\n    //     // nameMap:{\r\n    //     //     'China' : '中国'\r\n    //     // }\r\n    // },\r\n\r\n    series: [\r\n      {\r\n            name: 'xxx2',\r\n            type: 'map',\r\n            map: 'nWorld',\r\n            roam: false,\r\n             left: 0, top: 20, right: 0, bottom: 20,\r\n            // layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            // layoutSize: \"120%\",\r\n            label: {\r\n                normal: {\r\n                    show: false\r\n                },\r\n                emphasis: {\r\n                    show: false\r\n                }\r\n            },\r\n             itemStyle: {\r\n                areaColor: '#eee', //rgb(6, 31, 48)\r\n                show: 'true',\r\n                borderColor: 'red',\r\n                borderWidth: 1,\r\n                // blend: 'xor',\r\n                // shadowColor: 'rgba(58, 157, 242, .8)',\r\n                // shadowBlur: 12,\r\n                emphasis: {\r\n                    show: 'true',\r\n                    color: \"rgba(37, 43, 61, .5)\" //悬浮背景\r\n                }\r\n            },\r\n        },\r\n        {\r\n            name: 'xxx3',\r\n            type: 'map',\r\n            map: 'nWorld',\r\n            roam: false,\r\n             left: 0, top: 20, right: 0, bottom: 20,\r\n            // layoutCenter: [\"50%\", \"50%\"], //地图位置\r\n            // layoutSize: \"120%\",\r\n            label: {\r\n                normal: {\r\n                    show: false\r\n                },\r\n                emphasis: {\r\n                    show: false\r\n                }\r\n            },\r\n             itemStyle: {\r\n                areaColor: '#000', //rgb(6, 31, 48)\r\n                show: 'true',\r\n                borderColor: 'green',\r\n                borderWidth: 1,\r\n                // shadowColor: 'rgba(58, 157, 242, .8)',\r\n                // shadowBlur: 12,\r\n                emphasis: {\r\n                    show: 'true',\r\n                    color: \"rgba(37, 43, 61, .5)\" //悬浮背景\r\n                }\r\n            },\r\n            // z: 2,\r\n            blendMode: 'xor',\r\n        },\r\n//         {\r\n// \t\t\ttype: 'custom',\r\n// \t\t\tgeoIndex: 0,\r\n// \t\t\tcoordinateSystem: 'geo',\r\n// \t\t\trenderItem: renderItem,\r\n// \t\t\titemStyle: {\r\n// \t\t\t\tnormal: {\r\n// \t\t\t\t\topacity: .5\r\n// \t\t\t\t}\r\n// \t\t\t},\r\n// \t\t\tanimation: false,\r\n// \t\t\tsilent: true,\r\n// \t\t\tdata: [0],\r\n// \t\t\tz: 20\r\n// \t\t}\r\n        \r\n    ],\r\n};\r\n\r\n// option.blendMode = 'xor',\r\n\r\n\r\n\r\n\r\nfunction renderItem(params, api) {\r\n    var roundedsPoints = [];\r\n    // var coords = [9][0];\r\n    \r\n    function render( callBack ) {\r\n        // console.log( worldMapCopy.geoJson.features[41].geometry.coordinates[9][0] );\r\n        /* callBack( worldMapCopy.geoJson.features[41].geometry.coordinates[9][0] ); */\r\n        \r\n//         for(let i=0; i<worldMapCopy.geoJson.features.length; i++) {\r\n// \t\t\t/* setTimeout( () => { */\r\n// \t\t\t\tfor(let j=0; j< worldMapCopy.geoJson.features[i].geometry.coordinates.length; j++ ) {\r\n// \t\t\t\t\t/* setTimeout( () => { */\r\n// \t\t\t\t\t\tvar coordinates = worldMapCopy.geoJson.features[i].geometry.coordinates;\r\n// \t\t\t\t\t\tvar minCoordsOrNot = coordinates[j];\r\n\t\t\t\t\t\t\r\n// \t\t\t\t\t\tif( typeof minCoordsOrNot[0] == 'number') {\r\n\t\t\t\t\t\t\t\r\n// \t\t\t\t\t\t\t// roundedsPoints.push( coordinates );\r\n// \t\t\t\t\t\t\tcallBack( coordinates );\r\n// \t\t\t\t\t\t}else {\r\n// \t\t\t\t\t\t\tfor(let k=0; k< worldMapCopy.geoJson.features[i].geometry.coordinates[j].length; k++ ){\r\n// \t\t\t\t\t\t\t\t/* setTimeout( () => { */\r\n// \t\t\t\t\t\t\t\t\tvar coordinates = worldMapCopy.geoJson.features[i].geometry.coordinates[j];\r\n// \t\t\t\t\t\t\t\t\t// var minCoords = coordinates[k];\r\n// \t\t\t\t\t\t\t\t\t// roundedsPoints.push( coordinates[k] );\r\n// \t\t\t\t\t\t\t\t\tcallBack( coordinates[k] );\r\n// \t\t\t\t\t\t\t\t/* }, 0); */\r\n// \t\t\t\t\t\t\t}\r\n// \t\t\t\t\t\t}\r\n// \t\t\t\t\t/* },0); */\r\n// \t\t\t\t}\r\n// \t\t\t/* },0); */\r\n        \r\n//         }\r\n    }\r\n   \r\n    \r\n    \r\n    // for (var i = 0; i < coords.length; i++) {\r\n    //     points.push(api.coord(coords[i]));\r\n    // }\r\n\r\n    // var color = api.visual('color');\r\n\r\n\r\n// ctx.shadowColor='red';\r\n// ctx.shadowBlur=12;\r\n\r\n// // stroke the shadowed rounded rectangle\r\n// ctx.stroke();\r\n// ctx.stroke();\r\n// ctx.stroke();\r\n\r\n// // set compositing to erase everything outside the stroke\r\n// ctx.globalCompositeOperation='destination-in';\r\n// ctx.fill();\r\n\r\n\r\n    /* setTimeout( () => {  */\r\n        \r\n        /* var ctxMain = api.getZr().painter.getLayers()[0].ctx; */\r\n        const canvasSum = document.createElement('canvas');\r\n\t\tcanvasSum.width = myChart.getWidth();\r\n\t\tcanvasSum.height = myChart.getHeight();\r\n\t\tcanvasSum.style.width = `${myChart.getWidth() / devicePixelRatio}px`;\r\n\t\tcanvasSum.style.height = `${myChart.getHeight() / devicePixelRatio}px`;\r\n\t\tvar ctxSum = canvasSum.getContext('2d');\r\n\r\n\t\t\r\n\t\t\r\n\t\tvar buildInsetShadow = ( points ) => {\r\n\t\t    \r\n\t\t\tvar canvas = document.createElement('canvas');\r\n\t\t\t\r\n    \t\tcanvas.width = myChart.getWidth();\r\n    \t\tcanvas.height = myChart.getHeight();\r\n    \t\tcanvas.style.width = `${myChart.getWidth() / devicePixelRatio}px`;\r\n    \t\tcanvas.style.height = `${myChart.getHeight() / devicePixelRatio}px`;\r\n    \t\tvar ctx = canvas.getContext('2d');\r\n    \t\tdocument.body.appendChild(canvas);\r\n    \t\t\r\n\t\t\t\r\n            drawShape(ctx, points);\r\n            ctx.fill();\r\n            ctx.globalCompositeOperation = 'xor';\r\n            ctx.fill();\r\n            ctx.shadowColor='red';\r\n            ctx.shadowBlur=12;\r\n            ctx.fill();\r\n            \r\n            ctx.globalCompositeOperation = 'source-in';\r\n            // ctx.fillStyle =  'rgba(58, 157, 242, .8)';\r\n\t\t\tctx.fillStyle =  'red';\r\n            ctx.fillRect(0, 0, myChart.getWidth(), myChart.getHeight());\r\n            \r\n            ctx.globalCompositeOperation = 'destination-in';\r\n            ctx.fill();\r\n            \r\n            ctxSum.drawImage(canvas,0,0);\r\n            \r\n            document.body.removeChild(canvas);\r\n        }\r\n\t\t\r\n\t\trender( buildInsetShadow );\r\n\t\t\r\n\t\t/* ctxMain.drawImage(canvas,0,0); */\r\n        \r\n    /* }, 0 ); */\r\n\r\n\r\nfunction drawShape(ctx, shape ) {\r\n    // console.log( shape );\r\n    ctx.beginPath();\r\n    var coord = api.coord( shape[0] );\r\n    ctx.moveTo(coord[0], coord[1]);\r\n    var i = 1;\r\n    \r\n    while(i < shape.length) {\r\n      coord = api.coord( shape[i] );;\r\n      ctx.lineTo(coord[0], coord[1]);\r\n      i++;\r\n    }\r\n    ctx.closePath();\r\n}\r\n\r\n    return {\r\n\t\ttype: 'image',\r\n\t\t/* z2: -10, */\r\n\t\tstyle: {\r\n\t\t\timage: canvasSum,\r\n\t\t\t/* height: myChart.getHeight(),\r\n\t\t\twidth: myChart.getWidth(), */\r\n\t\t}\r\n\t}\r\n    // return {\r\n    //     type: 'group',\r\n    //     children: [\r\n    //          {\r\n    //             type: 'polygon',\r\n    //             shape: {\r\n    //                 points:  points,\r\n    //                 // echarts.graphic.clipPointsByRect(points, {\r\n    //                 //     x: params.coordSys.x,\r\n    //                 //     y: params.coordSys.y,\r\n    //                 //     width: params.coordSys.width,\r\n    //                 //     height: params.coordSys.height\r\n    //                 // })\r\n    //             },\r\n    //             style: api.style({\r\n    //                 shadowColor: 'green',\r\n    //                 shadowBlur: 50,\r\n    //                 stroke: 'red',\r\n    //                 lineWidth: 1,\r\n    //                 blend: 'destination-in',\r\n    //                 color: 'transparent'\r\n    //             })\r\n    //         },\r\n    //     ]\r\n        \r\n    // };\r\n}\r\n\r\n// var offcanvas = myChart.getRenderedCanvas({\r\n//         pixelRatio: 2,\r\n//         backgroundColor: '#fff'\r\n//     });\r\n    \r\n\r\n\r\n// myChart.clear();\r\n// myChart.dispose();\r\n// myChart.setOption( {\r\n//     color: {\r\n//         image: offcanvas, // 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串\r\n//         repeat: 'no-repeat' // 是否平铺, 可以是 'repeat-x', 'repeat-y', 'no-repeat'\r\n//     },\r\n// });\r\n\r\n\r\nvar splitLatitude = -170;\r\nvar str = JSON.stringify( worldMap );\r\nvar worldMapCopy = JSON.parse( str );\r\nvar worldMapCopy2 = JSON.parse( str );\r\n\r\n\r\nfunction transformCoord(arr) {\r\n    // var bounding = {x: -169.94833984375, y: -55.776855468749964, width: 361.23232421874997, height: 139.34169921874994};\r\n    // // var bounding = getBoundingRect();\r\n    // var rate1 = bounding.width / myChart.getWidth();\r\n    // var rate2 = bounding.height / myChart.getHeight();\r\n\r\n    // arr[0] +=  rate1 * ( arr[0]> 0 ? 1 : -1 );\r\n    // arr[1] +=  rate2 * ( arr[0]> 0 ? 1 : -1 );\r\n    return arr;\r\n}\r\n\r\n    worldMapCopy.geoJson.features.forEach( (countryItem,countryIndex) => { //国\r\n        \r\n         countryItem.geometry.coordinates.forEach( (regionItem, regionIndex) => { //区域\r\n            var isBreak1 = false;\r\n            regionItem.every( (lLItem, indexLL) => { //区域坐标点，经纬度 Latitude Longitude\r\n                if( typeof lLItem[0] == 'number'){\r\n                    var latitude = lLItem[0];\r\n                    var sym = latitude < splitLatitude ? 360 + latitude : latitude;\r\n                    worldMapCopy.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][0] = sym;\r\n                    // worldMapCopy2.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][0] = sym;\r\n                    \r\n                    worldMapCopy2.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL] = \r\n                    transformCoord( [sym, lLItem[1]] );\r\n    \r\n                    if( sym !== latitude ){\r\n                        isBreak1 = true;\r\n                        return false;\r\n                    }\r\n                }else{\r\n                    var isBreak2 = false;\r\n                    lLItem.every( (minLLItem, indexMinLL) => {\r\n                        var latitude = minLLItem[0];\r\n                        var sym = latitude < splitLatitude ? 360 + latitude : latitude;\r\n                        worldMapCopy.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL][0] = sym;\r\n                        worldMapCopy2.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL] = \r\n                         transformCoord( [sym, minLLItem[1]] );\r\n    \r\n                        if( sym != latitude ){\r\n                            isBreak2 = true;\r\n                            return false;\r\n                        }else{\r\n                            return true; \r\n                        }\r\n                        \r\n                    } );\r\n                    \r\n                    if( isBreak2 ) {\r\n                        lLItem.forEach( (minLLItem, indexMinLL) => { \r\n                            var shouldMove = minLLItem[0] < 0 ? 360 + minLLItem[0] : minLLItem[0];\r\n                            worldMapCopy.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL][0] = shouldMove;\r\n                            worldMapCopy2.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL] = \r\n                    transformCoord( [shouldMove, minLLItem[1]] );\r\n    \r\n                        } );\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n            \r\n            if( isBreak1 ) {\r\n                regionItem.forEach( (lLItem, indexLL) => { //区域坐标点，经纬度 Latitude Longitude\r\n                    if( typeof lLItem[0] == 'number'){\r\n                        var shouldMove = lLItem[0] < 0 ? 360 + lLItem[0] : lLItem[0];\r\n                        worldMapCopy.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][0] = shouldMove;\r\n                    \r\n                        worldMapCopy2.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL] = \r\n                    transformCoord( [shouldMove, lLItem[1]] );\r\n    \r\n                    }else{\r\n                       var isBreak3 = false;\r\n                        lLItem.every( (minLLItem, indexMinLL) => {\r\n                            var latitude = minLLItem[0];\r\n                            var sym = latitude < splitLatitude ? 360 + latitude : latitude;\r\n                             \r\n                            worldMapCopy.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL][0] = sym;\r\n                            \r\n                            worldMapCopy2.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL] = \r\n                    transformCoord( [sym, minLLItem[1]] );\r\n    \r\n                            \r\n                            if( sym != latitude ){\r\n                                isBreak3 = true;\r\n                                return false;\r\n                            }else{\r\n                                return true; \r\n                            }\r\n                            \r\n                        } );\r\n                        \r\n                        if( isBreak3 ) {\r\n                            lLItem.forEach( (minLLItem, indexMinLL) => { \r\n                               var shouldMove = minLLItem[0] < 0 ? 360 + minLLItem[0] : minLLItem[0];\r\n                                worldMapCopy.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL][0] = shouldMove ;\r\n                                worldMapCopy2.geoJson.features[countryIndex].geometry.coordinates[regionIndex][indexLL][indexMinLL] = \r\n                    transformCoord( [shouldMove, minLLItem[1]] );\r\n    \r\n                                \r\n                            } );\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n         });\r\n    });\r\n\r\n\r\necharts.registerMap('nWorld',worldMapCopy);\r\n\r\necharts.registerMap('n2World',worldMapCopy2);\r\n\r\n\r\n// var zr = myChart.getZr();\r\n\r\n// var position = [ 200, 200];\r\n// var shape = {\r\n// \tx:10,\r\n// \ty:20,\r\n// \twidth:200,\r\n// \theight:1\r\n// };\r\n\r\n// console.log(echarts.graphic);\r\n// var rect =  new echarts.graphic.Rect({\r\n// \tposition: position,\r\n// \tscale:[1,1],\r\n// \tshape:shape,\r\n// \tstyle:{\r\n// \t\tfill:'red',\r\n// \t\ttext: 'zRender Rect',\r\n// \t},\r\n// \tzlevel:0,\r\n// \tz:3\r\n// });\r\n// var rect2 =  new echarts.graphic.Rect({\r\n// \tposition: position,\r\n// \tscale:[1,1],\r\n//     shape: shape,\r\n// \tstyle:{\r\n// \t\tfill:'green',\r\n// \t\ttext: 'zRender Rect',\r\n// \t\tshadowColor:'blue',\r\n// \t\tshadowBlur: 12,\r\n// \t\tglobalCompositeOperation: 'source-in',\r\n// \t},\r\n// \tzlevel:0,\r\n// \tz: 3\r\n// });\r\n// console.log( zr );\r\n// zr.add(rect);\r\n// zr.add(rect2);\r\n\r\nfunction getBoundingRect() {\r\n    // 获取系列\r\n    var seriesModel = myChart.getModel().getSeriesByIndex(option.series.length - 1)\r\n    // 获取地理坐标系实例\r\n    var coordSys = seriesModel.coordinateSystem;\r\n    \r\n    return coordSys.getBoundingRect();\r\n}\r\n\r\n\r\n\r\n// setTimeout( () => {\r\n//     console.log( getBoundingRect() );\r\n//     // 获取系列\r\n//     var seriesModel = myChart.getModel().getSeriesByIndex(option.series.length - 1)\r\n//     // 获取地理坐标系实例\r\n//     var coordSys = seriesModel.coordinateSystem;\r\n    \r\n//   oordSys.getBoundingRect() \r\n\r\n// }, 0 );\r\n","html":"","externalScripts":"","updaterUID":"bd-943272051","theme":"","layout":"","viewCount":34,"userName":"啊很古","commentCount":0,"starCount":0,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xS-MEko9Q3.png?v=1558078118342","isCustomThumbnail":0,"builtinTags":["category-work"],"customTags":[],"updaterUserName":"啊很古"}}