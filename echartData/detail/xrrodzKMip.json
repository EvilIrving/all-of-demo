{"status":0,"data":{"cid":"xrrodzKMip","authorUid":"bd-439334344","authorUserName":"坏***4","title":"tooltip牵引线","description":"","latestVersion":1,"alwaysLatest":1,"createTime":"2020-11-06T02:49:42.000Z","lastUpdateTime":"2020-11-06T02:49:42.000Z","auth":2,"uid":"bd-439334344","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"4.8.0","versionCreateTime":"2020-11-06T02:49:42.000Z","code":"\n\n\nvar getname = ['SCI', 'SSCI','EI','ISTP','AHCI','ISSHP','其他'];\nvar getvalue = [0,2700,3397,3541,2000,2233,3397];\nvar getamount = [60.3,40,75.4,65.5,22.3,15.6,75.4];\nvar getorderCount = [0,5000,11000,14000,15000,20000,20121];\nvar datas = [];\nfor (var i = 0; i < getname.length; i++) {\n    datas.push({\n        name: getname[i],\n        value: getvalue[i],\n        amount: getamount[i],\n        orderCount: getorderCount[i],\n    })\n}\nlet packedDatas = packDatas(datas);\n\n/**\n* priority  tooltip朝向（top/bottom）\n* left, top 为默认值\n* 根据展示内容需要微调text的宽高\n*/\nlet left = false, top = false, priority = 'top'\n// 自定义tooltip配置属性\nlet config = {\n    ecBoxId: 'chart-panel',\n    lineColor: '#fff',\n    L1: {\n        time: 0.3,\n        long: 40\n    },\n    L2: {\n        time: 0.3,\n        long: 40\n    },\n    text: {\n        time: 0.5,\n        text: '',\n        font: '14px Arial',\n        color: '#fff',\n        padding: [10, 10],\n        width: 120,\n        height: 60,\n        lineHeight: 24,\n        backgroundColor: 'rgba(50, 50, 50, 0.8)'\n    }\n}\noption = {\n   grid: {\n        top: 60,\n        bottom: 40,\n        left: 50,\n        right: 30\n    },\n    legend: {\n        data: ['2010','2020'],\n        type: \"scroll\",\n        right: '15',\n        top: '10',\n        itemGap: 25,\n        itemWidth: 14,\n        itemHeight: 14,\n        textStyle: {\n            fontSize: '13',\n            color: '#656565',\n        },\n\n    },\n    tooltip : {\n        trigger: 'item',\n        triggerOn: 'click',\n        backgroundColor: 'transparent',\n        alwaysShowContent: true,\n        position (pos) {\n            let position = getPosOrSize('pos', pos)\n            return position\n        },\n        formatter (params,p,a) {\n            canvasAnimation(params)\n            let size = getPosOrSize('size')\n            let tooltipDom = `<canvas id=\"tCanvas\" width=\"${size.width}\" height=\"${size.height}\">123</canvas>`\n            return tooltipDom\n        }\n    },\n     xAxis: {\n        splitLine: {\n            show: false,\n        },\n        scale: true,\n        type: 'value',\n        name: '人均发表篇次',\n        nameTextStyle: {\n            color: '#666666',\n            fontSize: 13,\n            padding: [0, 0, 30, -80]\n        },\n        axisLabel: {\n            formatter: function(value) {\n                num = value\n                if (num && num != 'undefined' && num != 'null') {\n                    let numS = num;\n                    numS = numS.toString();\n                    numS = numS.replace(/,/gi, '');\n                    return numS;\n                } else {\n                    return num;\n                }\n            },\n            color: '#656565',\n            textStyle: {\n                fontSize: 13\n            },\n        },\n        axisLine: {\n            lineStyle: {\n                color: '#333333',\n            }\n        },\n        axisTick: {\n            show: false\n        },\n    },\n    yAxis: {\n        name: '人均发表篇次',\n        nameTextStyle: {\n            color: '#666666',\n            fontSize: 13,\n            padding: [0, 0, 0, 70]\n        },\n        axisLabel: {\n            formatter: function(value) {\n                num = value\n                if (num && num != 'undefined' && num != 'null') {\n                    let numS = num;\n                    numS = numS.toString();\n                    numS = numS.replace(/,/gi, '');\n                    return numS;\n                } else {\n                    return num;\n                }\n            },\n            color: '#656565',\n            textStyle: {\n                fontSize: 13\n            },\n        },\n        axisLine: {\n            lineStyle: {\n                color: '#333333',\n            }\n        },\n        axisTick: {\n            show: false\n        },\n        splitLine: {\n            lineStyle: {\n                color: 'rgba(209,209,209,.25)',\n            }\n        }\n    },\n\n    series: [{\n        name: '2010',\n        symbolSize: function(data) {\n            return data[1]/5;\n        },\n        itemStyle: {\n            normal: {\n                color: '#9CC8FF',\n                borderColor: '#4B95F3',\n                borderWidth: 2,\n            }\n        },\n        data: packedDatas,\n        type: 'scatter',\n    }]\n};\n\nconst canvasAnimation = params => {\n    setTimeout(function() {\n        config.text.text = `地点：${params.name}\\n数量：${params.value[2]}`\n        new myTooltip('tCanvas', config)\n    }, 0);\n}\n\n// 计算tooltip位置\nconst getPosOrSize = (type, point) => {\n    let x1 = config.L1.long * Math.sin(Math.PI / 4)\n    let width = x1 + config.L2.long + config.text.width,\n        height = x1 + config.text.height / 2\n    if (type === 'size') {\n        config.width = width\n        config.height = height\n        return {\n            width,\n            height\n        }\n    } else {\n        let box = document.getElementById(config.ecBoxId),\n            bw = box.offsetWidth,\n            bh = box.offsetHeight,\n            x = point[0],\n            y = point[1]\n        left = false\n        if (x + width >= bw / 1.2) {\n            x = x - width - 5\n            left = true\n        }\n        if (priority === 'top') {\n            // L1向上\n            top = true\n            y = y - height - 5\n            if (y <= 0) {\n                y = point[1]\n                top = false\n            }\n            return [x, y]\n        } else {\n            top = false\n            if (y + height >= bh) {\n                y = y - height - 5\n                top = true\n            }\n            return [x, y]\n        }\n    }\n}\n\nclass myTooltip {\n    constructor (id, config) {\n        this.config = config\n        this.totalTime = 0\n        this.stage = new createjs.Stage(id)\n        this.timeline = new TimelineMax({repeat: 0})\n        this.g = new createjs.Graphics()\n        this.lineShape = new createjs.Shape(this.g)\n        this.textShape = new createjs.Shape()\n        this.stage.addChild(this.lineShape, this.textShape)\n        this.init()\n        this.begin()\n        this.update()\n    }\n    init () {\n        this.start = [0, 0]\n        if (left) {\n            this.start[0] = this.config.width \n        }\n        if (top) {\n            this.start[1] = this.config.height\n        }\n    }\n    begin () {\n        this.L1()\n        this.L2()\n        this.addText()\n    }\n    L1 () {\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {s: 0},\n        x = c.L1.long * Math.sin(Math.PI / 4)\n        if (left) {\n            if (top) {\n                this.L1End = [me.start[0] - x, me.start[1] - x]\n            } else {\n                this.L1End = [me.start[0] - x, me.start[1] + x]\n            }\n        } else {\n            if (top) {\n                this.L1End = [x, me.start[1] - x]\n            } else {\n                this.L1End = [x, x]\n            }\n        }\n        \n        tl.to(scale, c.L1.time, {\n            s: 1,\n            onUpdate () {\n                let s = scale.s\n                if (left) {\n                    if (top) {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(me.start[0] - x * s, me.start[1] - x * s)\n                    } else {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(me.start[0] - x * s, me.start[1] + x * s)\n                    }\n                } else {\n                    if (top) {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(x * s, me.start[1] - x * s)\n                    } else {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(x * s, x * s)\n                    }\n                }\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n        this.totalTime += c.L1.time\n    }\n    L2 () {\n        // 只跟左右有关，只判断left\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {s: 0}\n        tl.to(scale, c.L2.time, {\n            s: 1,\n            onUpdate () {\n                let s = scale.s\n                if (left) {\n                    me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(me.L1End[0] - c.L2.long * s, me.L1End[1])\n                } else {\n                    me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(me.L1End[0] + c.L2.long * s, me.L1End[1])\n                }\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n        this.totalTime += c.L2.time\n    }\n    addText () {\n        // text框只与L2end有关，只需判断left即可，top不影响\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {s: 0},\n            L2End = [me.L1End[0] + c.L2.long, me.L1End[1]]\n        if (left) {\n            L2End = [me.L1End[0] - c.L2.long, me.L1End[1]]\n        }\n        tl.to(scale, c.text.time, {\n            s: 1,\n            onStart () {\n                let x = 0, y = 0\n                if (left) {\n                    x = L2End[0] - c.text.width\n                } else {\n                    x = L2End[0]\n                }\n                me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(...L2End)\n                me.text = new createjs.Text(c.text.text, c.text.font, c.text.color)\n                me.text.alpha = 0\n                me.text.lineHeight = c.text.lineHeight\n                me.text.x = x + c.text.padding[0]\n                me.text.y = L2End[1] - c.text.height / 2 + c.text.padding[1]\n                me.stage.addChild(me.text)\n                me.textShape.graphics.c().f(c.text.backgroundColor).rr(x, L2End[1] - c.text.height / 2, c.text.width, c.text.height, 5)\n                me.textShape.alpha = 0\n                me.update()\n            },\n            onUpdate () {\n                me.text.alpha = scale.s\n                me.textShape.alpha = scale.s\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n    }\n    update () {\n        this.stage.update()\n    }\n}\n\nlet EC = echarts.getInstanceByDom(document.getElementById(\"chart-panel\"))\n\nvar index = 0\nsetInterval(_ => {\n    EC.dispatchAction({\n        type: 'showTip',\n        seriesIndex: 0,\n        dataIndex: index\n    })\n    index++\n    if (index >= data.length) {\n        index = 0\n    }\n}, 3000)\nwindow.addEventListener('resize', e => {\n    let tCanvas = document.getElementById('tCanvas')\n    if (tCanvas) {\n        tCanvas.style.display = 'none'\n    }\n})\nfunction packDatas(datas) {\n    let packedDatas = datas.map((data) => {\n        let name = data['name'];\n        let dispathCount = data['orderCount'];\n        let refs = data['amount'];\n        let avt = data['value'];\n        return [dispathCount, refs, name, avt ];\n    });\n\n    return packedDatas;\n}","html":"","externalScripts":"/dep/echarts/map/js/china.js,https://cdnjs.cloudflare.com/ajax/libs/gsap/2.0.1/TweenMax.min.js,https://code.createjs.com/1.0.0/easeljs.min.js","updaterUID":"bd-439334344","theme":"","layout":"","viewCount":91,"userName":"坏***4","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xrrodzKMip.png?v=1604630982303","isCustomThumbnail":0,"builtinTags":["category-work","grid","legend","series-scatter","tooltip"],"customTags":[],"updaterUserName":"坏***4"}}