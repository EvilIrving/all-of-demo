{"status":0,"data":{"cid":"xp228WMsvi","authorUid":"obd-o0eO8nf1WwkETQ8akx-Kk79MtvKiEFw","authorUserName":"K***2","title":"项目工程工序甘特图","description":"易管甘特图简易版\n侧边栏展开收起\n更复杂版本暂不开放","latestVersion":3,"alwaysLatest":0,"createTime":"2021-11-18T06:10:13.000Z","lastUpdateTime":"2021-11-19T07:14:43.000Z","auth":2,"uid":"obd-o0eO8nf1WwkETQ8akx-Kk79MtvKiEFw","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":3,"parentVersion":2,"echartsVersion":"5.2.2","versionCreateTime":"2021-11-19T07:13:02.000Z","code":"const projectData = {\n  'projectName': '项目',\n  'startDate': '2021-08-01T00:00:00.000+0800',\n  'endDate': '2022-08-31T00:00:00.000+0800',\n  'status': 1,\n  'actuleRatio': 7.0000,\n  'emergencyDegree': 1,\n  'engineeringScheduleList': [{\n    'engineeringScheduleId': 14116,\n    'milestoneId': 916,\n    'engineeringName': '龙湖集团:自建工程1',\n    'startDate': '2021-08-01T00:00:00.000+0800',\n    'endDate': '2021-08-31T00:00:00.000+0800',\n    'status': 1,\n    'actuleRatio': 10.000,\n    'emergencyDegree': 1,\n    'actualScheduleWorkday': 3,\n    'planningScheduleWorkDays': 31,\n    'processSchedules': [{\n      'processScheduleId': 579,\n      'processScheduleName': '龙湖集团:自建工序1-1😂😄',\n      'startDate': '2021-08-01T00:00:00.000+0800',\n      'endDate': '2021-08-31T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }]\n  }, {\n    'engineeringScheduleId': 14132,\n    'milestoneId': 916,\n    'engineeringName': '龙湖集团:自建工程2😂😂',\n    'startDate': '2021-08-01T00:00:00.000+0800',\n    'endDate': '2021-08-31T00:00:00.000+0800',\n    'status': 2,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 8,\n    'planningScheduleWorkDays': 133,\n    'processSchedules': [{\n      'processScheduleId': 594,\n      'processScheduleName': '龙湖集团:自建工序2-1',\n      'startDate': '2021-08-01T00:00:00.000+0800',\n      'endDate': '2021-08-31T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }, {\n      'processScheduleId': 593,\n      'processScheduleName': '龙湖集团:自建工序2-2',\n      'startDate': '2021-08-04T00:00:00.000+0800',\n      'endDate': '2021-08-05T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }]\n  }, {\n    'engineeringScheduleId': 14131,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程3',\n    'startDate': '2021-08-09T00:00:00.000+0800',\n    'endDate': '2022-08-31T00:00:00.000+0800',\n    'status': 2,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 7,\n    'planningScheduleWorkDays': 18,\n    'processSchedules': [{\n      'processScheduleId': 592,\n      'processScheduleName': '龙湖集团:自建工序3-1',\n      'startDate': '2021-08-08T00:00:00.000+0800',\n      'endDate': '2021-08-16T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }]\n  }, {\n    'engineeringScheduleId': 14136,\n    'milestoneId': 916,\n    'engineeringName': '龙湖集团:自建工程4',\n    'startDate': '2021-08-11T00:00:00.000+0800',\n    'endDate': '2021-08-31T00:00:00.000+0800',\n    'status': 2,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 1,\n    'planningScheduleWorkDays': 7,\n    'processSchedules': [{\n      'processScheduleId': 595,\n      'processScheduleName': '龙湖集团:自建工序4-1',\n      'startDate': '2021-08-11T00:00:00.000+0800',\n      'endDate': '2021-08-11T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }]\n  }, {\n    'engineeringScheduleId': 14137,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程5',\n    'startDate': '2021-08-11T00:00:00.000+0800',\n    'endDate': '2022-08-31T00:00:00.000+0800',\n    'status': 0,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 0,\n    'planningScheduleWorkDays': 0,\n    'processSchedules': []\n  }, {\n    'engineeringScheduleId': 14138,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程6',\n    'startDate': '2021-08-11T00:00:00.000+0800',\n    'endDate': '2022-08-31T00:00:00.000+0800',\n    'status': 1,\n    'actuleRatio': 3.0000,\n    'emergencyDegree': 1,\n    'actualScheduleWorkday': 6,\n    'planningScheduleWorkDays': 204,\n    'processSchedules': [{\n      'processScheduleId': 634,\n      'processScheduleName': '龙湖集团:自建工序6-1',\n      'startDate': '2021-08-11T00:00:00.000+0800',\n      'endDate': '2021-08-19T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }, {\n      'processScheduleId': 640,\n      'processScheduleName': '龙湖集团:自建工序6-2',\n      'startDate': '2021-08-11T00:00:00.000+0800',\n      'endDate': '2021-10-11T00:00:00.000+0800',\n      'status': 1,\n      'actuleRatio': 3.0000,\n      'emergencyDegree': 1\n    }]\n  }, {\n    'engineeringScheduleId': 14182,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程7',\n    'startDate': '2021-08-20T00:00:00.000+0800',\n    'endDate': '2022-08-31T00:00:00.000+0800',\n    'status': 0,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 0,\n    'planningScheduleWorkDays': 0,\n    'processSchedules': []\n  }, {\n    'engineeringScheduleId': 14183,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程8',\n    'startDate': '2021-08-23T00:00:00.000+0800',\n    'endDate': '2021-10-31T00:00:00.000+0800',\n    'status': 1,\n    'actuleRatio': 0.000,\n    'emergencyDegree': 1,\n    'actualScheduleWorkday': 0,\n    'planningScheduleWorkDays': 78,\n    'processSchedules': [{\n      'processScheduleId': 649,\n      'processScheduleName': '龙湖集团:自建工序8-1',\n      'startDate': '2021-08-23T00:00:00.000+0800',\n      'endDate': '2021-09-30T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }]\n  }, {\n    'engineeringScheduleId': 14184,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程9',\n    'startDate': '2021-08-24T00:00:00.000+0800',\n    'endDate': '2021-12-31T00:00:00.000+0800',\n    'status': 1,\n    'actuleRatio': 21.0000,\n    'emergencyDegree': 1,\n    'actualScheduleWorkday': 13,\n    'planningScheduleWorkDays': 62,\n    'processSchedules': [{\n      'processScheduleId': 655,\n      'processScheduleName': '龙湖集团:自建工序9-1',\n      'startDate': '2021-08-24T00:00:00.000+0800',\n      'endDate': '2021-10-24T00:00:00.000+0800',\n      'status': 2,\n      'actuleRatio': null,\n      'emergencyDegree': 0\n    }]\n  }, {\n    'engineeringScheduleId': 14185,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程10',\n    'startDate': '2021-08-24T00:00:00.000+0800',\n    'endDate': '2021-11-30T00:00:00.000+0800',\n    'status': 0,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 0,\n    'planningScheduleWorkDays': 0,\n    'processSchedules': []\n  }, {\n    'engineeringScheduleId': 14352,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程11',\n    'startDate': '2021-10-13T00:00:00.000+0800',\n    'endDate': '2022-08-31T00:00:00.000+0800',\n    'status': 0,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 0,\n    'planningScheduleWorkDays': 0,\n    'processSchedules': []\n  }, {\n    'engineeringScheduleId': 14355,\n    'milestoneId': 0,\n    'engineeringName': '龙湖集团:自建工程12',\n    'startDate': '2021-10-14T00:00:00.000+0800',\n    'endDate': '2022-08-31T00:00:00.000+0800',\n    'status': 0,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 0,\n    'planningScheduleWorkDays': 0,\n    'processSchedules': []\n  }, {\n    'engineeringScheduleId': 14504,\n    'milestoneId': 917,\n    'engineeringName': '龙湖集团:自建工程13',\n    'startDate': '2021-10-25T00:00:00.000+0800',\n    'endDate': '2021-12-30T00:00:00.000+0800',\n    'status': 0,\n    'actuleRatio': null,\n    'emergencyDegree': 0,\n    'actualScheduleWorkday': 0,\n    'planningScheduleWorkDays': 0,\n    'processSchedules': []\n  }],\n  'projectMilestoneList': [{\n    'name': '开工',\n    'code': '7',\n    'deadline': '2021-08-01T00:00:00.000+0800',\n    'emergencyDegree': 0,\n    'milestoneRate': 0\n  }, {\n    'name': '出±0',\n    'code': '1',\n    'deadline': '2021-11-23T00:00:00.000+0800',\n    'emergencyDegree': 1,\n    'milestoneRate': 0.0702\n  }, {\n    'name': '主体结构完成',\n    'code': '2',\n    'deadline': '2021-12-30T00:00:00.000+0800',\n    'emergencyDegree': 0,\n    'milestoneRate': 0\n  }]\n};\n\nlet engineeringScheduleList = projectData.engineeringScheduleList.map((item) => ({\n  ...item,\n  _type: 'engineering',\n  _id: item.engineeringScheduleId,\n  _name: item.engineeringName,\n  _isExpanded: false,\n  processSchedules: item.processSchedules.map((processItem) => ({\n    ...processItem,\n    _type: 'process',\n    _id: processItem.processScheduleId,\n    _parentId: item.engineeringScheduleId,\n    _name: processItem.processScheduleName,\n    _isExpanded: false,\n  })),\n}));\nconst projectMilestoneList = [...projectData.projectMilestoneList.map((item) => ({\n  name: item.name,\n  xAxis: new Date(item.deadline).getTime(),\n})), {\n  name: '今日',\n  xAxis: new Date().getTime(),\n}];\n\n// 记住datazoom的x轴偏移量\nlet dataZoomStart = 0;\nconst valueSpanIndex = 5;\n\nconst renderChart = start => {\n  // dataZoom\n  const dayTimestamp = 24 * 60 * 60 * 1000;\n  // 全屏时手势更改的时间范围\n  const VALUE_SPAN_ARRAY = Array.from({ length: 6 }, (_, i) => dayTimestamp * 30 * 6.5 / Math.pow(2, 5 - i));\n  const dataZoomX = [\n    {\n      type: 'slider',\n      show: false,\n      filterMode: 'none', // 不过滤数据，只改变数轴范围。\n      xAxisIndex: [0, 1],\n      start,\n      // end: 100,\n      // 坐标轴上最大和最小间隔相同 保证固定展示数量 且.5带来可滑动的观感\n      minValueSpan: VALUE_SPAN_ARRAY[valueSpanIndex],\n      maxValueSpan: VALUE_SPAN_ARRAY[valueSpanIndex],\n    },\n    {\n      id: 'zoomX',\n      type: 'inside',\n      filterMode: 'none',\n      xAxisIndex: [0, 1],\n      zoomLock: true,\n      preventDefaultMouseMove: false,\n    },\n  ];\n  const dataZoomY = [\n    {\n      type: 'slider',\n      show: false,\n      filterMode: 'none', // 不过滤数据，只改变数轴范围。\n      yAxisIndex: 0,\n      // 全屏时Y轴可以滑动\n      minValueSpan: window.innerHeight / 80,\n      maxValueSpan: window.innerHeight / 80,\n    },\n    {\n      type: 'inside',\n      filterMode: 'none',\n      yAxisIndex: 0,\n      zoomLock: true,\n      // 全屏时Y轴可以滑动\n      moveOnMouseMove: true,\n      preventDefaultMouseMove: true,\n    }\n  ];\n  const dataZoom = [\n    ...dataZoomX,\n    ...dataZoomY,\n  ];\n  \n  // grid\n  const FULLSCREEN_GRID_LEFT = 210;\n  // 为了全屏时左侧设置背景色 将左右两侧方向设置0\n  const grid = {\n    top: 6,\n    right: 0,\n    bottom: 0,\n    left: FULLSCREEN_GRID_LEFT,\n    containLabel: true,\n  };\n  \n  // xAxis\n  const xAxisMin = new Date(new Date(projectData.startDate).setDate(1)).getTime(); // 当月1号\n  const xAxisBase = {\n    type: 'time',\n    position: 'top',\n    // z: 10,\n    min: xAxisMin,\n    // min: 1609430400000, // 2021-01-01\n    // max: 1640880000000, // 2021-12-31\n    axisLabel: {\n      margin: 6,\n      formatter: '{yyyy}.{MM}',\n      color: '#6F6F6F',\n      fontSize: 10,\n      align: 'left',\n    },\n    axisLine: {\n      show: false,\n    },\n    axisTick: {\n      show: false,\n    },\n    splitArea: {\n      show: false,\n    },\n  };\n  const xAxis = [\n    {\n      ...xAxisBase,\n      minInterval: dayTimestamp * 7,\n      // maxInterval: dayTimestamp * 7,\n      // splitNumber: 3,\n      axisLabel: {\n        show: true,\n        margin: 12,\n        // formatter: '{yyyy}.{MM}',\n        formatter() {\n          return valueSpanIndex >= 5 ? '{yyyy}.{MM}' : '{yyyy}.{MM}.{dd}';\n        },\n        hideOverlap: true, // 避免重叠\n        color: '#848484',\n        fontSize: 10,\n        align: 'left',\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#DCDFE7',\n          width: 18,\n          cap: 'butt',\n        },\n      },\n    },\n    {\n      ...xAxisBase,\n      offset: 28,\n      // 时间区间较小时(valueSpanIndex <= 3) 直接赋值splitNumber最小 避免展示过多 这里最好还是把季度去掉 没有任何意义\n      minInterval: valueSpanIndex > 3 ? dayTimestamp * 30 * 4 : undefined,\n      maxInterval: valueSpanIndex > 3 ? dayTimestamp * 30 * 4 : undefined,\n      splitNumber: valueSpanIndex <= 3 && 1,\n      axisLabel: {\n        margin: 4,\n        // echarts自带季度有bug\n        // formatter: 'Q{Q}',\n        formatter(value) {\n          const month = new Date(value).getMonth();\n          if (month < 3) {\n            return 'Q1';\n          } else if (month < 6) {\n            return 'Q2';\n          } else if (month < 9) {\n            return 'Q3';\n          } else {\n            return 'Q4';\n          }\n        },\n        // showMinLabel: false,\n        // showMaxLabel: false,\n        color: '#848484',\n        fontSize: 12,\n        align: 'left',\n      },\n      axisLine: {\n        show: true,\n        lineStyle: {\n          color: '#EAEAEA',\n          width: 0.5,\n        },\n      },\n    },\n  ];\n  \n  // yAxis\n  const yAxis = {\n    // 这里设置false会影响splitArea展示\n    // show: false,\n    // 这行data去掉滑动就很顺畅 通过min & max参数定义Y轴\n    // data: engineeringScheduleList.value.map((item) => item._name),\n    inverse: true,\n    interval: 1,\n    axisLabel: {\n      show: false,\n    },\n    axisLine: {\n      show: false,\n    },\n    axisTick: {\n      show: false,\n    },\n    splitLine: {\n      show: false,\n    },\n    splitArea: {\n      show: true,\n      areaStyle: {\n        color: engineeringScheduleList.map((item) => {\n          if (item._type === 'engineering' && !item._isExpanded) {\n            return 'white';\n          } else {\n            return item.status === 1 ? '#FFEEEE' : '#EBF3FE';\n          }\n        }),\n      },\n    },\n    min: 0,\n    max: engineeringScheduleList.length,\n  };\n  \n  // series\n  const STATUS_MAP = ['未开始', '进行中', '已完工', '待确认', '已拒绝'];\n  const renderCircleItem = (isShowCircle, isExpanded, status) => {\n    return {\n      type: 'circle',\n      z2: 3,\n      textContent: {\n        style: {\n          y: -1.6,\n          text: isExpanded ? '-' : '+',\n          textFill: status === 1 ? '#FF6E6E' : '#3688F6',\n          fontSize: '16px',\n        },\n      },\n      textConfig: {\n        position: 'inside',\n      },\n      shape: {\n        // cx: 0,\n        // cy: 0,\n        r: 8,\n      },\n      style: {\n        fill: status === 1 ? '#FFEEEE' : '#EBF3FE',\n      },\n      ignore: !isShowCircle,\n    };\n  };\n  // for more details, see https://echarts.apache.org/examples/zh/editor.html?c=custom-gantt-flight\n  const renderGanttItem = (params, api) => {\n    // clip rect outside canvas when dragging!\n    // function clipRectByRect(params, rect) {\n    //   return echarts.graphic.clipRectByRect(rect, {\n    //     x: params.coordSys.x,\n    //     y: params.coordSys.y,\n    //     width: params.coordSys.width,\n    //     height: params.coordSys.height,\n    //   });\n    // }\n    const yIndex = params.dataIndexInside; // y轴数据index值\n    const { _type, _name, _isExpanded, actuleRatio: actualRatio = 0, status, processSchedules } = engineeringScheduleList[yIndex];\n    const isShowCircle = _type === 'engineering' && !!processSchedules.length;\n    const startDate = api.coord([api.value(0), yIndex]); // 开始时间数值转换成坐标系上的点\n    const endDate = api.coord([api.value(1), yIndex]); // 结束时间数值转换成坐标系上的点\n    const barLength = endDate[0] - startDate[0]; // 长度\n    const yIntervalHeight = api.size([0, 1])[1]; // y轴间隔距离，单位为1应得到的长度；x轴为0得到0略过\n    const barHeight = yIntervalHeight * (_type === 'engineering' ? 0.48 : 0.24); // 柱状图高度由y轴间隔高度乘以系数得到\n    const [x, y] = startDate;\n    const text = `${actualRatio || 0}% (${STATUS_MAP[status]})`;\n    const textWidth = text.length * 11 + (isShowCircle ? 24 : 4); // 计算path的长度 这里无法找到方法自适应 within my capacity oops~\n  \n    return {\n      type: 'group',\n      id: 'ganttItem',\n      position: [x, y + (yIntervalHeight - barHeight) / 2],\n      children: [\n        {\n          type: 'rect',\n          textContent: {\n            style: {\n              text,\n              textFill: '#323232',\n            },\n            ignore: _type === 'process',\n          },\n          textConfig: {\n            position: 'insideLeft',\n          },\n          shape: {\n            width: barLength,\n            height: barHeight,\n            r: 3, // 设置圆角矩形\n          },\n          style: {\n            fill: status === 1 ? (_type === 'engineering' ? '#FF6E6E' : '#FFA8A8') : (_type === 'engineering' ? '#378DFF' : '#9AC3FA'),\n          },\n        },\n        {\n          type: 'rect',\n          shape: {\n            width: barLength * actualRatio / 100,\n            height: barHeight / 3,\n            r: 3, // 设置圆角矩形\n          },\n          style: {\n            fill: status === 1 ? '#E64A4A' : '#006CCF',\n          },\n          ignore: !actualRatio, // 非全屏时展示; 全屏且勾选实际进度明细时展示;\n        },\n      ],\n    };\n  };\n  const renderAxisLabelItem = (params, api) => {\n    const yIndex = params.dataIndexInside; // y轴数据index值\n    const { _type, _name, _isExpanded, status, processSchedules } = engineeringScheduleList[yIndex];\n    const isShowCircle = _type === 'engineering' && !!processSchedules.length;\n    const y = api.coord([0, api.value(0)])[1];\n  \n    const AXIS_LABEL_LEFT = 24;\n    const AXIS_LABEL_RIGHT = 6;\n    const AXIS_LABEL_HEIGHT = api.size([0, 1])[1] * 0.8;\n  \n    // 裁掉超出y轴坐标系的部分\n    if (y < params.coordSys.y - AXIS_LABEL_HEIGHT) {\n      return;\n    }\n  \n    return {\n      type: 'group',\n      position: [AXIS_LABEL_LEFT, y + AXIS_LABEL_HEIGHT / 8 /* 高度占比0.8 居中上下各留0.1 所以除以8 */],\n      children: [\n        _type === 'engineering' ? {\n          type: 'rect',\n          z2: 1,\n          shape: {\n            width: FULLSCREEN_GRID_LEFT - AXIS_LABEL_LEFT - AXIS_LABEL_RIGHT,\n            height: AXIS_LABEL_HEIGHT,\n            r: 3,\n          },\n          style: {\n            fill: 'white',\n          },\n        } : {\n          type: 'group',\n          children: [\n            {\n              type: 'polyline',\n              shape: {\n                points: [[10, -48], [10, AXIS_LABEL_HEIGHT / 2], [16, AXIS_LABEL_HEIGHT / 2]],\n              },\n              style: {\n                fill: 'transparent',\n                stroke: '#D6D6D6',\n              },\n            },\n            {\n              type: 'circle',\n              shape: {\n                cx: 20,\n                cy: AXIS_LABEL_HEIGHT / 2,\n                r: 2,\n              },\n              style: {\n                fill: status === 1 ? '#FF5252' : '#3688F6',\n              },\n            },\n          ],\n        },\n        {\n          type: 'group',\n          position: [12, AXIS_LABEL_HEIGHT / 2],\n          children: [\n            renderCircleItem(isShowCircle, _isExpanded, status),\n            {\n              type: 'text',\n              z2: 3,\n              style: {\n                x: _type === 'engineering' ? 12 : 16,\n                y: -6,\n                text: _name,\n                textFill: _type === 'engineering' ? '#323232' : '#5B5B5B',\n                fontWeight: _type === 'engineering' && 'bold',\n              },\n            },\n          ],\n        },\n        {\n          type: 'text',\n          z2: 5,\n          style: {\n            x: FULLSCREEN_GRID_LEFT - AXIS_LABEL_LEFT - AXIS_LABEL_RIGHT - 12,\n            y: AXIS_LABEL_HEIGHT / 2 - 8,\n            text: '>',\n            textFill: '#D6D6D6',\n          },\n        },\n      ],\n    };\n  };\n  const markLine = {\n    symbol: ['emptyCircle'],\n    animation: false,\n    data: projectMilestoneList.map((item) => ({\n      ...item,\n      y: 40,\n      label: {\n        show: false,\n        silent: true, // 不响应和触发鼠标事件\n        position: 'start',\n      },\n      lineStyle: {\n        color: '#F2BA40',\n        opacity: 0.5,\n      },\n      emphasis: {\n        label: {\n          show: true,\n          opacity: 1,\n          formatter(params) {\n            return `{a|${params.name}}` + '\\n' + `{b|${new Date(params.value).getMonth() + 1}.${new Date(params.value).getDate()}}`;\n          },\n          rich: {\n            a: {\n              color: '#464646',\n              fontSize: 16,\n            },\n            b: {\n              color: '#999',\n              fontSize: 10,\n              padding: [2, 0, 2, 0],\n            },\n          },\n        },\n        lineStyle: {\n          color: '#205294',\n        },\n      },\n    })),\n  };\n  const seriesBase = {\n    type: 'custom',\n    clip: true, // 裁掉所有超出坐标系的部分\n    // custom can only use Array but not Object data format! \n    // dimensions: 0 startDate 1 endDate\n    data: engineeringScheduleList.map((item) => [new Date(item.startDate).getTime(), new Date(item.endDate).getTime()]),\n    renderItem: renderGanttItem,\n    xAxisIndex: 0,\n    encode: { // 不可删 对应zoomdata\n      x: [0, 1],\n      y: 0,\n    },\n    markLine,\n  };\n  const series = [\n    {\n      ...seriesBase,\n      markLine: {\n        ...markLine,\n        data: markLine.data.map((item) => ({\n          ...item,\n          y: 44,\n          emphasis: {\n            label: {\n              show: false,\n            },\n          },\n        })),\n      },\n    },\n    // just for xAxis Q1-4\n    {\n      type: 'custom',\n      data: engineeringScheduleList.map((item) => [new Date(item.startDate).getTime(), new Date(item.endDate).getTime()]),\n      renderItem: () => { return null },\n      xAxisIndex: 1,\n      encode: {\n        x: [0, 1],\n        y: 0,\n      },\n    },\n    {\n      type: 'custom',\n      data: engineeringScheduleList.map((_, index) => [index]),\n      renderItem: renderAxisLabelItem,\n      encode: {\n        x: -1,\n        y: 0\n      },\n    },\n  ];\n  \n  myChart.setOption({\n    dataZoom,\n    grid,\n    xAxis,\n    yAxis,\n    series,\n    backgroundColor: '#F8F9FB',\n  });\n};\nconst resizeChart = () => {\n  setTimeout(() => {\n    myChart.resize({ height: window.innerHeight });\n  });\n};\n\nrenderChart();\nresizeChart();\n\nmyChart.on('click', 'series.custom', event => {\n  // 仅工程工序项\n  if (event.componentSubType !== 'custom') return;\n  const index = event.dataIndex;\n  const selectedItem = engineeringScheduleList[index];\n  if (selectedItem._type === 'engineering') {\n    // 工程下无工序情况\n    if (!selectedItem.processSchedules.length) return;\n\n    if (selectedItem._isExpanded) {\n      engineeringScheduleList = engineeringScheduleList.filter(item => item._parentId !== selectedItem._id);\n    } else {\n      engineeringScheduleList.splice(index + 1, 0, ...selectedItem.processSchedules);\n    }\n    engineeringScheduleList[index]._isExpanded = !engineeringScheduleList[index]._isExpanded;\n    renderChart(dataZoomStart);\n    resizeChart();\n  } else {\n    emit('clickProcess', selectedItem);\n  }\n});\nmyChart.on('dataZoom', event => {\n  if (!event.batch) return;\n  dataZoomStart = event.batch[0].start;\n});","html":"","externalScripts":"","updaterUID":"obd-o0eO8nf1WwkETQ8akx-Kk79MtvKiEFw","theme":"default","layout":"","viewCount":0,"userName":"K***2","commentCount":0,"starCount":3,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xp228WMsvi.png?v=1637305982467","isCustomThumbnail":0,"builtinTags":["category-work","dataZoom","grid","markLine","series-custom"],"customTags":[],"updaterUserName":"K***2"}}