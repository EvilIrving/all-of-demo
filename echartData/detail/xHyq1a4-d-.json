{"status":0,"data":{"cid":"xHyq1a4-d-","authorUid":"bd-658419289","authorUserName":"经***4","title":"3D-Demo","description":"练习","latestVersion":7,"alwaysLatest":1,"createTime":"2017-08-16T03:32:49.000Z","lastUpdateTime":"2017-08-16T03:32:49.000Z","auth":1,"uid":"bd-658419289","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":7,"parentVersion":6,"echartsVersion":"3.8.0","versionCreateTime":"2019-02-15T08:13:19.000Z","code":"var uploadedDataURL = \"/asset/get/s/data-1482909818685-H17FOkZSl.json\";\nlet data = [{\n        name: '长沙市',\n        value: 12\n    },\n    {\n        name: '株洲市',\n        value: 12\n    },\n    {\n        name: '湘潭市',\n        value: 12\n    },\n    {\n        name: '岳阳市',\n        value: 14\n    },\n    {\n        name: '益阳市',\n        value: 27\n    },\n    {\n        name: '常德市',\n        value: 25\n    },\n    {\n        name: '娄底市',\n        value: 26\n    },\n    {\n        name: '衡阳市',\n        value: 26\n    },\n    {\n        name: '郴州市',\n        value: 26\n    },\n    {\n        name: '永州市',\n        value: 27\n    },\n    {\n        name: '邵阳市',\n        value: 27\n    },\n    {\n        name: '怀化市',\n        value: 27\n    },\n    {\n        name: '湘西土家族苗族自治州',\n        value: 28\n    },\n    {\n        name: '张家界市',\n        value: 29\n    },\n];\nlet geoCoordMap = {\n    '长沙市': [113, 28.21],\n    '株洲市': [113.09, 27.51],\n    '湘潭市': [112.53, 27.52],\n    '岳阳市': [113.06, 29.22],\n    '益阳市': [112.20, 28.36],\n    '常德市': [111.69, 29.05],\n    '娄底市': [111.59, 27.44],\n    '衡阳市': [112.37, 26.53],\n    '郴州市': [113.02, 25.46],\n    '永州市': [111.37, 26.13],\n    '邵阳市': [111.28, 27.14],\n    '怀化市': [109.58, 27.33],\n    '湘西土家族苗族自治州': [109.73, 28.32],\n    '张家界市': [110.29, 29.08],\n};\n\nlet convertData = function(data) {\n    let res = [];\n    for (let i = 0; i < data.length; i++) {\n        let geoCoord = geoCoordMap[data[i].name];\n        if (geoCoord) {\n            res.push({\n                name: data[i].name,\n                value: geoCoord.concat(data[i].value)\n            });\n        }\n    }\n    return res;\n};\n\n/**\n * priority  tooltip朝向（top/bottom）\n * left, top 为默认值\n * 根据展示内容需要微调text的宽高\n */\nlet left = false,\n    top = false,\n    priority = 'top'\n// 自定义tooltip配置属性\nlet config = {\n    ecBoxId: 'chart-panel',\n    lineColor: '#fff',\n    L1: {\n        time: 0.3,\n        long: 40\n    },\n    L2: {\n        time: 0.3,\n        long: 40\n    },\n    text: {\n        time: 0.5,\n        text: '',\n        font: '14px Arial',\n        color: '#fff',\n        padding: [10, 10],\n        width: 120,\n        height: 60,\n        lineHeight: 24,\n        backgroundColor: 'rgba(50, 50, 50, 0.8)'\n    }\n}\noption = {\n    title: {\n        top: 10,\n        text: '引导线tooltip轮播动画效果',\n        subtext: '点击查看github最新代码',\n        sublink: 'https://github.com/Mying666/myEcTooltip',\n        subtextStyle: {\n            color: '#ccc'\n        },\n        left: 'center',\n        textStyle: {\n            color: '#fff'\n        }\n    },\n    backgroundColor: '#404a59',\n    tooltip: {\n        trigger: 'item',\n        triggerOn: 'click',\n        backgroundColor: 'transparent',\n        alwaysShowContent: true,\n        position(pos) {\n            let position = getPosOrSize('pos', pos)\n            return position\n        },\n        formatter(params, p, a) {\n            canvasAnimation(params)\n            let size = getPosOrSize('size')\n            let tooltipDom = `<canvas id=\"tCanvas\" width=\"${size.width}\" height=\"${size.height}\">123</canvas>`\n            return tooltipDom\n        }\n    },\n    legend: {\n        show: false\n    },\n    geo: {\n        map: 'china',\n        label: {\n            emphasis: {\n                show: false\n            }\n        },\n        roam: false,\n        itemStyle: {\n            normal: {\n                areaColor: '#323c48',\n                borderColor: '#111'\n            },\n            emphasis: {\n                areaColor: '#2a333d'\n            }\n        }\n    },\n    series: [{\n        name: 'Tooltip Test',\n        type: 'effectScatter',\n        coordinateSystem: 'geo',\n        data: convertData(data.sort(function(a, b) {\n            return b.value - a.value;\n        }).slice(0, 50)),\n        symbolSize: function(val) {\n            return val[2] / 5;\n        },\n        showEffectOn: 'render',\n        rippleEffect: {\n            brushType: 'stroke'\n        },\n        hoverAnimation: true,\n        label: {\n            normal: {\n                formatter: '{b}',\n                position: 'right',\n                show: true\n            }\n        },\n        itemStyle: {\n            normal: {\n                color: '#f4e925',\n                shadowBlur: 10,\n                shadowColor: '#333'\n            }\n        },\n        zlevel: 1\n    }]\n};\n\nconst canvasAnimation = params => {\n    setTimeout(function() {\n        config.text.text = `地点：${params.name}\\n数量：${params.value[2]}`\n        new myTooltip('tCanvas', config)\n    }, 0);\n}\n\n// 计算tooltip位置\nconst getPosOrSize = (type, point) => {\n    let x1 = config.L1.long * Math.sin(Math.PI / 4)\n    let width = x1 + config.L2.long + config.text.width,\n        height = x1 + config.text.height / 2\n    if (type === 'size') {\n        config.width = width\n        config.height = height\n        return {\n            width,\n            height\n        }\n    } else {\n        let box = document.getElementById(config.ecBoxId),\n            bw = box.offsetWidth,\n            bh = box.offsetHeight,\n            x = point[0],\n            y = point[1]\n        left = false\n        if (x + width >= bw / 1.2) {\n            x = x - width - 5\n            left = true\n        }\n        if (priority === 'top') {\n            // L1向上\n            top = true\n            y = y - height - 5\n            if (y <= 0) {\n                y = point[1]\n                top = false\n            }\n            return [x, y]\n        } else {\n            top = false\n            if (y + height >= bh) {\n                y = y - height - 5\n                top = true\n            }\n            return [x, y]\n        }\n    }\n}\n\nclass myTooltip {\n    constructor(id, config) {\n        this.config = config\n        this.totalTime = 0\n        this.stage = new createjs.Stage(id)\n        this.timeline = new TimelineMax({\n            repeat: 0\n        })\n        this.g = new createjs.Graphics()\n        this.lineShape = new createjs.Shape(this.g)\n        this.textShape = new createjs.Shape()\n        this.stage.addChild(this.lineShape, this.textShape)\n        this.init()\n        this.begin()\n        this.update()\n    }\n    init() {\n        this.start = [0, 0]\n        if (left) {\n            this.start[0] = this.config.width\n        }\n        if (top) {\n            this.start[1] = this.config.height\n        }\n    }\n    begin() {\n        this.L1()\n        this.L2()\n        this.addText()\n    }\n    L1() {\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {\n                s: 0\n            },\n            x = c.L1.long * Math.sin(Math.PI / 4)\n        if (left) {\n            if (top) {\n                this.L1End = [me.start[0] - x, me.start[1] - x]\n            } else {\n                this.L1End = [me.start[0] - x, me.start[1] + x]\n            }\n        } else {\n            if (top) {\n                this.L1End = [x, me.start[1] - x]\n            } else {\n                this.L1End = [x, x]\n            }\n        }\n\n        tl.to(scale, c.L1.time, {\n            s: 1,\n            onUpdate() {\n                let s = scale.s\n                if (left) {\n                    if (top) {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(me.start[0] - x * s, me.start[1] - x * s)\n                    } else {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(me.start[0] - x * s, me.start[1] + x * s)\n                    }\n                } else {\n                    if (top) {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(x * s, me.start[1] - x * s)\n                    } else {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(x * s, x * s)\n                    }\n                }\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n        this.totalTime += c.L1.time\n    }\n    L2() {\n        // 只跟左右有关，只判断left\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {\n            s: 0\n        }\n        tl.to(scale, c.L2.time, {\n            s: 1,\n            onUpdate() {\n                let s = scale.s\n                if (left) {\n                    me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(me.L1End[0] - c.L2.long * s, me.L1End[1])\n                } else {\n                    me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(me.L1End[0] + c.L2.long * s, me.L1End[1])\n                }\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n        this.totalTime += c.L2.time\n    }\n    addText() {\n        // text框只与L2end有关，只需判断left即可，top不影响\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {\n                s: 0\n            },\n            L2End = [me.L1End[0] + c.L2.long, me.L1End[1]]\n        if (left) {\n            L2End = [me.L1End[0] - c.L2.long, me.L1End[1]]\n        }\n        tl.to(scale, c.text.time, {\n            s: 1,\n            onStart() {\n                let x = 0,\n                    y = 0\n                if (left) {\n                    x = L2End[0] - c.text.width\n                } else {\n                    x = L2End[0]\n                }\n                me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(...L2End)\n                me.text = new createjs.Text(c.text.text, c.text.font, c.text.color)\n                me.text.alpha = 0\n                me.text.lineHeight = c.text.lineHeight\n                me.text.x = x + c.text.padding[0]\n                me.text.y = L2End[1] - c.text.height / 2 + c.text.padding[1]\n                me.stage.addChild(me.text)\n                me.textShape.graphics.c().f(c.text.backgroundColor).rr(x, L2End[1] - c.text.height / 2, c.text.width, c.text.height, 5)\n                me.textShape.alpha = 0\n                me.update()\n            },\n            onUpdate() {\n                me.text.alpha = scale.s\n                me.textShape.alpha = scale.s\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n    }\n    update() {\n        this.stage.update()\n    }\n}\n\nlet EC = echarts.getInstanceByDom(document.getElementById(\"chart-panel\"))\n\nvar index = 0\n// setInterval(_ => {\n//     EC.dispatchAction({\n//         type: 'showTip',\n//         seriesIndex: 0,\n//         dataIndex: index\n//     })\n//     index++\n//     if (index >= data.length) {\n//         index = 0\n//     }\n// }, 3000)\nwindow.addEventListener('resize', e => {\n    let tCanvas = document.getElementById('tCanvas')\n    if (tCanvas) {\n        tCanvas.style.display = 'none'\n    }\n})","html":"","externalScripts":"http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js,/dep/echarts/map/js/world.js","updaterUID":"bd-2402949443","theme":"","layout":"","viewCount":1028,"userName":"经***4","commentCount":0,"starCount":4,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xHyq1a4-d-.png?v=1550218399149","isCustomThumbnail":0,"builtinTags":["category-work","geo","legend","series-effectScatter","title","tooltip"],"customTags":[],"updaterUserName":"包***5"}}