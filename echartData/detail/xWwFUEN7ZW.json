{"status":0,"data":{"cid":"xWwFUEN7ZW","authorUid":"obd-oFyx82payjJGGrtC9sx3_5xN0voCf5R","authorUserName":"小***y","title":"xxx产品发布计划","description":"#项目进度图，#计划实际对比，#标线标域","latestVersion":16,"alwaysLatest":0,"createTime":"2021-05-25T03:40:51.000Z","lastUpdateTime":"2021-11-03T04:00:21.000Z","auth":1,"uid":"obd-oFyx82payjJGGrtC9sx3_5xN0voCf5R","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":16,"parentVersion":15,"echartsVersion":"4.9.0","versionCreateTime":"2021-11-03T04:00:21.000Z","code":"//圆圈和三角图标\nvar BLUEC = '/asset/get/s/data-1621845955864-3axUFqMm9.png';\nvar BLUET = '/asset/get/s/data-1621845950102-7gUZRwc_3.png';\nvar ORANGEC = '/asset/get/s/data-1621845936770-R15Ud_DLZ.png';\nvar ORANGET = '/asset/get/s/data-1621845872303-YqLesHwVD.png';\n\nlet start_ = '2021-01-1 00:00:00',\n end_ = '2021-12-31 00:00:00'; //时间这里是写死固定值，可根据实际需求更改，比如获取当前时间的前三个月及后三个月\nlet allinfo = []; //所有list集合\nlet yAxisData_plant = []; //版本名\nlet chartsdata = [\n //图表数据\n [\n  {\n   product: 'A',\n   list: [\n    {\n     db_version: ' A',\n     pre_package_time: '2021-02-1 00:00:00',\n     pre_release_time: '2021-03-1 00:00:00',\n     release_version: '0',\n     re_package_time: '2021-03-5 00:00:00',\n     re_release_time: '2021-04-2 00:00:00',\n     id: 3,\n     remark: '40',\n    },\n    {\n     db_version: ' A',\n     pre_package_time: '2021-02-8 00:00:00',\n     pre_release_time: '2021-03-2 00:00:00',\n     release_version: '1',\n     re_package_time: '2021-04-1 00:00:00',\n     re_release_time: '2021-04-10 00:00:00',\n     id: 4,\n     remark: '180',\n    },\n    {\n     db_version: ' A',\n     pre_package_time: '2021-06-2 00:00:00',\n     pre_release_time: '2021-06-15 00:00:00',\n     release_version: '1a',\n     re_package_time: '2021-06-18 00:00:00',\n     re_release_time: '2021-07-10 00:00:00',\n     id: 4,\n     remark: 'P1',\n    },\n   ],\n  },\n ],\n [\n  {\n   product: ' B',\n   list: [\n    {\n     db_version: '  B',\n     pre_package_time: '2021-03-5 00:00:00',\n     pre_release_time: '2021-03-20 00:00:00',\n     release_version: '0',\n     re_package_time: '2021-03-10 00:00:00',\n     re_release_time: '2021-03-22 00:00:00',\n     id: 3,\n     remark: '20',\n    },\n   ],\n  },\n ],\n [\n  {\n   product: 'C',\n   list: [\n    {\n     db_version: 'C ',\n     pre_package_time: '2021-06-23 00:00:00',\n     pre_release_time: '2021-07-07 00:00:00',\n     release_version: '1',\n     re_package_time: '2021-06-23 00:00:00',\n     re_release_time: '2021-07-13 00:00:00',\n     id: 9,\n     remark: '0',\n    },\n   ],\n  },\n ],\n [\n  {\n   product: 'D ',\n   list: [\n    {\n     db_version: 'D ',\n     pre_package_time: '2020-12-2 00:00:00',\n     pre_release_time: '2020-12-22 00:00:00',\n     release_version: '0',\n     re_release_time: '2020-12-2 00:00:00',\n     re_package_time: '2020-12-22 00:00:00',\n     id: 14,\n     remark: '90',\n    },\n   ],\n  },\n ],\n];\n\nlet seriesData = [],\n RealData = [],\n newBase = [],\n newBlock = []; //计划时间，实际时间，标线，时间区域\n//newBase.push({\n//\t\t\t\t'name': 'Schedule',\n//\t\t\t\t'xAxis': new Date(('2021-06-18 00:00:00').replace(/-/g,'/')).getTime(),\n//\t\t\t\t'lineStyle':{'color':'#f72b35'},\n//\t\t\t\t'label': {\n//\t\t\t\t\t'normal': {\n//\t\t\t\t\t\t'position':'start',\n//\t\t\t\t\t\t'fontWeight': 'bold',\n//\t\t\t\t\t\t'padding': 25,\n//\t\t\t\t\t\t'fontSize': 16,\n//\t\t\t\t\t\t'fontFamily': 'Microsoft YaHei',\n//\t\t\t\t\t\t'formatter': function(params) {\n//\t\t\t\t\t\t\treturn params.name;\n//\t\t\t\t\t\t},\n//\t\t\t\t\t},\n//\t\t\t\t},\n//\t\t\t});\nnewBlock.push([\n {\n  name: '元旦',\n  xAxis: new Date('2021-01-01 00:00:00'.replace(/-/g, '/')).getTime(),\n  label: {\n   fontWeight: 'bold',\n   position: 'top',\n   distance: -2,\n   fontSize: 14,\n   color: '#a8071a',\n   fontFamily: 'Microsoft YaHei',\n  },\n },\n {\n  xAxis: new Date('2021-01-3 23:59:00'.replace(/-/g, '/')).getTime(),\n },\n]);\nnewBlock.push([\n {\n  name: '春節',\n  xAxis: new Date('2021-02-06 00:00:00'.replace(/-/g, '/')).getTime(),\n  label: {\n   fontWeight: 'bold',\n   position: 'top',\n   distance: -2,\n   fontSize: 14,\n   color: '#a8071a',\n   fontFamily: 'Microsoft YaHei',\n  },\n },\n {\n  xAxis: new Date('2021-02-21 23:59:00'.replace(/-/g, '/')).getTime(),\n },\n]);\nnewBlock.push([\n {\n  name: '清明節',\n  xAxis: new Date('2021-04-03 00:00:00'.replace(/-/g, '/')).getTime(),\n  label: {\n   fontWeight: 'bold',\n   position: 'top',\n   distance: -2,\n   fontSize: 14,\n   color: '#a8071a',\n   fontFamily: 'Microsoft YaHei',\n  },\n },\n {\n  xAxis: new Date('2021-04-5 23:59:00'.replace(/-/g, '/')).getTime(),\n },\n]);\nnewBlock.push([\n {\n  name: '勞動節',\n  xAxis: new Date('2021-05-01 00:00:00'.replace(/-/g, '/')).getTime(),\n  label: {\n   fontWeight: 'bold',\n   position: 'top',\n   distance: -2,\n   fontSize: 14,\n   color: '#a8071a',\n   fontFamily: 'Microsoft YaHei',\n  },\n },\n {\n  xAxis: new Date('2021-05-3 23:59:00'.replace(/-/g, '/')).getTime(),\n },\n]);\nnewBlock.push([\n {\n  name: '端午節',\n  xAxis: new Date('2021-06-12 00:00:00'.replace(/-/g, '/')).getTime(),\n  label: {\n   fontWeight: 'bold',\n   position: 'top',\n   distance: -2,\n   fontSize: 14,\n   color: '#a8071a',\n   fontFamily: 'Microsoft YaHei',\n  },\n },\n {\n  xAxis: new Date('2021-06-14 23:59:00'.replace(/-/g, '/')).getTime(),\n },\n]);\nnewBlock.push([\n {\n  name: '中秋節',\n  xAxis: new Date('2021-09-19 00:00:00'.replace(/-/g, '/')).getTime(),\n  label: {\n   fontWeight: 'bold',\n   position: 'top',\n   distance: -2,\n   fontSize: 14,\n   color: '#a8071a',\n   fontFamily: 'Microsoft YaHei',\n  },\n },\n {\n  xAxis: new Date('2021-09-21 23:59:00'.replace(/-/g, '/')).getTime(),\n },\n]);\nnewBlock.push([\n {\n  name: '國慶節',\n  xAxis: new Date('2021-10-1 00:00:00'.replace(/-/g, '/')).getTime(),\n  label: {\n   fontWeight: 'bold',\n   position: 'top',\n   distance: -2,\n   fontSize: 14,\n   color: '#a8071a',\n   fontFamily: 'Microsoft YaHei',\n  },\n },\n {\n  xAxis: new Date('2021-10-5 23:59:00'.replace(/-/g, '/')).getTime(),\n },\n]);\nchartsdata.length > 0\n ? chartsdata.map((item, index) => {\n    yAxisData_plant.push(item[0].product);\n    item[0].list.length > 0\n     ? item[0].list.map((listItem) => {\n        allinfo.push(listItem);\n        let startTime = new Date(\n         listItem.pre_package_time.replace('00:00:00', '12:00:00').replace(/-/g, '/')\n        ).getTime();\n        let endTime = new Date(listItem.pre_release_time.replace('00:00:00', '12:00:00').replace(/-/g, '/')).getTime();\n        let realstartTime = listItem.re_package_time\n         ? new Date(listItem.re_package_time.replace('00:00:00', '12:00:00').replace(/-/g, '/')).getTime()\n         : '';\n        let realendTime = listItem.re_release_time\n         ? new Date(listItem.re_release_time.replace('00:00:00', '12:00:00').replace(/-/g, '/')).getTime()\n         : '';\n        seriesData.push({\n         //计划时间\n         name: listItem.release_version,\n         value: [index, startTime, endTime],\n         itemStyle: {\n          normal: {\n           color: '#ff833b',\n          },\n         },\n        });\n        RealData.push({\n         //实际时间\n         name: listItem.release_version,\n         value: [index, realstartTime, realendTime],\n         itemStyle: {\n          normal: {\n           color: '#2194ff',\n          },\n         },\n        });\n       })\n     : null;\n   })\n : null;\n\noption = {\n title: {\n  left: 'center',\n  text: 'Overall Schedule',\n },\n color: ['#ff833b', '#2194ff'],\n legend: {\n  data: ['计划时间', '实际时间'],\n  tooltip: {\n   show: true,\n  },\n  top: 30,\n  itemWidth: 15,\n  itemHeight: 15,\n  textStyle: {\n   fontSize: 16,\n   fontFamily: 'Microsoft YaHei',\n  },\n  itemGap: 120,\n  padding: 5,\n },\n tooltip: {\n  formatter: function (params) {\n   if (params.componentType != 'markLine' && params.componentType != 'markArea') {\n    var res = params.name + '<br/>';\n    res +=\n     '计划冻结时间：' +\n     allinfo[params.dataIndex].pre_package_time.split(' ')[0].replace(/-/g, '/') +\n     '&nbsp;' +\n     '<br/>' +\n     '计划发布时间：' +\n     allinfo[params.dataIndex].pre_release_time.split(' ')[0].replace(/-/g, '/') +\n     '&nbsp;' +\n     '<br/>' +\n     '实际冻结时间：' +\n     allinfo[params.dataIndex].re_package_time.split(' ')[0].replace(/-/g, '/') +\n     '&nbsp;' +\n     '<br/>' +\n     '实际发布时间：' +\n     allinfo[params.dataIndex].re_release_time.split(' ')[0].replace(/-/g, '/') +\n     '&nbsp;';\n    return res;\n   } else if (params.componentType != 'markArea') {\n    let time = new Date(params.value);\n    let texts = [time.getFullYear(), time.getMonth() + 1, time.getDate()].join('/');\n    var str = '时间：' + `${texts}`;\n    return str;\n    r;\n   } else {\n    let index = params.dataIndex; //标记区域 下标\n    var str = '封网时间：' + '2021-05-05 ~ 2021-05-25';\n    return str;\n   }\n  },\n  textStyle: {\n   align: 'left',\n  },\n },\n grid: {\n  top: 100,\n  left: 80,\n  right: 38,\n  bottom: 10,\n  height: 545,\n },\n xAxis: {\n  type: 'time',\n  min: new Date(start_).getTime(), //x轴刻度最小值\n  max: new Date(end_).getTime(), //x轴刻度最大值\n  interval: (new Date(end_).getTime() - new Date(start_).getTime()) / 12, //x轴 强制设置坐标轴分割间隔\n  position: 'top', //x 轴的位置\n  splitNumber: 12, //坐标轴的分割段数\n  axisLabel: {\n   //坐标轴名称显示 样式及文案\n   show: true,\n   textStyle: { color: '#000' },\n   interval: 0,\n   margin: 15,\n   fontSize: 14,\n   formatter: function (value, index) {\n    let date = new Date(value);\n    let texts = [date.getFullYear(), date.getMonth() + 1, date.getDate()].join('/');\n    return texts;\n   },\n  },\n  axisLine: { show: true }, //是否显示坐标轴轴线。\n  splitLine: {\n   //坐标轴在 grid 区域中的分隔线\n   show: true, //是否显示分隔线\n   lineStyle: { color: 'rgba(0,0,0,0.2)', type: 'dashed' }, //样式：网格线\n  },\n },\n yAxis: {\n  axisLine: {\n   onZero: false,\n   show: true, //是否显示坐标轴轴线。\n  },\n  axisLabel: {\n   show: true,\n   textStyle: { color: '#000' },\n   fontSize: 14,\n  },\n  splitLine: {\n   show: true,\n   lineStyle: { color: 'rgba(0,0,0,0.2)', type: 'dashed' },\n  },\n  inverse: true, //是否是反向坐标轴\n  data: yAxisData_plant,\n },\n series: [\n  {\n   name: '计划时间',\n   type: 'custom',\n   label: {\n    normal: {\n     show: true,\n     position: 'bottom',\n     padding: [18, 0, 0, 0],\n     formatter: function (value) {\n      let val = allinfo[value.dataIndex].remark ? allinfo[value.dataIndex].remark.split(',').join('\\n') : '';\n      let texts = [`{fragment1|${val}}`].join('\\n');\n      return texts;\n     },\n     color: '#000',\n     fontSize: 11,\n     rich: {\n      fragment1: {\n       lineHeight: 14,\n       align: 'center',\n       color: '#000',\n      },\n     },\n    },\n   },\n   renderItem: function (params, api) {\n    let categoryIndex = api.value(0);\n    let start = api.coord([api.value(1), categoryIndex]);\n    let end = api.coord([api.value(2), categoryIndex]);\n    let height = api.size([0, 1])[1] * 0.03;\n    let rectShape = echarts.graphic.clipRectByRect(\n     {\n      x: start[0],\n      y: start[1] - 15,\n      width: end[0] - start[0],\n      height: 4,\n     },\n     {\n      x: params.coordSys.x,\n      y: params.coordSys.y,\n      width: params.coordSys.width,\n      height: params.coordSys.height,\n     }\n    );\n\n    const result = rectShape && {\n     type: 'rect',\n     shape: rectShape,\n     style: api.style(),\n     styleEmphasis: {\n      textStroke: null,\n     },\n    };\n    return result;\n   },\n   encode: {\n    x: [1, 2],\n    y: 0,\n   },\n   data: seriesData,\n  },\n  {\n   name: '计划时间',\n   type: 'custom',\n   label: {\n    normal: {\n     show: true,\n     position: 'top',\n     padding: [0, 0, 10, 0],\n     formatter: function (value, index) {\n      let texts = `{term|${value.name}}`;\n      return texts;\n     },\n     color: '#000',\n     rich: {\n      term: {\n       align: 'center',\n       fontSize: 16,\n       color: 'rgb(199,86,83)',\n      },\n     },\n    },\n   },\n   renderItem: function (params, api) {\n    let categoryIndex = api.value(0);\n    let start = api.coord([api.value(1), categoryIndex]);\n    let end = api.coord([api.value(2), categoryIndex]);\n    let height = api.size([0, 1])[1] * 0.03;\n    let rectShape = echarts.graphic.clipRectByRect(\n     {\n      x: start[0],\n      y: start[1] - 15,\n      width: end[0] - start[0],\n      height: 4,\n     },\n     {\n      x: params.coordSys.x,\n      y: params.coordSys.y,\n      width: params.coordSys.width,\n      height: params.coordSys.height,\n     }\n    );\n\n    const result = rectShape && {\n     type: 'rect',\n     shape: rectShape,\n     style: api.style(),\n     styleEmphasis: {\n      textStroke: null,\n     },\n    };\n    return result;\n   },\n   encode: {\n    x: [1, 2],\n    y: 0,\n   },\n   data: seriesData,\n   markLine: {\n    data: newBase,\n   },\n   markArea: {\n    itemStyle: {\n     color: 'rgba(200, 200, 200, 0.4)',\n    },\n    data: newBlock, //封网时间\n   },\n  },\n  {\n   name: '计划时间', //这里可能有人会比较困惑 怎么有多个计划时间  这个是我为了在图中显示对应的时间及一些备注信息而添加的\n   type: 'custom', //因为没有找到对应的好一点的方法解决  而用了这种形式\n   label: {\n    normal: {\n     show: true,\n     position: 'left',\n     padding: [0, -5, 0, 0],\n     formatter: function (value) {\n      let date = new Date(value.data.value[1]);\n      let texta = [date.getMonth() + 1, date.getDate()].join('/');\n      let newstr = `{fragment1|${texta}}{one|}`;\n      return newstr;\n     },\n     rich: {\n      fragment1: {\n       color: '#000',\n       fontSize: 10,\n       padding: [20, -25, 0, 0],\n      },\n      one: {\n       fontSize: 8,\n       backgroundColor: {\n        image: ORANGET,\n       },\n      },\n     },\n    },\n   },\n   renderItem: function (params, api) {\n    let categoryIndex = api.value(0);\n    let start = api.coord([api.value(1), categoryIndex]);\n    let end = api.coord([api.value(2), categoryIndex]);\n    let height = api.size([0, 1])[1] * 0.03;\n    let rectShape = echarts.graphic.clipRectByRect(\n     {\n      x: start[0],\n      y: start[1] - 15,\n      width: end[0] - start[0],\n      height: 4,\n     },\n     {\n      x: params.coordSys.x,\n      y: params.coordSys.y,\n      width: params.coordSys.width,\n      height: params.coordSys.height,\n     }\n    );\n\n    const result = rectShape && {\n     type: 'rect',\n     shape: rectShape,\n     style: api.style(),\n     styleEmphasis: {\n      textStroke: null,\n     },\n    };\n    return result;\n   },\n   encode: {\n    x: [1, 2],\n    y: 0,\n   },\n   data: seriesData,\n  },\n  {\n   name: '计划时间',\n   type: 'custom',\n   label: {\n    normal: {\n     show: true,\n     position: 'right',\n     padding: [0, 0, 0, -5],\n     formatter: function (value) {\n      let date_a = new Date(value.data.value[2]);\n      let textb = [date_a.getMonth() + 1, date_a.getDate()].join('/');\n      let newstr = `{one|}{fragment1|${textb}}`;\n      return newstr;\n     },\n     rich: {\n      fragment1: {\n       color: '#000',\n       fontSize: 10,\n       padding: [20, 0, 0, -25],\n      },\n      one: {\n       fontSize: 8,\n       backgroundColor: {\n        image: ORANGEC,\n       },\n      },\n     },\n    },\n   },\n   renderItem: function (params, api) {\n    let categoryIndex = api.value(0);\n    let start = api.coord([api.value(1), categoryIndex]);\n    let end = api.coord([api.value(2), categoryIndex]);\n    let height = api.size([0, 1])[1] * 0.03;\n    let rectShape = echarts.graphic.clipRectByRect(\n     {\n      x: start[0],\n      y: start[1] - 15,\n      width: end[0] - start[0],\n      height: 4,\n     },\n     {\n      x: params.coordSys.x,\n      y: params.coordSys.y,\n      width: params.coordSys.width,\n      height: params.coordSys.height,\n     }\n    );\n\n    const result = rectShape && {\n     type: 'rect',\n     shape: rectShape,\n     style: api.style(),\n     styleEmphasis: {\n      textStroke: null,\n     },\n    };\n    return result;\n   },\n   encode: {\n    x: [1, 2],\n    y: 0,\n   },\n   data: seriesData,\n  },\n  {\n   name: '实际时间',\n   type: 'custom',\n   label: {\n    normal: {\n     show: true,\n     position: 'left',\n     padding: [0, -5, 0, 0],\n     formatter: function (value) {\n      let date = new Date(value.data.value[1]);\n      let texta = [date.getMonth() + 1, date.getDate()].join('/');\n      let newstr = `{fragment1|${texta}}{one|}`;\n      return newstr;\n     },\n     rich: {\n      fragment1: {\n       color: '#000',\n       fontSize: 10,\n       padding: [0, -25, 20, 0],\n      },\n      one: {\n       fontSize: 8,\n       backgroundColor: {\n        image: BLUET,\n       },\n      },\n     },\n    },\n   },\n   renderItem: function (params, api) {\n    let categoryIndex = api.value(0);\n    let start = api.coord([api.value(1), categoryIndex]);\n    let end = api.coord([api.value(2), categoryIndex]);\n    let height = api.size([0, 1])[1] * 0.03;\n    let rectShape = echarts.graphic.clipRectByRect(\n     {\n      x: start[0],\n      y: start[1] - 5,\n      width: end[0] - start[0],\n      height: 4,\n     },\n     {\n      x: params.coordSys.x,\n      y: params.coordSys.y,\n      width: params.coordSys.width,\n      height: params.coordSys.height,\n     }\n    );\n\n    const result = rectShape && {\n     type: 'rect',\n     shape: rectShape,\n     style: api.style(),\n     styleEmphasis: {\n      textStroke: null,\n     },\n    };\n    return result;\n   },\n   encode: {\n    x: [1, 2],\n    y: 0,\n   },\n   data: RealData,\n  },\n  {\n   name: '实际时间',\n   type: 'custom',\n   label: {\n    normal: {\n     show: true,\n     position: 'right',\n     padding: [0, 0, 0, -5],\n     formatter: function (value) {\n      let date_a = new Date(value.data.value[2]);\n      let textb = [date_a.getMonth() + 1, date_a.getDate()].join('/');\n      let newstr = `{one|}{fragment1|${textb}}`;\n      return newstr;\n     },\n     rich: {\n      fragment1: {\n       color: '#000',\n       fontSize: 10,\n       padding: [0, 0, 20, -25],\n      },\n      one: {\n       fontSize: 8,\n       backgroundColor: {\n        image: BLUEC,\n       },\n      },\n     },\n    },\n   },\n   renderItem: function (params, api) {\n    let categoryIndex = api.value(0);\n    let start = api.coord([api.value(1), categoryIndex]);\n    let end = api.coord([api.value(2), categoryIndex]);\n    let height = api.size([0, 1])[1] * 0.03;\n    let rectShape = echarts.graphic.clipRectByRect(\n     {\n      x: start[0],\n      y: start[1] - 5,\n      width: end[0] - start[0],\n      height: 4,\n     },\n     {\n      x: params.coordSys.x,\n      y: params.coordSys.y,\n      width: params.coordSys.width,\n      height: params.coordSys.height,\n     }\n    );\n\n    const result = rectShape && {\n     type: 'rect',\n     shape: rectShape,\n     style: api.style(),\n     styleEmphasis: {\n      textStroke: null,\n     },\n    };\n    return result;\n   },\n   encode: {\n    x: [1, 2],\n    y: 0,\n   },\n   data: RealData,\n  },\n ],\n};\n","html":"","externalScripts":"","updaterUID":"obd-oC-c4ih8TDIIjFlyKsHaTGqTOhbNb3z","theme":"","layout":"","viewCount":0,"userName":"小***y","commentCount":2,"starCount":16,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xWwFUEN7ZW.png?v=1635912021695","isCustomThumbnail":0,"builtinTags":["category-work","grid","legend","markArea","markLine","series-custom","title","tooltip"],"customTags":["graphic","自定义","项目进度"],"updaterUserName":"s***8"}}