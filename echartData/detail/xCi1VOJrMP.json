{"status":0,"data":{"cid":"xCi1VOJrMP","authorUid":"bd-940265080","authorUserName":"hao123hahaha","title":"自定义状态监测图表","description":"绘制方块","latestVersion":1,"alwaysLatest":1,"createTime":"2018-12-20T09:53:22.000Z","lastUpdateTime":"2018-12-20T09:53:22.000Z","auth":2,"uid":"bd-940265080","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"4.2.0","versionCreateTime":"2018-12-20T09:53:22.000Z","code":"let zeroTime = new Date(new Date(new Date().toLocaleDateString()).getTime());\nlet beforeSevenTime = new Date(zeroTime.getTime() - 7 * 24 * 60 * 60 * 1000);\nconst hourOfMs = 3600000;\nlet Chart = {\n    Config: {\n        y_font_color: '#60F194',\n        x_font_color: '#fff',\n        y_line_color: '#184483',\n        x_line_color: '#184483',\n        split_line_color: 'rgba(0,53,115,0.6)'\n    },\n    createRect(row) {\n        let types = [{\n                id: 'running',\n                name: '正在运行',\n                color: '#7FFFCA'\n            }, //一个点数据\n            {\n                id: 'error',\n                name: '发生故障',\n                color: '#FFF59D'\n            },\n            {\n                id: 'stop',\n                name: '已经停止',\n                color: '#FF7790'\n            }\n        ];\n\n        //创建指定类型\n        let typeItem = null;\n        for (let i = 0; i < types.length; i++) {\n            if (types[i].id === row.status) {\n                typeItem = types[i];\n                break;\n            }\n        }\n        let start = row.readTime + row.duration;\n\n        return {\n            name: typeItem.name,\n            value: [\n                row.index,\n                row.readTime,\n                start,\n                row.duration\n            ],\n            itemStyle: {\n                normal: {\n                    color: typeItem.color\n                }\n            }\n        };\n    },\n    categories: ['3#出水泵', '2#出水泵', '1#出水泵', '4#提升泵', '3#提升泵', '2#提升泵', '1#提升泵', '2#细格栅机', '1#细格栅机', '2#粗格栅机', '1#粗格栅机']\n};\nlet datas = [{\n        index: 1,\n        status: \"stop\",\n        duration: hourOfMs * 8,\n        readTime: beforeSevenTime.getTime() + hourOfMs * 3\n    },\n    {\n        index: 1,\n        status: \"stop\",\n        duration: hourOfMs * 8,\n        readTime: beforeSevenTime.getTime() + hourOfMs * 24\n    },\n    {\n        index: 2,\n        status: \"stop\",\n        duration: hourOfMs * 2,\n        readTime: beforeSevenTime.getTime() + hourOfMs * 4\n    },\n    {\n        index: 3,\n        status: \"running\",\n        duration: hourOfMs * 5,\n        readTime: beforeSevenTime.getTime() + hourOfMs * 5\n    },\n    {\n        index: 4,\n        status: \"running\",\n        duration: hourOfMs * 12,\n        readTime: beforeSevenTime.getTime() + hourOfMs * 16\n    },\n    {\n        index: 4,\n        status: \"running\",\n        duration: hourOfMs * 8,\n        readTime: beforeSevenTime.getTime() + hourOfMs * 72\n    },\n    {\n        index: 4,\n        status: \"error\",\n        duration: hourOfMs * 8,\n        readTime: beforeSevenTime.getTime() + hourOfMs * 80\n    },\n];\nlet series_data = [];\ndatas.forEach(row => {\n    let rect = Chart.createRect(row);\n    series_data.push(rect);\n});\n\nconsole.log(series_data);\n\noption = {\n    tooltip: {\n        formatter: function(params) {\n            return params.marker + params.name; // + ': ' + params.value[3] + ' ms';\n        }\n    },\n    grid: {\n        // height: 200,\n        top: '5%',\n        bottom: '15%',\n        right: '5%',\n        left: '13%'\n    },\n    xAxis: {\n        //开始于7天之前\n        min: beforeSevenTime.getTime(),\n        //终止于今天0点\n        max: zeroTime.getTime(),\n        interval: 1000 * 60 * 60 * 12, //间隔是12小时\n        axisLabel: {\n            formatter: function(val, index) {\n                //注意，val就是时间戳,是x轴的范围取值\n                //从0点开始到7天\n                let date = new Date(val);\n                return (date.getMonth() + 1) + \"/\" + date.getDate() + \"\\n\" + date.getHours() + \":\" + date.getMinutes();\n            },\n            textStyle: {\n                color: Chart.Config.x_font_color,\n                fontSize: '70%'\n            }\n        },\n        axisLine: {\n            lineStyle: {\n                color: Chart.Config.x_line_color\n            }\n        },\n        splitLine: {\n            lineStyle: {\n                color: Chart.Config.split_line_color,\n                width: 1,\n                type: 'solid'\n            }\n        }\n    },\n    yAxis: {\n        data: Chart.categories,\n        axisLabel: {\n            textStyle: {\n                color: '#5EF0FE',\n                fontSize: '70%'\n            }\n        },\n        axisLine: {\n            lineStyle: {\n                color: Chart.Config.y_line_color\n            }\n        },\n        splitLine: {\n            show: true,\n            lineStyle: {\n                color: Chart.Config.split_line_color,\n                width: 1,\n                type: 'solid'\n            }\n        }\n    },\n    series: [{\n        type: 'custom',\n        //创建对象,每个data都会调用这个(发现是比较费时间的)\n        renderItem: function(params, api) {\n\n            //分类维度\n            let categoryIndex = api.value(0);\n\n            //转换获取到开始点坐标（x，y）;\n            let start = api.coord([api.value(1), categoryIndex]);\n            //转换获取终止点的坐标\n            let end = api.coord([api.value(2), categoryIndex]);\n\n            //获取一个高度调整值，具体的可以调整\n            let height = api.size([0, 1])[1] * 0.9;\n\n            console.log(api.value);\n            //创建一个方块\n            let rectShape = echarts.graphic.clipRectByRect({\n                x: start[0],\n                y: start[1] - height / 2,\n                width: end[0] - start[0],\n                height: height\n            }, {\n                x: params.coordSys.x,\n                y: params.coordSys.y,\n                width: params.coordSys.width,\n                height: params.coordSys.height\n            });\n\n            return rectShape && {\n                type: 'rect',\n                shape: rectShape,\n                style: api.style()\n            };\n        },\n\n        //此处必须添加，否则方块显示不出来\n        encode: {\n            x: [1, 2],\n            y: 0\n        },\n        //自定义的需要至少放一条数据进去，否则就会出现错误\n        data: series_data\n    }]\n};","html":"","externalScripts":"","updaterUID":"bd-940265080","theme":"dark","layout":"","viewCount":202,"userName":"hao123hahaha","commentCount":0,"starCount":0,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xCi1VOJrMP.png?v=1545299602686","isCustomThumbnail":0,"builtinTags":["category-work","grid","series-custom","tooltip"],"customTags":[],"updaterUserName":"hao123hahaha"}}