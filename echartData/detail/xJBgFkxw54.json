{"status":0,"data":{"cid":"xJBgFkxw54","authorUid":"obd-o2wuH1JuSVuem30pWIo97g5ptrEnEBF","authorUserName":"杨***3","title":"四分之三圆环图","description":"纯原生Javascript和Canvas，借鉴echarts图表的开发思路，实现的四分之三圆环图","latestVersion":1,"alwaysLatest":0,"createTime":"2021-07-07T05:32:18.000Z","lastUpdateTime":"2021-07-07T05:32:18.000Z","auth":2,"uid":"obd-o2wuH1JuSVuem30pWIo97g5ptrEnEBF","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"5.1.2","versionCreateTime":"2021-07-07T05:32:18.000Z","code":"class RingCharts {\n // 构造函数，初始化时调用\n constructor(arg) {\n  this.options = this.deepCopy(this.defaultConfig(), arg);\n  this.parentContainer =\n   typeof this.options.container === 'string' ? document.querySelector(this.options.container) : this.options.container;\n  this.container = document.createElement('div');\n  this.tips = document.createElement('div');\n  // 提示信息样式\n  this.setStyle(this.tips, this.options.tooltip.style);\n  this.canvas = document.createElement('canvas');\n  this.ctx = this.canvas.getContext('2d');\n  // 获取屏幕像素比\n  this.pixelRatio = this.getPixelRatio(this.ctx);\n  this.width = this.parentContainer.offsetWidth;\n  this.height = this.parentContainer.offsetHeight;\n  this.canvas.width = this.width * this.pixelRatio;\n  this.canvas.height = this.height * this.pixelRatio;\n  // 设置最外层环和最内层环的半径\n  this.radius = (this.canvas.width > this.canvas.height ? this.canvas.height : this.canvas.width) / 2;\n  this.maxRadius = this.handleNum(this.options.polar.maxRadius, this.radius);\n  this.minRadius = this.handleNum(this.options.polar.minRadius, this.radius);\n  // 中心点坐标\n  this.center = {\n   x: this.canvas.width / 2,\n   y: this.canvas.height / 2,\n  };\n  // 设置容器及canvas标签样式\n  this.container.style.cssText = this.canvas.style.cssText = `position:relative;width:100%;height:100%;overflow:hidden`;\n  this.container.appendChild(this.canvas);\n  this.parentContainer.appendChild(this.container);\n  this.container.appendChild(this.tips);\n  // 渲染图表的数据集\n  this.resultData = [];\n  if (this.options.tooltip.show) {\n   this.canvas.onmousemove = this.debounce(this.mousemove, 20);\n  }\n  this.resizeTimer = null;\n  this.animateStartTime = null;\n  this.animateTimer = null;\n }\n // 处理百分比小数及数值\n handleNum(num, value) {\n  let returnNum = 0;\n  if (num.toString().indexOf('%') > -1) {\n   returnNum = (num.replace('%', '') / 100) * value;\n  } else if (num > 0 && num <= 1) {\n   returnNum = num * value;\n  } else {\n   returnNum = parseInt(num);\n  }\n  return returnNum;\n }\n // 防抖函数\n debounce(fn, delay) {\n  let timer = null;\n  return (e) => {\n   if (timer !== null) {\n    clearTimeout(timer);\n   }\n   timer = setTimeout(() => {\n    fn.call(this, e);\n   }, delay);\n  };\n }\n // 鼠标移动事件\n mousemove(e) {\n  this.draw(this.resultData, {\n   callBack: null,\n   type: 'mousemove',\n   x: e.offsetX,\n   y: e.offsetY,\n  });\n }\n // 点击事件\n click(callBack) {\n  this.canvas.onclick = (e) => {\n   this.draw(this.resultData, {\n    callBack: callBack,\n    type: 'click',\n    x: e.offsetX,\n    y: e.offsetY,\n   });\n  };\n }\n // 窗口resize\n resize() {\n  // 防抖处理\n  if (this.resizeTimer) {\n   clearTimeout(this.resizeTimer);\n   this.resizeTimer = null;\n  }\n  this.resizeTimer = setTimeout(() => {\n   this.width = this.parentContainer.offsetWidth;\n   this.height = this.parentContainer.offsetHeight;\n   this.canvas.width = this.width * this.pixelRatio;\n   this.canvas.height = this.height * this.pixelRatio;\n   this.radius = (this.canvas.width > this.canvas.height ? this.canvas.height : this.canvas.width) / 2;\n   this.maxRadius = this.handleNum(this.options.polar.maxRadius, this.radius);\n   this.minRadius = this.handleNum(this.options.polar.minRadius, this.radius);\n   this.center = {\n    x: this.canvas.width / 2,\n    y: this.canvas.height / 2,\n   };\n   this.draw(this.resultData);\n  }, 20);\n }\n // 批量设置样式\n setStyle(obj, sty) {\n  for (let key in sty) {\n   obj.style[key] = sty[key];\n  }\n }\n // 深拷贝\n deepCopy(result, obj) {\n  for (var key in obj) {\n   if (obj.hasOwnProperty(key)) {\n    if (typeof obj[key] === 'object' && result[key]) {\n     this.deepCopy(result[key], obj[key]);\n    } else {\n     result[key] = obj[key];\n    }\n   }\n  }\n  return result;\n }\n // 默认图表配置项\n defaultConfig() {\n  return {\n   color: ['#18b78e', '#6c77fd', '#ffbe75', '#ff647c', '#01b3ee', '#164bcd'],\n   polar: {\n    maxRadius: '90%',\n    minRadius: '10%',\n    center: ['center', 'center'],\n    strokeBackgroundColor: '#031f3e',\n    strokeBackgroundWidth: 14,\n    strokeWidth: 14,\n    strokeColor: '#6f78cc',\n    lineCap: 'round',\n   },\n   xAxis: {\n    marker: {\n     show: true,\n     symbolSize: 10,\n     offsetX: 40,\n    },\n    axisLabel: {\n     show: true,\n     offsetX: 70,\n     font: '24px Microsoft YaHei',\n     color: '#00b2f6',\n     align: 'left',\n     verticalAlign: 'middle',\n     formatter: function (param) {\n      return param.name;\n     },\n    },\n   },\n   animation: {\n    show: false,\n    duration: 800,\n   },\n   desc: {\n    show: true,\n    offsetCenterY: 0,\n    font: '24px Microsoft YaHei',\n    color: '#000',\n    align: 'center',\n    verticalAlign: 'middle',\n    formatter: function (param) {\n     return param.value + param.unit;\n    },\n   },\n   tooltip: {\n    style: {\n     position: 'absolute',\n     display: 'none',\n     whiteSpace: 'nowrap',\n     zIndex: '9999999',\n     transition: 'left 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s, top 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s',\n     backgroundColor: 'rgba(50, 50, 50, 0.7)',\n     borderRadius: '4px',\n     border: '0px solid rgb(51, 51, 51)',\n     color: 'rgb(255, 255, 255)',\n     font: '20px / 30px Microsoft YaHei',\n     padding: '5px',\n     left: '0px',\n     top: '0px',\n     pointerEvents: 'none',\n    },\n    markerTemplate:\n     '<span style=\"display: inline-block;width:14px;height: 14px;border-radius: 50%;margin-right: 4px;background-color: #\"></span>',\n    show: true,\n    formatter: function (param) {\n     return `${param.marker}${param.data.name}：${param.data.value}`;\n    },\n   },\n  };\n }\n // 获取屏幕的像素比\n getPixelRatio(context) {\n  var backingStroe =\n   context.backingStorePixelRatio ||\n   context.webkitBackingStorePixelRatio ||\n   context.mozBackingStorePixelRatio ||\n   context.msBackingStorePixelRatio ||\n   context.oBackingStorePixelRatio ||\n   1;\n  return (window.devicePixelRatio || 1) / backingStroe;\n }\n // 绘制图表\n draw(resultData, arg) {\n  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  if (!resultData) return;\n  this.resultData = resultData;\n  let flagArr = [];\n  let gap = (this.maxRadius - this.minRadius) / resultData.length;\n  let data = resultData.map((item) => item.value);\n  let maxValue = Math.max(...data) * 1.2;\n  let percent = 1;\n  if (!arg && this.options.animation.show) {\n   if (!this.animateStartTime) {\n    percent = 0;\n    this.animateStartTime = new Date();\n   } else {\n    percent = (new Date() - this.animateStartTime) / this.options.animation.duration;\n   }\n\n   if (percent >= 1) {\n    percent = 1;\n    this.animateStartTime = null;\n    window.cancelAnimationFrame(this.animateTimer);\n    this.animateTimer = null;\n   } else {\n    this.animateTimer = window.requestAnimationFrame(() => {\n     this.draw(this.resultData);\n    });\n   }\n  }\n\n  for (var i = 0; i < data.length; i++) {\n   let radius = this.maxRadius - i * gap - this.options.polar.strokeWidth / 2;\n   this.drawArc({\n    deg: 0,\n    stroke: this.options.polar.strokeBackgroundColor,\n    strokeWidth: this.options.polar.strokeBackgroundWidth,\n    radius: radius,\n    lineCap: this.options.polar.lineCap,\n   });\n   flagArr.push(\n    this.drawArc(\n     {\n      deg: ((1 - (data[i] / maxValue) * percent) * Math.PI * 3) / 2,\n      stroke: this.options.color[i % this.options.color.length],\n      strokeWidth: this.options.polar.strokeWidth,\n      radius: radius,\n      lineCap: this.options.polar.lineCap,\n     },\n     arg\n    )\n   );\n   if (this.options.xAxis.marker.show) {\n    this.drawCircle({\n     x: this.handleNum(this.options.xAxis.marker.offsetX, this.radius),\n     y: radius,\n     fillColor: this.options.color[i % this.options.color.length],\n     symbolSize: this.options.xAxis.marker.symbolSize,\n     centerX: this.center.x,\n     centerY: this.center.y,\n    });\n   }\n   if (this.options.xAxis.axisLabel.show) {\n    this.drawText({\n     x: this.handleNum(this.options.xAxis.axisLabel.offsetX, this.radius),\n     y: radius,\n     fillColor:\n      this.options.xAxis.axisLabel.color == 'auto'\n       ? this.options.color[i % this.options.color.length]\n       : this.options.xAxis.axisLabel.color,\n     font: this.options.xAxis.axisLabel.font,\n     text: this.options.xAxis.axisLabel.formatter(resultData[i]),\n     align: this.options.xAxis.axisLabel.align,\n     verticalAlign: this.options.xAxis.axisLabel.verticalAlign,\n     centerX: this.center.x,\n     centerY: this.center.y,\n    });\n   }\n  }\n  if (arg) {\n   if (flagArr.some((item) => item === true)) {\n    let index = flagArr.lastIndexOf(true);\n    let color = this.options.color[index % this.options.color.length];\n    this.tips.innerHTML = this.options.tooltip.formatter({\n     marker: this.options.tooltip.markerTemplate.replace('#', color),\n     color: color,\n     data: resultData[index],\n    });\n    let tipsPosX = arg.x + 20;\n    let tipsPosY = arg.y + 20;\n    if (arg.x + this.tips.offsetWidth + 20 > this.width) {\n     tipsPosX = arg.x - 20 - this.tips.offsetWidth;\n    }\n    if (arg.y + this.tips.offsetHeight + 20 > this.height) {\n     tipsPosY = arg.y - 20 - this.tips.offsetHeight;\n    }\n    this.tips.style.left = `${tipsPosX}px`;\n    this.tips.style.top = `${tipsPosY}px`;\n    this.tips.style.display = 'block';\n    this.container.style.cursor = 'pointer';\n    if (arg.callBack) {\n     arg.callBack(resultData[index]);\n    }\n   } else {\n    this.container.style.cursor = 'default';\n    this.tips.style.display = 'none';\n   }\n  }\n }\n // 绘制圆弧\n drawArc(arg, arg2) {\n  let isInStroke = false;\n  this.ctx.beginPath();\n  this.ctx.arc(this.center.x, this.center.y, arg.radius, (Math.PI * 3) / 2, arg.deg, true);\n  this.ctx.lineCap = arg.lineCap;\n  this.ctx.strokeStyle = arg.stroke;\n  this.ctx.lineWidth = arg.strokeWidth;\n  this.ctx.stroke();\n  if (arg2 && this.ctx.isPointInStroke(arg2.x * this.pixelRatio, arg2.y * this.pixelRatio)) {\n   isInStroke = true;\n  }\n  return isInStroke;\n }\n // 绘制文字\n drawText(arg) {\n  this.ctx.save();\n  this.ctx.beginPath();\n  this.ctx.translate(arg.centerX, arg.centerY);\n  this.ctx.font = arg.font;\n  this.ctx.fillStyle = arg.fillColor;\n  this.ctx.textAlign = arg.align;\n  this.ctx.textBaseline = arg.verticalAlign;\n  this.ctx.fillText(arg.text, arg.x, -arg.y);\n  this.ctx.restore();\n }\n // 绘制圆点\n drawCircle(arg) {\n  this.ctx.save();\n  this.ctx.beginPath();\n  this.ctx.translate(arg.centerX, arg.centerY);\n  this.ctx.arc(arg.x, -arg.y, arg.symbolSize, 0, Math.PI * 2, false);\n  this.ctx.fillStyle = arg.fillColor;\n  this.ctx.fill();\n  this.ctx.restore();\n }\n}\n\n// 将图表选择一个合适的位置放置\nlet domObj = document.createElement('div');\ndomObj.style.cssText = 'position: absolute;left: 0;top: 0;width: 100%;height: 100%;z-index: 99;background-color: #000;';\ndocument.getElementById('chart-panel').appendChild(domObj);\n\n// 创建圆环图实例\nvar ringCharts = new RingCharts({\n container: domObj,\n animation: {\n  show: true,\n },\n});\n// 触发点击图表的回调函数\nringCharts.click(function (item) {\n console.log(item);\n});\n\n// 设置对应的数据\nringCharts.draw([\n {\n  name: '类目名称一',\n  value: 69,\n  unit: '个',\n },\n {\n  name: '类目名称二',\n  value: 32,\n  unit: '个',\n },\n {\n  name: '类目名称三',\n  value: 11,\n  unit: '个',\n },\n {\n  name: '类目名称四',\n  value: 100,\n  unit: '个',\n },\n {\n  name: '类目名称五',\n  value: 88,\n  unit: '个',\n },\n]);\n// 监听窗口resize事件\nwindow.addEventListener('resize', function () {\n ringCharts.resize();\n});\n","html":"","externalScripts":"","updaterUID":"obd-o2wuH1JuSVuem30pWIo97g5ptrEnEBF","theme":"","layout":"","viewCount":0,"userName":"杨***3","commentCount":0,"starCount":7,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xJBgFkxw54.png?v=1625635938791","isCustomThumbnail":0,"builtinTags":["category-work"],"customTags":["Canvas","原生Javascript","四分之三圆环","圆环","案例"],"updaterUserName":"杨***3"}}