{"status":0,"data":{"cid":"xpYp1idFIS","authorUid":"bd-1847551832","authorUserName":"s***0","title":"基本曲线方程","description":"","latestVersion":7,"alwaysLatest":1,"createTime":"2020-05-17T09:40:58.000Z","lastUpdateTime":"2020-05-17T09:40:58.000Z","auth":2,"uid":"bd-1847551832","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":7,"parentVersion":6,"echartsVersion":"4.7.0","versionCreateTime":"2020-05-17T11:08:58.000Z","code":"var funcs = {\n    ['1 幂函数：y=x^a,a=2']: function (k) {\n        const len = k===1? 30 : Math.round(k * 30 % 30)\n        return [len, len * len];\n    },\n    ['2 指数函数：y=a^x,a=2']: function (k) {\n        const len = k===1? 30 : Math.round(k * 30 % 30)\n        const a = 2\n        let ret = a\n        for (let i = 0; i < len; i++) {\n            ret *= a        \n        }\n        return [len, ret]\n    },\n    ['3 对数函数：y=logax,a=10']: function (k) {\n        const len = k===1? 31 : Math.round(k * 30 % 30) + 1\n        const a = 10\n        let ret = Math.log(len)\n        return [len-1, ret]\n    },\n    ['4.1 三角函数-正弦：y=sinx']: function (k) {\n        const angle = k * 2 * Math.PI\n        return [angle, Math.sin(angle)]\n    },\n    ['4.2 三角函数-余弦：y=cosx']: function (k) {\n        const angle = k * 2 * Math.PI\n        return [angle, Math.cos(angle)]\n    },\n    ['4.3 三角函数-正切：y=tanx']: function (k) {\n        const angle = k * 2 * Math.PI\n        return [angle, Math.tan(angle)]\n    },\n    ['5.1 反三角函数-反正弦：y=arcsinx']: function (k) {\n        const x = k * 2 - 1\n        return [x, Math.asin(x)]\n    },\n    ['5.2 反三角函数-反余弦：y=arccosx']: function (k) {\n        const x = k * 2 - 1\n        return [x, Math.acos(x)]\n    },\n    ['5.3 反三角函数-反正切：y=arctanx']: function (k) {\n        const x = k * 2 - 1\n        return [x, Math.atan(x)]\n    },\n    ['6 常数：y=a']: function (k) {\n        return 0.5\n    },\n    ['7.1 圆锥曲线-椭圆：x²/a²+y²/b²=1 (a=3,b=2)']: function (k) {\n        const a = 3\n        const b = 2\n        const angle = k * 2 * Math.PI\n        const x = a * Math.sin(angle)\n        const y = b * Math.cos(angle)\n        return [x, y]\n    },\n    ['7.2 圆锥曲线-抛物线：y²=2px (p=1)']: function (k) {\n        const len = k===1? 15 : Math.round(k * 30 % 30) - 15\n        const p = 1\n        const x = Math.abs(len)\n        let y = Math.sqrt(2 * p * x)\n        if (len < 0) {\n            y = -y\n        }\n        return [x, y]\n    },\n    ['7.3 圆锥曲线-双曲线：x²/a²-y²/b²=1 (a=2,b=3)']: function (k) {\n        const a = 2\n        const b = 3\n        const angle = k * 2 * Math.PI\n        const x = a / Math.cos(angle)\n        const y = b * Math.tan(angle)\n        return [x, y]\n    }\n};\n\nvar N_POINT = 30;\n\nvar grids = [];\nvar xAxes = [];\nvar yAxes = [];\nvar series = [];\nvar titles = [];\nvar count = 0;\necharts.util.each(funcs, function (func, name) {\n    var data = [];\n    let xAxis = {\n        min: +Infinity,\n        max: -Infinity\n    }\n    let yAxis = {\n        min: +Infinity,\n        max: -Infinity\n    }\n    for (var i = 0; i <= N_POINT; i++) {\n        var x = i / N_POINT;\n        var y = func(x);\n        if (Object.prototype.toString.call(y) === '[object Array]') {\n            data.push(y)\n            if (y[0] < xAxis.min) {\n                xAxis.min = y[0]\n            }\n            if (y[0] > xAxis.max) {\n                xAxis.max = y[0]\n            }\n            if (y[1] < yAxis.min) {\n                yAxis.min = y[1]\n            }\n            if (y[1] > yAxis.max) {\n                yAxis.max = y[1]\n            }\n        } else {\n            xAxis = {}\n            yAxis = {}\n            data.push([x, y]);\n        }\n    }\n    \n    // 等比显示\n    // if (xAxis.min < yAxis.min) {\n    //     yAxis.min = xAxis.min\n    // } else {\n    //     xAxis.min = yAxis.min\n    // }\n    // if (xAxis.max < yAxis.max) {\n    //     xAxis.max = yAxis.max\n    // } else {\n    //     yAxis.max = xAxis.max\n    // }\n    \n    grids.push({\n        show: true,\n        borderWidth: 0,\n        backgroundColor: '#fff',\n        shadowColor: 'rgba(0, 0, 0, 0.3)',\n        shadowBlur: 2\n    });\n    xAxes.push({\n        type: 'value',\n        show: false,\n        min: 0,\n        max: 1,\n        gridIndex: count,\n        ...xAxis\n    });\n    yAxes.push({\n        type: 'value',\n        show: false,\n        min: -0.4,\n        max: 1.4,\n        gridIndex: count,\n        ...yAxis\n    });\n    series.push({\n        name: name,\n        type: 'line',\n        xAxisIndex: count,\n        yAxisIndex: count,\n        data: data,\n        showSymbol: false,\n        animationDuration: 1000\n    });\n    titles.push({\n        textAlign: 'center',\n        text: name,\n        textStyle: {\n            fontSize: 12,\n            fontWeight: 'normal'\n        }\n    });\n    count++;\n});\n\nvar rowNumber = Math.ceil(Math.sqrt(count));\necharts.util.each(grids, function (grid, idx) {\n    grid.left = ((idx % rowNumber) / rowNumber * 100 + 0.5) + '%';\n    grid.top = (Math.floor(idx / rowNumber) / rowNumber * 100 + 0.5) + '%';\n    grid.width = (1 / rowNumber * 100 - 1) + '%';\n    grid.height = (1 / rowNumber * 100 - 1) + '%';\n\n    titles[idx].left = parseFloat(grid.left) + parseFloat(grid.width) / 2 + '%';\n    titles[idx].top = parseFloat(grid.top) + '%';\n});\n\noption = {\n    title: titles.concat([{\n        text: '基本曲线方程 & 圆锥曲线',\n        top: 'bottom',\n        left: 'center'\n    }]),\n    grid: grids,\n    xAxis: xAxes,\n    yAxis: yAxes,\n    series: series\n};\nconsole.log(option)\n","html":"","externalScripts":"","updaterUID":"bd-1847551832","theme":"","layout":"","viewCount":86,"userName":"s***0","commentCount":0,"starCount":2,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xpYp1idFIS.png?v=1589713738972","isCustomThumbnail":0,"builtinTags":["category-work","grid","series-line","title"],"customTags":[],"updaterUserName":"s***0"}}