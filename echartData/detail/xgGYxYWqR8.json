{"status":0,"data":{"cid":"xgGYxYWqR8","authorUid":"obd-oCutc9pHaKYsfrE5YiOO7nwoVNTrM3H","authorUserName":"鏃***櫅","title":"3d饼图环图","description":"3d动态饼图环图","latestVersion":3,"alwaysLatest":0,"createTime":"2021-06-08T08:44:06.000Z","lastUpdateTime":"2021-06-08T08:44:06.000Z","auth":2,"uid":"obd-oCutc9pHaKYsfrE5YiOO7nwoVNTrM3H","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":3,"parentVersion":2,"echartsVersion":"5.1.1","versionCreateTime":"2021-06-08T09:01:27.000Z","code":"let selectedIndex = '';\nlet hoveredIndex = '';\noption = getPie3D(\n    [\n        {\n            name: 'cc',\n            value: 47,\n            itemStyle: {\n                color: '#f77b66',\n            },\n        },\n        {\n            name: 'aa',\n            value: 44,\n            itemStyle: {\n                color: '#3edce0',\n            },\n        },\n        {\n            name: 'bb',\n            value: 32,\n            itemStyle: {\n                color: '#f94e76',\n            },\n        },\n        {\n            name: 'ee',\n            value: 16,\n            itemStyle: {\n                color: '#018ef1',\n            },\n        },\n        {\n            name: 'dd',\n            value: 23,\n            itemStyle: {\n                color: '#9e60f9',\n            },\n        },\n    ],\n    0.59\n);\n// 生成扇形的曲面参数方程\nfunction getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, h) {\n    // 计算\n    const midRatio = (startRatio + endRatio) / 2;\n\n    const startRadian = startRatio * Math.PI * 2;\n    const endRadian = endRatio * Math.PI * 2;\n    const midRadian = midRatio * Math.PI * 2;\n\n    // 如果只有一个扇形，则不实现选中效果。\n    if (startRatio === 0 && endRatio === 1) {\n        // eslint-disable-next-line no-param-reassign\n        isSelected = false;\n    }\n\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n    // eslint-disable-next-line no-param-reassign\n    k = typeof k !== 'undefined' ? k : 1 / 3;\n\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n    const offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n    const offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\n    const hoverRate = isHovered ? 1.05 : 1;\n\n    // 返回曲面参数方程\n    return {\n        u: {\n            min: -Math.PI,\n            max: Math.PI * 3,\n            step: Math.PI / 32,\n        },\n\n        v: {\n            min: 0,\n            max: Math.PI * 2,\n            step: Math.PI / 20,\n        },\n\n        x(u, v) {\n            if (u < startRadian) {\n                return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n\n        y(u, v) {\n            if (u < startRadian) {\n                return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n\n        z(u, v) {\n            if (u < -Math.PI * 0.5) {\n                return Math.sin(u);\n            }\n            if (u > Math.PI * 2.5) {\n                return Math.sin(u) * h * 0.1;\n            }\n            // 当前图形的高度是Z根据h（每个value的值决定的）\n            return Math.sin(v) > 0 ? 1 * h * 0.1 : -1;\n        },\n    };\n}\n// 生成模拟 3D 饼图的配置项\nfunction getPie3D(pieData, internalDiameterRatio) {\n    const series = [];\n    // 总和\n    let sumValue = 0;\n    let startValue = 0;\n    let endValue = 0;\n    const legendData = [];\n    const k =\n        typeof internalDiameterRatio !== 'undefined'\n            ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\n            : 1 / 3;\n\n    // 为每一个饼图数据，生成一个 series-surface 配置\n    for (let i = 0; i < pieData.length; i += 1) {\n        sumValue += pieData[i].value;\n\n        const seriesItem = {\n            name: typeof pieData[i].name === 'undefined' ? `series${i}` : pieData[i].name,\n            type: 'surface',\n            parametric: true,\n            wireframe: {\n                show: false,\n            },\n            pieData: pieData[i],\n            pieStatus: {\n                selected: false,\n                hovered: false,\n                k,\n            },\n        };\n\n        if (typeof pieData[i].itemStyle !== 'undefined') {\n            const { itemStyle } = pieData[i];\n\n            // eslint-disable-next-line no-unused-expressions\n            typeof pieData[i].itemStyle.color !== 'undefined' ? (itemStyle.color = pieData[i].itemStyle.color) : null;\n            // eslint-disable-next-line no-unused-expressions\n            typeof pieData[i].itemStyle.opacity !== 'undefined'\n                ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\n                : null;\n\n            seriesItem.itemStyle = itemStyle;\n        }\n        series.push(seriesItem);\n    }\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n    console.log(series);\n    for (let i = 0; i < series.length; i += 1) {\n        endValue = startValue + series[i].pieData.value;\n\n        series[i].pieData.startRatio = startValue / sumValue;\n        series[i].pieData.endRatio = endValue / sumValue;\n        series[i].parametricEquation = getParametricEquation(\n            series[i].pieData.startRatio,\n            series[i].pieData.endRatio,\n            false,\n            false,\n            k,\n            // 我这里做了一个处理，使除了第一个之外的值都是10\n            series[i].pieData.value === series[0].pieData.value ? 35 : 10\n        );\n\n        startValue = endValue;\n\n        legendData.push(series[i].name);\n    }\n\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\n    const option = {\n        // animation: false,\n        tooltip: {\n            formatter: (params) => {\n                if (params.seriesName !== 'mouseoutSeries') {\n                    return `${\n                        params.seriesName\n                    }<br/><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${\n                        params.color\n                    };\"></span>${option.series[params.seriesIndex].pieData.value}`;\n                }\n                return '';\n            },\n        },\n        xAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        yAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        zAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        grid3D: {\n            show: false,\n            boxHeight: 5,\n            top: '-20%',\n            viewControl: {\n                // 3d效果可以放大、旋转等，请自己去查看官方配置\n                alpha: 35,\n                // beta: 30,\n                rotateSensitivity: 1,\n                zoomSensitivity: 0,\n                panSensitivity: 0,\n                autoRotate: true,\n                distance: 150,\n            },\n            // 后处理特效可以为画面添加高光、景深、环境光遮蔽（SSAO）、调色等效果。可以让整个画面更富有质感。\n            postEffect: {\n                // 配置这项会出现锯齿，请自己去查看官方配置有办法解决\n                enable: false,\n                bloom: {\n                    enable: true,\n                    bloomIntensity: 0.1,\n                },\n                SSAO: {\n                    enable: true,\n                    quality: 'medium',\n                    radius: 2,\n                },\n                // temporalSuperSampling: {\n                //   enable: true,\n                // },\n            },\n        },\n        series,\n    };\n    return option;\n}\n//  修正取消高亮失败的 bug\n// 监听 mouseover，近似实现高亮（放大）效果\nmyChart.on('mouseover', function (params) {\n    // 准备重新渲染扇形所需的参数\n    let isSelected;\n    let isHovered;\n    let startRatio;\n    let endRatio;\n    let k;\n    let i;\n\n    // 如果触发 mouseover 的扇形当前已高亮，则不做操作\n    if (hoveredIndex === params.seriesIndex) {\n        return;\n\n        // 否则进行高亮及必要的取消高亮操作\n    } else {\n        // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）\n        if (hoveredIndex !== '') {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。\n            isSelected = option.series[hoveredIndex].pieStatus.selected;\n            isHovered = false;\n            startRatio = option.series[hoveredIndex].pieData.startRatio;\n            endRatio = option.series[hoveredIndex].pieData.endRatio;\n            k = option.series[hoveredIndex].pieStatus.k;\n            i = option.series[hoveredIndex].pieData.value === option.series[0].pieData.value ? 35 : 10;\n            // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n            option.series[hoveredIndex].parametricEquation = getParametricEquation(\n                startRatio,\n                endRatio,\n                isSelected,\n                isHovered,\n                k,\n                i\n            );\n            option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n            // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n            hoveredIndex = '';\n        }\n\n        // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）\n        if (params.seriesName !== 'mouseoutSeries') {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n            isSelected = option.series[params.seriesIndex].pieStatus.selected;\n            isHovered = true;\n            startRatio = option.series[params.seriesIndex].pieData.startRatio;\n            endRatio = option.series[params.seriesIndex].pieData.endRatio;\n            k = option.series[params.seriesIndex].pieStatus.k;\n\n            // 对当前点击的扇形，执行高亮操作（对 option 更新）\n            option.series[params.seriesIndex].parametricEquation = getParametricEquation(\n                startRatio,\n                endRatio,\n                isSelected,\n                isHovered,\n                k,\n                option.series[params.seriesIndex].pieData.value + 5\n            );\n            option.series[params.seriesIndex].pieStatus.hovered = isHovered;\n\n            // 记录上次高亮的扇形对应的系列号 seriesIndex\n            hoveredIndex = params.seriesIndex;\n        }\n\n        // 使用更新后的 option，渲染图表\n        myChart.setOption(option);\n    }\n});\n\n// 修正取消高亮失败的 bug\nmyChart.on('globalout', function () {\n    if (hoveredIndex !== '') {\n        // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n        isSelected = option.series[hoveredIndex].pieStatus.selected;\n        isHovered = false;\n        k = option.series[hoveredIndex].pieStatus.k;\n        startRatio = option.series[hoveredIndex].pieData.startRatio;\n        endRatio = option.series[hoveredIndex].pieData.endRatio;\n        // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n        i = option.series[hoveredIndex].pieData.value === option.series[0].pieData.value ? 35 : 10;\n        option.series[hoveredIndex].parametricEquation = getParametricEquation(\n            startRatio,\n            endRatio,\n            isSelected,\n            isHovered,\n            k,\n            i\n        );\n        option.series[hoveredIndex].pieStatus.hovered = isHovered;\n\n        // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n        hoveredIndex = '';\n    }\n\n    // 使用更新后的 option，渲染图表\n    myChart.setOption(option);\n});\n","html":"","externalScripts":"https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js","updaterUID":"obd-oCutc9pHaKYsfrE5YiOO7nwoVNTrM3H","theme":"","layout":"","viewCount":0,"userName":"鏃***櫅","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xgGYxYWqR8.png?v=1623142887793","isCustomThumbnail":0,"builtinTags":["category-work","grid3D","series-surface","tooltip"],"customTags":[],"updaterUserName":"鏃***櫅"}}