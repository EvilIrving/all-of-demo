{"status":0,"data":{"cid":"xJ8RSNxhcQ","authorUid":"obd-o-WeIDz9pQFG3HlZjbY3v-MnvKKSvAj","authorUserName":"王***表","title":"3d饼图","description":"","latestVersion":2,"alwaysLatest":0,"createTime":"2021-12-02T09:50:34.000Z","lastUpdateTime":"2022-01-15T10:18:05.000Z","auth":1,"uid":"obd-o-WeIDz9pQFG3HlZjbY3v-MnvKKSvAj","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":2,"parentVersion":1,"echartsVersion":"4.9.0","versionCreateTime":"2022-01-15T10:18:05.000Z","code":"var { data, optionConfig } = {\n    data: [\n        { name: '第一种形态', value: 15, itemStyle: { color: '#7740F7' }, startRatio: 0, endRatio: 0.15 },\n        { name: '第二种形态', value: 25, itemStyle: { color: '#2E4FF7' }, startRatio: 0.15, endRatio: 0.4 },\n        { name: '第三种形态', value: 10, itemStyle: { color: '#69CDE7' }, startRatio: 0.4, endRatio: 0.5 },\n        { name: '第四种形态', value: 20, itemStyle: { color: '#CC32F5' }, startRatio: 0.5, endRatio: 0.7 },\n    ],\n    optionConfig: {},\n};\nconst getPie3D = (pieData, internalDiameterRatio) => {\n    let series = [];\n    let sumValue = 0;\n    let startValue = 0;\n    let endValue = 0;\n    let legendData = [];\n    let k =\n        typeof internalDiameterRatio !== 'undefined'\n            ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\n            : 1 / 3;\n\n    // 为每一个饼图数据，生成一个 series-surface 配置\n    for (let i = 0; i < pieData.length; i++) {\n        sumValue += pieData[i].value;\n\n        let seriesItem = {\n            name: typeof pieData[i].name === 'undefined' ? `series${i}` : pieData[i].name,\n            type: 'surface',\n\n            parametric: true,\n            wireframe: {\n                show: false,\n            },\n            pieData: pieData[i],\n            pieStatus: {\n                selected: false,\n                hovered: false,\n                k: k,\n            },\n            labelLine: {\n                show: false,\n            },\n            label: {\n                show: false,\n                // normal: {\n                //   position: \"inner\",\n                //   formatter: (params) => {\n                //     return params;\n                //   },\n                // },\n            },\n            itemStyle: {\n                opacity: 1,\n            },\n        };\n\n        if (typeof pieData[i].itemStyle != 'undefined') {\n            let itemStyle = {};\n\n            typeof pieData[i].itemStyle.color != 'undefined' ? (itemStyle.color = pieData[i].itemStyle.color) : null;\n            typeof pieData[i].itemStyle.opacity != 'undefined'\n                ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\n                : null;\n\n            seriesItem.itemStyle = itemStyle;\n        }\n        series.push(seriesItem);\n    }\n\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n    for (let i = 0; i < series.length; i++) {\n        endValue = startValue + series[i].pieData.value;\n        // console.log(series[i]);\n        series[i].pieData.startRatio = startValue / sumValue;\n        series[i].pieData.endRatio = endValue / sumValue;\n        series[i].parametricEquation = getParametricEquation(\n            series[i].pieData.startRatio,\n            series[i].pieData.endRatio,\n            false,\n            false,\n            k,\n            series[i].pieData.value\n        );\n\n        startValue = endValue;\n\n        legendData.push(series[i].name);\n    }\n\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\n    let option = {\n        tooltip: {\n            backgroundColor: '#053A8D',\n            formatter: (params) => {\n                if (params.seriesName !== 'mouseoutSeries') {\n                    return `${\n                        params.seriesName\n                    }<br/><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${\n                        params.color\n                    };\"></span>${option.series[params.seriesIndex].pieData.value}`;\n                }\n            },\n        },\n\n        labelLine: {\n            show: true,\n        },\n        label: {\n            show: true,\n        },\n        legend: {\n            orient: 'vertical',\n            data: legendData,\n            textStyle: {\n                color: 'rgba(150,202,223)',\n                fontSize: 12,\n            },\n            itemWidth: 10,\n            itemHeight: 10,\n            icon: 'roundRect',\n            formatter: function (name) {\n                let item = data.filter((item) => item.name == name)[0];\n                return `${item.name}  ${item.value}%`;\n            },\n            left: 'right',\n            top: '30%', //居右显示\n        },\n        xAxis3D: {\n            min: -1.3,\n            max: 1.3,\n        },\n        yAxis3D: {\n            min: -1.3,\n            max: 1.3,\n        },\n        zAxis3D: {\n            min: -1.3,\n            max: 1.3,\n        },\n        grid3D: {\n            show: false,\n            boxHeight: 4,\n            top: '-12%',\n            left: '-2%',\n            // environment: \"#021041\",\n            viewControl: {\n                distance: 6000,\n                alpha: 60,\n                beta: 10,\n            },\n        },\n        series: series,\n    };\n    return option;\n};\n// 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\nconst getParametricEquation = (startRatio, endRatio, isSelected, isHovered, k, height) => {\n    // 计算\n    let midRatio = (startRatio + endRatio) / 2;\n\n    let startRadian = startRatio * Math.PI * 2;\n    let endRadian = endRatio * Math.PI * 2;\n    let midRadian = midRatio * Math.PI * 2;\n\n    // 如果只有一个扇形，则不实现选中效果。\n    if (startRatio === 0 && endRatio === 1) {\n        isSelected = false;\n    }\n\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n    k = typeof k !== 'undefined' ? k : 1 / 3;\n\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n    let offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n    let offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\n    let hoverRate = isHovered ? 1.05 : 1;\n\n    // 返回曲面参数方程\n    return {\n        u: {\n            min: -Math.PI,\n            max: Math.PI * 3,\n            step: Math.PI / 32,\n        },\n\n        v: {\n            min: 0,\n            max: Math.PI * 2,\n            step: Math.PI / 20,\n        },\n\n        x: function (u, v) {\n            if (u < startRadian) {\n                return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n\n        y: function (u, v) {\n            if (u < startRadian) {\n                return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n\n        z: function (u, v) {\n            if (u < -Math.PI * 0.5) {\n                return Math.sin(u);\n            }\n            if (u > Math.PI * 2.5) {\n                return Math.sin(u);\n            }\n            return Math.sin(v) > 0 ? 1 * height : -1;\n        },\n    };\n};\n\noption = getPie3D(data, 0);\n","html":"","externalScripts":"https://cdn.jsdelivr.net/npm/echarts-gl@1/dist/echarts-gl.min.js","updaterUID":"obd-oAg5TMRWt2jDUvWLAe9z8PnGuvb8B7I","theme":"","layout":"","viewCount":0,"userName":"王***表","commentCount":0,"starCount":13,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xJ8RSNxhcQ.png?v=1642241885243","isCustomThumbnail":0,"builtinTags":["category-work","grid3D","legend","series-surface","title","tooltip"],"customTags":["3d"],"updaterUserName":"解***子"}}