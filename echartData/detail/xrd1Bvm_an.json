{"status":0,"data":{"cid":"xrd1Bvm_an","authorUid":"bd-1895925720","authorUserName":"心***阔","title":"“会员活跃度” - 山东省","description":"tooltip动画自动轮换效果","latestVersion":3,"alwaysLatest":1,"createTime":"2019-01-19T02:57:30.000Z","lastUpdateTime":"2019-01-19T02:57:30.000Z","auth":1,"uid":"bd-1895925720","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":3,"parentVersion":2,"echartsVersion":"4.2.1","versionCreateTime":"2019-03-03T05:02:19.000Z","code":"var uploadedDataURL = \"/asset/get/s/data-1551588846073-bEWk1-YFr.json\";\n\n/*参考引用 锃光瓦亮6666 的作品*/\n/**\n * priority  tooltip朝向（top/bottom）\n * left, top 为默认值\n * 根据展示内容需要微调text的宽高\n */\nlet left = false,\n    top = false,\n    priority = 'top'\n// 自定义tooltip配置属性\nlet config = {\n    ecBoxId: 'chart-panel',\n    lineColor: '#fff',\n    L1: {\n        time: 0.3,\n        long: 40\n    },\n    L2: {\n        time: 0.3,\n        long: 40\n    },\n    text: {\n        time: 0.5,\n        text: '',\n        font: '14px Arial',\n        color: '#fff',\n        padding: [10, 10],\n        width: 120,\n        height: 60,\n        lineHeight: 24,\n        backgroundColor: 'rgba(50, 50, 50, 0.8)'\n    }\n}\n\n/**\n此版本通过设置geoindex && seriesIndex: [1] 属性来实现geo和map共存，来达到hover散点和区域显示tooltip的效果\n\n默认情况下，map series 会自己生成内部专用的 geo 组件。但是也可以用这个 geoIndex 指定一个 geo 组件。这样的话，map 和 其他 series（例如散点图）就可以共享一个 geo 组件了。并且，geo 组件的颜色也可以被这个 map series 控制，从而用 visualMap 来更改。\n当设定了 geoIndex 后，series-map.map 属性，以及 series-map.itemStyle 等样式配置不再起作用，而是采用 geo 中的相应属性。\n\nhttp://echarts.baidu.com/option.html#series-map.geoIndex\n\n并且加了pin气泡图标以示数值大小\n*/\n\n\n\nmyChart.showLoading();\n$.getJSON(uploadedDataURL, function(geoJson) {\n    echarts.registerMap('jiangxi', geoJson);\n    myChart.hideLoading();\n    var geoCoordMap = {\n        '济南市': [117.121225, 36.66466],\n        '菏泽市': [115.480656, 35.23375],\n        '济宁市': [116.59, 35.38],\n        '德州市': [116.39, 37.45],\n        '聊城市': [115.97, 36.45],\n        '泰安市': [117.13, 36.18],\n        '临沂市': [118.35, 35.05],\n        '淄博市': [118.05, 36.78],\n        '枣庄市': [117.57, 34.86],\n        '滨州市': [118.03, 37.36],\n        '潍坊市': [119.1, 36.62],\n        '东营市': [118.49, 37.46],\n        '青岛市': [120.3, 36.62],\n        '烟台市': [120.9, 37.32],\n        '威海市': [122.1, 37.2],\n        '日照市': [119.1, 35.62],\n        '济宁市': [116.7, 35.42],\n        '莱芜市': [117.70, 36.28],\n    }\n    var data = [{\n            name: '济南市',\n            value: 390\n        },\n        {\n            name: '菏泽市',\n            value: 158\n        },\n        {\n            name: '德州市',\n            value: 252\n        },\n        {\n            name: '聊城市',\n            value: 99\n        },\n        {\n            name: '泰安市',\n            value: 189\n        },\n        {\n            name: '临沂市',\n            value: 52\n        },\n        {\n            name: '淄博市',\n            value: 158\n        },\n        {\n            name: '枣庄市',\n            value: 152\n        },\n        {\n            name: '滨州市',\n            value: 189\n        },\n        {\n            name: '潍坊市',\n            value: 160\n        },\n        {\n            name: '东营市',\n            value: 80\n        },\n        {\n            name: '青岛市',\n            value: 180\n        },\n        {\n            name: '烟台市',\n            value: 190\n        },\n        {\n            name: '威海市',\n            value: 290\n        },\n        {\n            name: '日照市',\n            value: 190\n        },\n        {\n            name: '济宁市',\n            value: 190\n        },\n        {\n            name: '莱芜市',\n            value: 290\n        },\n    ];\n    var max = 480,\n        min = 9; // todo \n    var maxSize4Pin = 100,\n        minSize4Pin = 20;\n\n    var convertData = function(data) {\n        var res = [];\n        for (var i = 0; i < data.length; i++) {\n            var geoCoord = geoCoordMap[data[i].name];\n            if (geoCoord) {\n                res.push({\n                    name: data[i].name,\n                    value: geoCoord.concat(data[i].value)\n                });\n            }\n        }\n        return res;\n    };\n\n\n    option = {\n        backgroundColor: '#020933',\n        title: {\n            top: 20,\n            text: '“会员活跃度” - 山东省',\n            subtext: '',\n            x: 'center',\n            textStyle: {\n                color: '#ccc'\n            }\n        },\n\n        tooltip: {\n            trigger: 'item',\n            //triggerOn: 'click',\n            backgroundColor: 'transparent',\n            alwaysShowContent: true,\n            position(pos) {\n                let position = getPosOrSize('pos', pos);\n                return position;\n            },\n            formatter(params, p, a) {\n                canvasAnimation(params);\n                let size = getPosOrSize('size');\n                let tooltipDom = `<canvas id=\"tCanvas\" width=\"${size.width}\" height=\"${size.height}\">123</canvas>`;\n                return tooltipDom;\n            }\n        },\n        /*   legend: {\n               orient: 'vertical',\n               y: 'bottom',\n               x: 'right',\n                data:['pm2.5'],\n               textStyle: {\n                   color: '#fff'\n               }\n           },*/\n        legend: {\n            orient: 'vertical',\n            y: 'bottom',\n            x: 'right',\n            data: ['pm2.5'],\n            textStyle: {\n                color: '#fff'\n            }\n        },\n        visualMap: {\n            show: false,\n            min: 0,\n            max: 500,\n            left: 'left',\n            top: 'bottom',\n            text: ['高', '低'], // 文本，默认为数值文本\n            calculable: true,\n            seriesIndex: [1],\n            inRange: {\n                // color: ['#3B5077', '#031525'] // 蓝黑\n                // color: ['#ffc0cb', '#800080'] // 红紫\n                // color: ['#3C3B3F', '#605C3C'] // 黑绿\n                //color: ['#0f0c29', '#302b63', '#24243e'] // 黑紫黑\n                //color: ['#23074d', '#cc5333'] // 紫红\n                // color: ['#00467F', '#A5CC82'] // 蓝绿\n                // color: ['#1488CC', '#2B32B2'] // 浅蓝\n                // color: ['#00467F', '#A5CC82'] // 蓝绿\n                // color: ['#00467F', '#A5CC82'] // 蓝绿\n                // color: ['#00467F', '#A5CC82'] // 蓝绿\n                // color: ['#00467F', '#A5CC82'] // 蓝绿\n\n            }\n        },\n        // toolbox: {\n        //     show: true,\n        //     orient: 'vertical',\n        //     left: 'right',\n        //     top: 'center',\n        //     feature: {\n        //             dataView: {readOnly: false},\n        //             restore: {},\n        //             saveAsImage: {}\n        //             }\n        // },\n        geo: {\n            show: true,\n            map: 'jiangxi',\n            label: {\n                normal: {\n                    show: false\n                },\n                emphasis: {\n                    show: false,\n                }\n            },\n            roam: true,\n            itemStyle: {\n                normal: {\n                    areaColor: 'transparent',\n                    borderColor: '#3fdaff',\n                    borderWidth: 2,\n                    shadowColor: 'rgba(63, 218, 255, 0.5)',\n                    shadowBlur: 30\n                },\n                emphasis: {\n                    areaColor: '#2B91B7',\n                }\n            }\n        },\n        series: [{\n                name: 'light',\n                type: 'scatter',\n                coordinateSystem: 'geo',\n                data: convertData(data),\n                symbolSize: function(val) {\n                    return val[2] / 10;\n                },\n                label: {\n                    normal: {\n                        formatter: '{b}',\n                        position: 'right',\n                        show: true\n                    },\n                    emphasis: {\n                        show: true\n                    }\n                },\n                itemStyle: {\n                    normal: {\n                        color: '#F4E925'\n                    }\n                }\n            },\n            {\n                type: 'map',\n                map: 'jiangxi',\n                geoIndex: 0,\n                aspectScale: 0.75, //长宽比\n                showLegendSymbol: false, // 存在legend时显示\n                label: {\n                    normal: {\n                        show: false\n                    },\n                    emphasis: {\n                        show: false,\n                        textStyle: {\n                            color: '#fff'\n                        }\n                    }\n                },\n                roam: true,\n                itemStyle: {\n                    normal: {\n                        areaColor: '#031525',\n                        borderColor: '#FFFFFF',\n                    },\n                    emphasis: {\n                        areaColor: '#2B91B7'\n                    }\n                },\n                animation: false,\n                data: data\n            },\n            {\n                name: 'Top 5',\n                type: 'effectScatter',\n                coordinateSystem: 'geo',\n                data: convertData(data.sort(function(a, b) {\n                    return b.value - a.value;\n                }).slice(0, 5)),\n                symbolSize: function(val) {\n                    return val[2] / 10;\n                },\n                showEffectOn: 'render',\n                rippleEffect: {\n                    brushType: 'stroke'\n                },\n                hoverAnimation: true,\n                label: {\n                    normal: {\n                        formatter: '{b}',\n                        position: 'right',\n                        show: true\n                    }\n                },\n                itemStyle: {\n                    normal: {\n                        color: '#F4E925',\n                        shadowBlur: 10,\n                        shadowColor: '#05C3F9'\n                    }\n                },\n                zlevel: 1\n            },\n\n        ]\n    };\n    myChart.setOption(option);\n});\n\nconst canvasAnimation = params => {\n    setTimeout(function() {\n        console.log(params)\n        // config.text.text = params.name\n        config.text.text = `地点：${params.name}\\n数量：${params.value[2]}`\n        new myTooltip('tCanvas', config)\n    }, 0);\n}\n\n// 计算tooltip位置\nconst getPosOrSize = (type, point) => {\n    let x1 = config.L1.long * Math.sin(Math.PI / 4)\n    let width = x1 + config.L2.long + config.text.width,\n        height = x1 + config.text.height / 2\n    if (type === 'size') {\n        config.width = width\n        config.height = height\n        return {\n            width,\n            height\n        }\n    } else {\n        let box = document.getElementById(config.ecBoxId),\n            bw = box.offsetWidth,\n            bh = box.offsetHeight,\n            x = point[0],\n            y = point[1]\n        left = false\n        if (x + width >= bw - 30) {\n            x = x - width - 15\n            left = true\n        }\n        if (priority === 'top') {\n            // L1向上\n            top = true\n            y = y - height - 15\n            if (y <= 0) {\n                y = point[1]\n                top = false\n            }\n            return [x, y]\n        } else {\n            top = false\n            if (y + height >= bh) {\n                y = y - height - 15\n                top = true\n            }\n            return [x, y]\n        }\n    }\n}\n\nclass myTooltip {\n    constructor(id, config) {\n        this.config = config\n        this.totalTime = 0\n        this.stage = new createjs.Stage(id)\n        this.timeline = new TimelineMax({\n            repeat: 0\n        })\n        this.g = new createjs.Graphics()\n        this.lineShape = new createjs.Shape(this.g)\n        this.textShape = new createjs.Shape()\n        this.stage.addChild(this.lineShape, this.textShape)\n        this.init()\n        this.begin()\n        this.update()\n    }\n    init() {\n        this.start = [0, 0]\n        if (left) {\n            this.start[0] = this.config.width\n        }\n        if (top) {\n            this.start[1] = this.config.height\n        }\n    }\n    begin() {\n        this.L1()\n        this.L2()\n        this.addText()\n    }\n    L1() {\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {\n                s: 0\n            },\n            x = c.L1.long * Math.sin(Math.PI / 4)\n        if (left) {\n            if (top) {\n                this.L1End = [me.start[0] - x, me.start[1] - x]\n            } else {\n                this.L1End = [me.start[0] - x, me.start[1] + x]\n            }\n        } else {\n            if (top) {\n                this.L1End = [x, me.start[1] - x]\n            } else {\n                this.L1End = [x, x]\n            }\n        }\n\n        tl.to(scale, c.L1.time, {\n            s: 1,\n            onUpdate() {\n                let s = scale.s\n                if (left) {\n                    if (top) {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(me.start[0] - x * s, me.start[1] - x * s)\n                    } else {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(me.start[0] - x * s, me.start[1] + x * s)\n                    }\n                } else {\n                    if (top) {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(x * s, me.start[1] - x * s)\n                    } else {\n                        me.g.c().s(c.lineColor).mt(...me.start).lt(x * s, x * s)\n                    }\n                }\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n        this.totalTime += c.L1.time\n    }\n    L2() {\n        // 只跟左右有关，只判断left\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {\n            s: 0\n        }\n        tl.to(scale, c.L2.time, {\n            s: 1,\n            onUpdate() {\n                let s = scale.s\n                if (left) {\n                    me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(me.L1End[0] - c.L2.long * s, me.L1End[1])\n                } else {\n                    me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(me.L1End[0] + c.L2.long * s, me.L1End[1])\n                }\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n        this.totalTime += c.L2.time\n    }\n    addText() {\n        // text框只与L2end有关，只需判断left即可，top不影响\n        let me = this\n        let c = me.config\n        let tl = new TimelineMax()\n        let scale = {\n                s: 0\n            },\n            L2End = [me.L1End[0] + c.L2.long, me.L1End[1]]\n        if (left) {\n            L2End = [me.L1End[0] - c.L2.long, me.L1End[1]]\n        }\n        tl.to(scale, c.text.time, {\n            s: 1,\n            onStart() {\n                let x = 0,\n                    y = 0\n                if (left) {\n                    x = L2End[0] - c.text.width\n                } else {\n                    x = L2End[0]\n                }\n                me.g.c().s(c.lineColor).mt(...me.start).lt(...me.L1End).lt(...L2End)\n                me.text = new createjs.Text(c.text.text, c.text.font, c.text.color)\n                me.text.alpha = 0\n                me.text.lineHeight = c.text.lineHeight\n                me.text.x = x + c.text.padding[0]\n                me.text.y = L2End[1] - c.text.height / 2 + c.text.padding[1]\n                me.stage.addChild(me.text)\n                me.textShape.graphics.c().f(c.text.backgroundColor).rr(x, L2End[1] - c.text.height / 2, c.text.width, c.text.height, 5)\n                me.textShape.alpha = 0\n                me.update()\n            },\n            onUpdate() {\n                me.text.alpha = scale.s\n                me.textShape.alpha = scale.s\n                me.update()\n            }\n        })\n        this.timeline.add(tl, this.totalTime)\n    }\n    update() {\n        this.stage.update()\n    }\n}\nlet EC = myChart; //echarts.getInstanceByDom(document.getElementById(\"chart-panel\"))\nvar index = 0\nsetInterval(_ => {\n    EC.dispatchAction({\n        type: 'showTip',\n        seriesIndex: 0,\n        dataIndex: index\n    })\n    index++\n    if (index >= data.length) {\n        index = 0\n    }\n}, 3000)\n\nwindow.addEventListener('resize', e => {\n    let tCanvas = document.getElementById('tCanvas')\n    if (tCanvas) {\n        tCanvas.style.display = 'none'\n    }\n})","html":"","externalScripts":"https://code.createjs.com/1.0.0/easeljs.min.js,https://cdnjs.cloudflare.com/ajax/libs/gsap/2.0.1/TweenMax.min.js","updaterUID":"bd-1865791056","theme":"","layout":"","viewCount":804,"userName":"心***阔","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xrd1Bvm_an.png?v=1551589339374","isCustomThumbnail":0,"builtinTags":["category-work","geo","legend","series-effectScatter","series-map","series-scatter","title","tooltip","visualMap"],"customTags":[],"updaterUserName":"幸运的傻猪"}}