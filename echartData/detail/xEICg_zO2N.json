{"status":0,"data":{"cid":"xEICg_zO2N","authorUid":"bd-2281899968","authorUserName":"d***k","title":"产品洞察-特殊数据","description":"","latestVersion":12,"alwaysLatest":1,"createTime":"2020-08-24T09:41:40.000Z","lastUpdateTime":"2020-08-24T09:41:40.000Z","auth":2,"uid":"bd-2281899968","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":12,"parentVersion":11,"echartsVersion":"4.8.0","versionCreateTime":"2020-08-26T13:10:25.000Z","code":"const elem = document.createElement('div');\nconst mEchart = echarts.init(elem, 'yunting_multi_color', {\n    width: 800,\n    height: 284\n});\ndocument.body.appendChild(elem);\n\nconst multiPositiveColor = [\n    '#1574B3', '#CDB446', '#D07B49', '#1EA082', '#3D85FF',\n    '#D8727F', '#0E97AD', '#119073', '#D969BF', '#A9A557',\n    '#3D42C6', '#3ACCD3', '#1A9E59', '#1574B3', '#38B5FF',\n    '#9369D9', '#1BBF69', '#CC6A77', '#A3A3A3', '#D2D2D2'\n];\n\nconst emotionTypes = ['positive', 'negative', 'total']\n\nfunction getDemoData() {\n    const aspects = Array.from({\n        length: 5\n    }).map((_, idx) => `指标${idx}`);\n    const views = Array.from({\n        length: 5\n    }).map((_, idx) => `视觉${idx}`);\n    let messageTotal = 0; // 消息总数\n    const data = aspects.reduce((aspArr, aspect) => {\n        // 指标随机个数\n        const aspNum = parseInt(Math.random() * 1000 % 10) + 1;\n        Array.from({\n            length: aspNum\n        }).forEach((_, aIdx) => {\n            const positive = parseInt(Math.random() * 10000);\n            const negative = parseInt(Math.random() * 10000);\n            // 计算消息总数\n            messageTotal += positive + negative;\n            // 视觉随机个数\n            // const viewNum = parseInt(Math.random() * 1000 % 4) + 1;\n            const viewNum = 1;\n            aspArr.push({\n                aspect1: aspect,\n                aspect2: `${aspect}${aIdx}`, // 二级指标\n                negative,\n                positive,\n                businessView: Array.from({\n                    length: viewNum\n                }).reduce((viewArr) => {\n                    // 随机视觉\n                    const vIdx = parseInt(Math.random() * 1000) % views.length;\n                    // 过滤相同的\n                    if (!viewArr.find(vObj => vObj.id === vIdx)) {\n                        viewArr.push({\n                            id: vIdx,\n                            name: views[vIdx]\n                        })\n                    }\n                    return viewArr\n                }, [])\n            })\n\n        })\n\n        return aspArr;\n    }, []);\n    // 把消息总数加入每个对象中\n    return data.map(obj => ({\n        ...obj,\n        messageTotal\n    }))\n\n}\n\nfunction transformChartData(data, chartType, emotionType) {\n    let viewData = data.reduce((vArr, curObj) => {\n        curObj.businessView.forEach(({\n            id,\n            name\n        }) => {\n            let tarVobj = vArr.find(vObj => vObj.view === name);\n            if (!tarVobj) {\n                tarVobj = {\n                    id,\n                    view: name,\n                    aspects: [],\n                };\n                vArr.push(tarVobj);\n            }\n            const total = curObj.positive + curObj.negative;\n            tarVobj.aspects.push({\n                total,\n                aspect: curObj.aspect2,\n                positive: curObj.positive,\n                negative: curObj.negative,\n                negRate: curObj.negative / total,\n                posRate: curObj.positive / total,\n                menRate: total / curObj.messageTotal\n            })\n\n        })\n        return vArr;\n    }, [])\n\n    console.log({\n        viewData\n    })\n\n    if (chartType === 1) {\n        return viewData.reduce((arrView, vObj) => {\n            let posTotal = 0,\n                negTotal = 0;\n            vObj.aspects.forEach(obj => {\n                posTotal += obj.positive;\n                negTotal += obj.negative;\n            });\n            const total = posTotal + negTotal;\n            if (total) {\n                const posRate = posTotal / total;\n                const negRate = negTotal / total;\n                arrView.push([vObj.view, total, posRate, negRate]);\n            }\n            return arrView;\n        }, [\n            ['业务视觉', '指标声量', '指标好评率', '指标差评率']\n        ]);\n    } else if (chartType === 2) {\n        const posSource = viewData.reduce((arrView, vObj) => {\n            const {\n                view,\n                aspects\n            } = vObj;\n            const rangedObj = aspects.sort((a, b) => b.posRate - a.posRate);\n            rangedObj.forEach(obj => {\n                arrView.push([view, obj.aspect, obj.posRate])\n            })\n            return arrView;\n        }, [\n            ['业务视觉', '指标', '指标好评率']\n        ]);\n        const negSource = viewData.reduce((arrView, vObj) => {\n            const {\n                view,\n                aspects\n            } = vObj;\n            const rangedObj = aspects.sort((a, b) => b.negRate - a.negRate);\n            rangedObj.forEach(obj => {\n                arrView.push([view, obj.aspect, obj.negRate])\n            })\n            return arrView;\n        }, [\n            ['业务视觉', '指标', '指标差评率']\n        ]);\n        return [posSource, negSource].map(source => ({\n            source\n        }));\n    } else if (chartType === 3) {\n        const totalSource = viewData.reduce((arrView, vObj) => {\n            const {\n                view,\n                aspects\n            } = vObj;\n            const rangedObj = aspects.sort((a, b) => b.total - a.total);\n            rangedObj.forEach(obj => {\n                arrView.push([view, obj.aspect, obj.total, obj.menRate])\n            });\n            return arrView;\n        }, [\n            ['业务视觉', '指标', '指标声量', '指标提及率']\n        ]);\n        const posSource = viewData.reduce((arrView, vObj) => {\n            const {\n                view,\n                aspects\n            } = vObj;\n            const rangedObj = aspects.sort((a, b) => b.positive - a.positive);\n            rangedObj.forEach(obj => {\n                arrView.push([view, obj.aspect, obj.positive, obj.menRate])\n            });\n            return arrView;\n        }, [\n            ['业务视觉', '指标', '指标正面声量', '指标提及率']\n        ]);\n        const negSource = viewData.reduce((arrView, vObj) => {\n            const {\n                view,\n                aspects\n            } = vObj;\n            const rangedObj = aspects.sort((a, b) => b.negative - a.negative);\n            rangedObj.forEach(obj => {\n                arrView.push([view, obj.aspect, obj.negative, obj.menRate])\n            });\n            return arrView;\n        }, [\n            ['业务视觉', '指标', '指标负面声量', '指标提及率']\n        ]);\n\n        return [posSource, negSource, totalSource].map(source => ({\n            source\n        }))\n    }\n    return viewData\n}\n\nfunction getChartOneOption(source, emotionType) {\n    const lineY = emotionType === 'positive' ? 2 : 3;\n    return {\n        title: {\n            text: '自主分析'\n        },\n        dataset: [{\n            source,\n        }],\n        grid: {\n            top: 80,\n            bottom: 50,\n            left: 20,\n            right: 20,\n            containLabel: true\n        },\n        legend: {\n            left: 20,\n            top: 40,\n            data: [{\n                name: source[0][1],\n                icon: 'path://M0,0H10V10H0z'\n            }, {\n                name: source[0][lineY],\n                icon: 'path://M512 341.504A170.496 170.496 0 1 0 682.496 512 170.496 170.496 0 0 0 512 341.504z m0-170.496a341.504 341.504 0 0 1 330.752 256H1024v170.496h-181.248a341.504 341.504 0 0 1-660.992 0H0V426.496h181.248a341.504 341.504 0 0 1 330.752-256z',\n            }]\n        },\n        dataZoom: [{\n            show: \"slider\",\n            bottom: 20,\n            xAxisIndex: [0, 1],\n            height: 15,\n            handleSize: \"100%\",\n            showDetail: false\n        }],\n        tooltip: {\n            trigger: 'axis',\n            formatter: params => {\n                // console.log(params);\n                return params.reduce((arr, cur, idx) => {\n                    const {\n                        marker,\n                        data,\n                        dimensionNames\n                    } = cur;\n\n                    arr.push(`${marker} ${dimensionNames[!idx ? 1: lineY]}：${!idx ? data[1]: `${(data[lineY] * 100).toFixed(2)}%` }`)\n\n                    return arr;\n                }, [`<span style=\"font-size: 14px; color: #262626; font-weight: bold; padding-bottom: 8px; display: inline-block;\">${params[0].name}</span>`]).join('</br>')\n            }\n        },\n        xAxis: [0, 1].map(key => ({\n            type: 'category'\n        })),\n        yAxis: [0, 1].map(key => ({\n            type: 'value',\n            position: key ? 'left' : 'right',\n            max: 'dataMax',\n            axisLabel: {\n                formatter: val => key ? `${(val * 100).toFixed(0)}%` : val\n            }\n        })),\n        series: [{\n                type: 'bar',\n                name: source[0][1],\n                yAxisIndex: 0,\n                barMaxWidth: 24,\n                encode: {\n                    x: 0,\n                    y: 1\n                },\n            },\n            {\n                type: 'line',\n                name: source[0][lineY],\n                yAxisIndex: 1,\n                encode: {\n                    x: 0,\n                    y: lineY\n                },\n            }\n        ]\n    }\n}\n\nfunction getChartTwoOption(dataset, emotionType) {\n    const datasetIndex = emotionTypes.indexOf(emotionType);\n    const vmLabels = dataset[datasetIndex].source.reduce((vArr, tArr, idx) => {\n        if (idx > 0 && !vArr.includes(tArr[0])) {\n            vArr.push(tArr[0]);\n        }\n        return vArr;\n    }, []);\n    return {\n        title: {\n            text: dataset[datasetIndex].source[0][2]\n        },\n        dataset,\n        grid: {\n            top: 80,\n            bottom: 50,\n            left: 20,\n            right: 70,\n            containLabel: true\n        },\n        visualMap: [{\n            type: 'piecewise',\n            top: 40,\n            left: 20,\n            itemWidth: 10,\n            itemHeight: 10,\n            orient: 'horizontal',\n            dimension: 0,\n            categories: vmLabels.map(label => label),\n            inRange: {\n                symbol: 'rect',\n                color: multiPositiveColor\n            },\n            outOfRange: {\n                color: '#bfbfbf'\n            }\n        }],\n        dataZoom: [{\n            show: \"slider\",\n            bottom: 20,\n            xAxisIndex: 0,\n            height: 15,\n            handleSize: \"100%\",\n            showDetail: false\n        }],\n        tooltip: {\n            formatter: params => {\n                // console.log(params);\n                const {\n                    marker,\n                    data,\n                    dimensionNames\n                } = params;\n                return [`<span style=\"font-size: 14px; color: #262626; font-weight: bold; padding-bottom: 8px; display: inline-block;\">${data[1]}</span>`,\n                    `${dimensionNames[0]}：${data[0]}`,\n                    `${marker} ${dimensionNames[2]}：${(data[2] * 100).toFixed(2)}%`\n                ].join('</br>')\n            }\n        },\n        xAxis: {\n            type: 'category',\n        },\n        yAxis: {\n            type: 'value',\n            max: 1,\n            axisLabel: {\n                formatter: val => `${val * 100}%`\n            }\n        },\n        series: [{\n            type: 'bar',\n            datasetIndex,\n            barMaxWidth: 24,\n            markLine: {\n                symbol: 'none',\n                silent: true,\n                data: [{\n                    type: 'average',\n                    lineStyle: {\n                        color: '#BFBFBF'\n                    },\n                    label: {\n                        formatter: val => `{a|${(val.value * 100).toFixed(2)}%}`,\n                        rich: {\n                            a: {\n                                backgroundColor: '#BFBFBF',\n                                color: '#fff',\n                                padding: [4, 4]\n                            }\n                        }\n                    }\n                }]\n            },\n            encode: {\n                x: 1,\n                y: 2\n            }\n        }, ]\n    }\n}\n\nfunction getChartThreeOption(dataset, emotionType) {\n    const datasetIndex = emotionTypes.indexOf(emotionType);\n    const vmLabels = dataset[datasetIndex].source.reduce((vArr, tArr, idx) => {\n        if (idx > 0 && !vArr.includes(tArr[0])) {\n            vArr.push(tArr[0]);\n        }\n        return vArr;\n    }, []);\n    return {\n        title: {\n            text: dataset[datasetIndex].source[0][2]\n        },\n        dataset,\n        grid: {\n            top: 80,\n            bottom: 50,\n            left: 20,\n            right: 20,\n            containLabel: true\n        },\n        legend: {\n            left: 20,\n            top: 40,\n            itemWidth: 12,\n            itemHeight: 12,\n            data: [dataset[datasetIndex].source[0][3]],\n            icon: 'path://M512 341.504A170.496 170.496 0 1 0 682.496 512 170.496 170.496 0 0 0 512 341.504z m0-170.496a341.504 341.504 0 0 1 330.752 256H1024v170.496h-181.248a341.504 341.504 0 0 1-660.992 0H0V426.496h181.248a341.504 341.504 0 0 1 330.752-256z',\n        },\n        visualMap: [{\n            type: 'piecewise',\n            top: 40,\n            left: 110,\n            seriesIndex: 1,\n            itemWidth: 10,\n            itemHeight: 10,\n            orient: 'horizontal',\n            dimension: 0,\n            categories: vmLabels.map(label => label),\n            inRange: {\n                symbol: 'rect',\n                color: multiPositiveColor\n            },\n            outOfRange: {\n                color: '#bfbfbf'\n            }\n        }],\n        dataZoom: [{\n            show: \"slider\",\n            bottom: 20,\n            xAxisIndex: 0,\n            height: 15,\n            handleSize: \"100%\",\n            showDetail: false\n        }],\n        tooltip: {\n            trigger: 'axis',\n            formatter: params => {\n                console.log(params);\n                const [param1, param2] = params;\n                return [`<span style=\"font-size: 14px; color: #262626; font-weight: bold; padding-bottom: 8px; display: inline-block;\">${params[0].name}</span>`,\n                    `${param2.marker} ${param2.dimensionNames[2]}：${param2.data[2]}`,\n                    `${param1.marker} ${param1.dimensionNames[3]}：${(param1.data[3] * 100).toFixed(2)}%`,\n                ].join('</br>');\n            }\n        },\n        xAxis: [0, 1].map(key => ({\n            type: 'category',\n        })),\n        yAxis: [0, 1].map(key => ({\n            type: 'value',\n            max: !key ? 'dataMax' : undefined,\n            splitNumber: 3,\n            position: !key ? 'left' : 'right',\n            axisLabel: {\n                formatter: val => !key ? `${(val * 100).toFixed(0)}%` : val\n            }\n        })),\n        series: [{\n            type: 'line',\n            datasetIndex,\n            yAxisIndex: 0,\n            xAxisIndex: 0,\n            markLine: {\n                symbol: 'none',\n                silent: true,\n                data: [{\n                    type: 'average',\n                    lineStyle: {\n                        color: '#BFBFBF'\n                    },\n                    label: {\n                        formatter: val => `{a|${(val.value * 100).toFixed(2)}%}`,\n                        rich: {\n                            a: {\n                                backgroundColor: '#BFBFBF',\n                                color: '#fff',\n                                padding: [4, 4]\n                            }\n                        }\n                    }\n                }]\n            },\n            itemStyle: {\n                color: '#D96969'\n            },\n            encode: {\n                x: 1,\n                y: 3,\n                seriesName: 3,\n            }\n        }, {\n            type: 'bar',\n            datasetIndex,\n            xAxisIndex: 0,\n            yAxisIndex: 1,\n            barMaxWidth: 24,\n            encode: {\n                x: 1,\n                y: 2\n            }\n        }, ]\n    }\n}\n\nfunction getOption(chartData, chartType, emotionType) {\n    if (chartType === 1) {\n        return getChartOneOption(chartData, emotionType);\n    } else if (chartType === 2) {\n        return getChartTwoOption(chartData, emotionType);\n    } else if (chartType === 3) {\n        return getChartThreeOption(chartData, emotionType);\n    }\n};\n\nconst chartType = 3; // 1;2;3\nconst emotionType = 'positive'; // total;positive;negative\n\nconst data = getDemoData();\nconst chartData = transformChartData(data, chartType, emotionType);\nconst option = getOption(chartData, chartType, emotionType);\n\nconsole.log({\n    data,\n    chartData,\n    option\n})\n\nmEchart.setOption(option)","html":"","externalScripts":"https://dev.darlk.com/js/skieer.theme.js","updaterUID":"bd-2281899968","theme":"","layout":"","viewCount":35,"userName":"d***k","commentCount":0,"starCount":0,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xEICg_zO2N.png?v=1598262101156","isCustomThumbnail":1,"builtinTags":["category-work"],"customTags":[],"updaterUserName":"d***k"}}