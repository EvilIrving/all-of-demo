{"status":0,"data":{"cid":"x_INaHGsh6","authorUid":"bd-1847551832","authorUserName":"s***0","title":"贝塞尔曲线算法演示","description":"","latestVersion":5,"alwaysLatest":1,"createTime":"2020-05-17T13:43:09.000Z","lastUpdateTime":"2020-05-17T13:43:09.000Z","auth":2,"uid":"bd-1847551832","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":5,"parentVersion":4,"echartsVersion":"4.7.0","versionCreateTime":"2020-05-17T14:48:24.000Z","code":"var symbolSize = 20;\nvar data = [[0,0], [255,255]];\n\nvar _factorial = (n) => {\n    if (n > 20) {\n        return +Infinity\n    }\n    if (n === 0) {\n        return 1\n    }\n    return n * _factorial(n - 1)\n}\n\nfunction bezierPrams(n,t,i) {\n    if (i>=0 && i<=n) {\n        return _factorial(n)/(_factorial(i) * _factorial(n-i)) * Math.pow(1-t, n-i) * Math.pow(t, i)\n    }\n    return 0\n}\n\nfunction bezier(points, limit = 50) {\n    let length = points.length\n    if (length > 20 || length< 3) {\n        console.warn('只允许添加3-20个点')\n        return []\n    }\n    const ret = []\n    for (let i = 0; i<=limit; i++) {\n        const t = i / limit\n        let sum = [0, 0]\n        for(let j=0; j<length; j++) {\n            sum[0] = sum[0] + bezierPrams(length-1,t,j) * points[j][0]\n            sum[1] = sum[1] + bezierPrams(length-1,t,j) * points[j][1]\n        }\n        ret.push(sum)\n    }\n    return ret\n}\n\noption = {\n    animation: false,\n    title: {\n        text: '贝塞尔曲线算法演示'\n    },\n    tooltip: {\n        show: false,\n        triggerOn: 'none',\n        formatter: function (params) {\n            return 'X: ' + params.data[0].toFixed(2) + '<br>Y: ' + params.data[1].toFixed(2);\n        }\n    },\n    grid: {\n    },\n    xAxis: {\n        min: 0,\n        max: 255,\n        type: 'value',\n        axisLine: {onZero: false}\n    },\n    yAxis: {\n        min: 0,\n        max: 255,\n        type: 'value',\n        axisLine: {onZero: false}\n    },\n    dataZoom: [\n        {\n            type: 'slider',\n            xAxisIndex: 0,\n            filterMode: 'empty'\n        },\n        {\n            type: 'slider',\n            yAxisIndex: 0,\n            filterMode: 'empty'\n        },\n        {\n            type: 'inside',\n            xAxisIndex: 0,\n            filterMode: 'empty'\n        },\n        {\n            type: 'inside',\n            yAxisIndex: 0,\n            filterMode: 'empty'\n        }\n    ],\n    series: [\n        {\n            id: 'a',\n            type: 'line',\n            //smooth: true,\n            symbolSize: symbolSize,\n            data: data\n        }\n    ]\n};\n\n\nsetTimeout(function () {\n    // Add shadow circles (which is not visible) to enable drag.\n    myChart.setOption({\n        graphic: echarts.util.map(data, function (item, dataIndex) {\n            return {\n                type: 'circle',\n                position: myChart.convertToPixel('grid', item),\n                shape: {\n                    cx: 0,\n                    cy: 0,\n                    r: symbolSize / 2\n                },\n                invisible: true,\n                draggable: true,\n                ondrag: echarts.util.curry(onPointDragging, dataIndex),\n                onmousemove: echarts.util.curry(showTooltip, dataIndex),\n                onmouseout: echarts.util.curry(hideTooltip, dataIndex),\n                z: 100\n            };\n        })\n    });\n}, 0);\n\nwindow.addEventListener('resize', updatePosition);\n\nmyChart.on('dataZoom', updatePosition);\n\nfunction updatePosition() {\n    myChart.setOption({\n        graphic: echarts.util.map(data, function (item, dataIndex) {\n            return {\n                position: myChart.convertToPixel('grid', item)\n            };\n        })\n    });\n}\n\nfunction showTooltip(dataIndex) {\n    myChart.dispatchAction({\n        type: 'showTip',\n        seriesIndex: 0,\n        dataIndex: dataIndex\n    });\n}\n\nfunction hideTooltip(dataIndex) {\n    myChart.dispatchAction({\n        type: 'hideTip'\n    });\n}\n\nfunction onPointDragging(dataIndex, dx, dy) {\n    data[dataIndex] = myChart.convertFromPixel('grid', this.position);\n\n    // Update data\n   series =  [{\n        id: 'a',\n        type: 'line',\n        //smooth: true,\n        symbolSize: symbolSize,\n        data: data\n    },{\n        id: 'b',\n        type: 'line',\n        smooth: true,\n        data: data.length >2 ? bezier(data) : []\n    }]\n    myChart.setOption({ series });\n}\n\nfunction removePoint(dataIndex) {\n    data = [...data.slice(0, dataIndex), ...data.slice(dataIndex+1)]\n    update()\n}\n\nvar zr = myChart.getZr();\n\nfunction update() {\n    series =  [{\n        id: 'a',\n        type: 'line',\n        //smooth: true,\n        symbolSize: symbolSize,\n        data: data\n    },{\n        id: 'b',\n        type: 'line',\n        smooth: true,\n        symbolSize: 0,\n        data: data.length >2 ? bezier(data) : []\n    }]\n    myChart.setOption({ series });\n    setTimeout(function () {\n        // Add shadow circles (which is not visible) to enable drag.\n        myChart.setOption({\n            graphic: echarts.util.map(data, function (item, dataIndex) {\n                return {\n                    type: 'circle',\n                    position: myChart.convertToPixel('grid', item),\n                    shape: {\n                        cx: 0,\n                        cy: 0,\n                        r: symbolSize / 2\n                    },\n                    invisible: true,\n                    draggable: true,\n                    ondrag: echarts.util.curry(onPointDragging, dataIndex),\n                    onmousemove: echarts.util.curry(showTooltip, dataIndex),\n                    onmouseout: echarts.util.curry(hideTooltip, dataIndex),\n                    onclick: echarts.util.curry(removePoint, dataIndex),\n                    z: 100\n                };\n            })\n        });\n    }, 0);\n}\n\nzr.on('click', function (params) {\n    if (params.target && params.target.type === 'circle') {\n        return\n    }\n    var pointInPixel = [params.offsetX, params.offsetY];\n    var pointInGrid = myChart.convertFromPixel('grid', pointInPixel);\n\n    if (myChart.containPixel('grid', pointInPixel)) {\n        data.push(pointInGrid);\n        data.sort((a, b) => a[0]-b[0])\n\n        update()\n    }\n});\n\n","html":"","externalScripts":"","updaterUID":"bd-1847551832","theme":"","layout":"","viewCount":99,"userName":"s***0","commentCount":0,"starCount":0,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/x_INaHGsh6.png?v=1589726904797","isCustomThumbnail":0,"builtinTags":["category-work","dataZoom","graphic","grid","series-line","title","tooltip"],"customTags":[],"updaterUserName":"s***0"}}