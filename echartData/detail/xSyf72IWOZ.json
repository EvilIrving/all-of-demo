{"status":0,"data":{"cid":"xSyf72IWOZ","authorUid":"bd-658419289","authorUserName":"经***4","title":"三层折现图","description":"三层折现图","latestVersion":1,"alwaysLatest":1,"createTime":"2017-08-16T05:46:02.000Z","lastUpdateTime":"2017-08-16T05:46:02.000Z","auth":1,"uid":"bd-658419289","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"3.6.2","versionCreateTime":"2017-08-16T05:46:02.000Z","code":"var dataset = [{\r\n    \"time\": [\r\n        \"2017-07-12 15:08:05\",\r\n        \"2017-07-12 15:08:10\",\r\n        \"2017-07-12 15:08:15\",\r\n        \"2017-07-12 15:08:20\",\r\n        \"2017-07-12 15:08:25\",\r\n        \"2017-07-12 15:08:30\",\r\n        \"2017-07-12 15:08:35\",\r\n        \"2017-07-12 15:08:40\",\r\n        \"2017-07-12 15:08:45\",\r\n        \"2017-07-12 15:08:50\",\r\n        \"2017-07-12 15:08:55\",\r\n        \"2017-07-12 15:09:00\"\r\n    ],\r\n    \"cpu\": [\r\n        \"50\",\r\n        \"55\",\r\n        \"40\",\r\n        \"70\",\r\n        \"80\",\r\n        \"85\",\r\n        \"47\",\r\n        \"58\",\r\n        \"47\",\r\n        \"58\",\r\n        \"47\",\r\n        \"58\"\r\n    ],\r\n    \"memory\": [\r\n        \"47\",\r\n        \"58\",\r\n        \"96\",\r\n        \"28\",\r\n        \"25\",\r\n        \"58\",\r\n        \"47\",\r\n        \"74\",\r\n        \"52\",\r\n        \"14\",\r\n        \"25\",\r\n        \"84\"\r\n    ],\r\n    \"network\": [\r\n        \"17\",\r\n        \"04\",\r\n        \"14\",\r\n        \"47\",\r\n        \"25\",\r\n        \"14\",\r\n        \"14\",\r\n        \"25\",\r\n        \"14\",\r\n        \"82\",\r\n        \"14\",\r\n        \"42\"\r\n    ]\r\n}]\r\nvar set = [{\r\n        \"name\": \"cpu\",\r\n        \"color\": \"#2E8CC4\",\r\n        \"final_color\": \"blue\",\r\n        \"chartPosition\": \"1\",\r\n        \"min\": \"0\",\r\n        \"max\": \"100\",\r\n        \"unit\": \"%\"\r\n    }, {\r\n        \"name\": \"memory\",\r\n        \"color\": \"#AF5DC6\",\r\n        \"final_color\": \"purple\",\r\n        \"chartPosition\": \"2\",\r\n        \"min\": \"0\",\r\n        \"max\": \"100\",\r\n        \"unit\": \"%\"\r\n    }, {\r\n        \"name\": \"network\",\r\n        \"color\": \"#9ACD76\",\r\n        \"final_color\": \"green\",\r\n        \"chartPosition\": \"3\",\r\n        \"min\": \"0\",\r\n        \"max\": \"100\",\r\n        \"unit\": \"%\"\r\n    }]\r\n    /**\r\n     * 三层折线图\r\n     * param1  echarts的初始化id  echarts.init(document.getElementById('xxx'))\r\n     * param2  json数据  时间，数据集1，数据集2，数据集3\r\n     * param3  参数属性(name，color，final_color,chartPosition,min,max)  json\r\n     */\r\nfunction Broken_line(id, dataset, param) {\r\n    var color = \"#9A9A9C\"; //param  字体颜色  color\r\n    var background = \"#202624\"; //背景\r\n    // var divwidth = document.getElementById(id).offsetWidth; //幕板宽\r\n    // var divheight = document.getElementById(id).offsetHeight; //幕板高\r\n    var divwidth = 200;\r\n    var divheight = 400;\r\n    // var size = $(\"#\" + id).css('fontSize');//字体\r\n    var size = 16;\r\n    var height = parseInt(size) + 10; //离顶部距离\r\n    var width = parseInt(size) * 2 + 2; //距离两边的距离\r\n    var spacing = (divheight - height) / 3.1\r\n    var Myecharts = \"mycharts_\" + id;\r\n    // Myecharts = echarts.init(document.getElementById(id));\r\n    var count = dataset[0].time.length;//点数\r\n    var data = {\r\n        time: []\r\n    };\r\n    for (var i = 0; i < param.length; i++) {\r\n        data[param[i].name] = [];\r\n    }//插入数据\r\n    \r\n    //对数据处理，分别获取每个表格的数据最大值，最小值以及拥有的名字\r\n    var min_1 = \"\";\r\n    var min_2 = \"\";\r\n    var min_3 = \"\";\r\n    var name_1 = [];\r\n    var name_2 = [];\r\n    var name_3 = [];\r\n    var interval_1 = \"\";\r\n    var interval_2 = \"\";\r\n    var interval_3 = \"\";\r\n    for (var i = 0; i < param.length; i++) {\r\n        if (param[i].chartPosition == 1) {\r\n            min_1 = param[i].min;\r\n            interval_1 = param[i].max - param[i].min;\r\n            name_1.push(param[i].name)\r\n        } else if (param[i].chartPosition == 2) {\r\n            min_2 = param[i].min;\r\n            interval_2 = param[i].max - param[i].min;\r\n            name_2.push(param[i].name)\r\n        } else if (param[i].chartPosition == 3) {\r\n            min_3 = param[i].min;\r\n            interval_3 = param[i].max - param[i].min;\r\n            name_3.push(param[i].name)\r\n        }\r\n    }\r\n\r\n//根据名字以及数据获得数据所占比例\r\n    function init(name, data) {\r\n        for (var i = 0; i < name_1.length; i++) {\r\n            if (name = name_1[i]) {\r\n                return (data - min_1) / interval_1 * 100\r\n            }\r\n        }\r\n        for (var i = 0; i < name_2.length; i++) {\r\n            if (name = name_2[i]) {\r\n                return (data - min_2) / interval_2 * 100\r\n            }\r\n        }\r\n        for (var i = 0; i < name_3.length; i++) {\r\n            if (name = name_3[i]) {\r\n                return (data - min_3) / interval_3 * 100\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n//插入数据\r\n    for (var i = 0; i < count; i++) {\r\n        data.time.push([new Date(dataset[0].time[i]), new Date(dataset[0].time[i])]);\r\n        for (var j = 0; j < param.length; j++) {\r\n            data[param[j].name].push([new Date(dataset[0].time[i]), init(param[j].name, dataset[0][param[j].name][i])]);\r\n        }\r\n    }\r\n\r\n    function makeXAxis(gridIndex, opt) {\r\n        return echarts.util.merge({\r\n            type: 'time',\r\n            gridIndex: gridIndex,\r\n            axisLine: {\r\n                onZero: false,\r\n                lineStyle: {\r\n                    color: color\r\n                }\r\n            },\r\n            axisTick: {\r\n                show: false\r\n            },\r\n            axisLabel: {\r\n                show: false,\r\n                textStyle: {\r\n                    fontSize: parseInt(size),\r\n                    margin: 10\r\n                }\r\n            },\r\n            //***************改******************************\r\n            splitLine: {\r\n                show: false,\r\n                lineStyle: {\r\n                    color: color\r\n                }\r\n            },\r\n            min: data.time[0][0],\r\n            max: data.time[count - 1][0],\r\n            axisPointer: {\r\n                lineStyle: {\r\n                    color: 'transparent'\r\n                }\r\n            }\r\n        }, opt || {}, true);\r\n    }\r\n\r\n    function makeYAxis(gridIndex, opt) {\r\n        return echarts.util.merge({\r\n            type: 'value',\r\n            gridIndex: gridIndex,\r\n            nameLocation: 'middle',\r\n            nameTextStyle: {\r\n                color: color, //左图标的颜色\r\n                //fontSize: '30%'\r\n            },\r\n            boundaryGap: false,\r\n            axisTick: {\r\n                show: false\r\n            },\r\n            axisLine: {\r\n                lineStyle: {\r\n                    color: color\r\n                }\r\n            }, //左边线条颜色\r\n            axisLabel: {\r\n                show: true,\r\n                // interval: '0',\r\n            },\r\n            splitLine: {\r\n                show: true,\r\n                lineStyle: {\r\n                    color: color,\r\n                    width: 0.3\r\n                }\r\n            },\r\n            position: 'right',\r\n            min: 0,\r\n            max: 100\r\n        }, opt || {}, true);\r\n    }\r\n\r\n    function makeGrid(top, opt) {\r\n        return echarts.util.merge({\r\n            top: top,\r\n            height: spacing,\r\n            left: width,\r\n            right: width\r\n        }, opt || {}, true);\r\n    }\r\n    var serious = [];\r\n    for (var i = 0; i < param.length; i++) {\r\n        //for(var j = 1; j < 4; j++){\r\n        if (param[i].chartPosition == 1) {\r\n            serious.push({\r\n                name: param[i].name,\r\n                type: 'line',\r\n                symbol: 'circle',\r\n                symbolSize: 2,\r\n                xAxisIndex: 3,\r\n                yAxisIndex: 3,\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: param[i].color,\r\n                        borderWidth: 1\r\n                    }\r\n                },\r\n                data: data[param[i].name],\r\n                areaStyle: {\r\n                    normal: {\r\n                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\r\n                            offset: 0,\r\n                            color: param[i].color\r\n                        }, {\r\n                            offset: 1,\r\n                            color: param[i].final_color\r\n                        }], false)\r\n                    }\r\n                }\r\n\r\n            });\r\n        }\r\n        if (param[i].chartPosition == 2) {\r\n            serious.push({\r\n                name: param[i].name,\r\n                type: 'line',\r\n                symbol: 'circle',\r\n                symbolSize: 2,\r\n                xAxisIndex: 1,\r\n                yAxisIndex: 1,\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: param[i].color,\r\n                        borderWidth: 1\r\n                    }\r\n                },\r\n                data: data[param[i].name],\r\n                areaStyle: {\r\n                    normal: {\r\n                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\r\n                            offset: 0,\r\n                            color: param[i].color\r\n                        }, {\r\n                            offset: 1,\r\n                            color: param[i].final_color\r\n                        }], false)\r\n                    }\r\n                }\r\n\r\n            });\r\n        }\r\n        if (param[i].chartPosition == 3) {\r\n            serious.push({\r\n                name: param[i].name,\r\n                type: 'line',\r\n                symbol: 'circle',\r\n                symbolSize: 2,\r\n                xAxisIndex: 2,\r\n                yAxisIndex: 2,\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: param[i].color,\r\n                        borderWidth: 1\r\n                    }\r\n                },\r\n                data: data[param[i].name],\r\n                areaStyle: {\r\n                    normal: {\r\n                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\r\n                            offset: 0,\r\n                            color: param[i].color\r\n                        }, {\r\n                            offset: 1,\r\n                            color: param[i].final_color\r\n                        }], false)\r\n                    }\r\n                }\r\n\r\n            });\r\n        }\r\n        //}\r\n    }\r\n    option = {\r\n        backgroundColor: background,\r\n        tooltip: {\r\n            trigger: 'axis',\r\n            backgroundColor: '#fff',\r\n            borderColor: 'rgba(0, 0, 200, 0.2)',\r\n            borderWidth: 1,\r\n            borderRadius: 0,\r\n            padding: 1,\r\n            formatter: function(params) {\r\n                if (params.length) {\r\n                    params.unshift({\r\n                        //seriesName: 'time',\r\n                        //value: [null, \"\"],\r\n                        //color: '#5193f2'\r\n                    });\r\n                    return echarts.util.map(['cpu', 'memory', 'network'], function(seriesName) {\r\n                        for (var i = 0; i < params.length; i++) {\r\n                            var param = params[i];\r\n                            var style = 'color: ' + param.color;\r\n                            if (param.seriesName === seriesName) {\r\n                                return '<span style=\"' + style + '\">' +\r\n                                    param.seriesName +\r\n                                    ':</span><span style=\"' +\r\n                                    style + '\">' + param.value[1] + '</span>';\r\n                            }\r\n                        }\r\n                    }).join('<br>');\r\n                }\r\n            }\r\n        },\r\n        axisPointer: {\r\n            link: [{\r\n                xAxisIndex: 'all'\r\n            }],\r\n            snap: true\r\n        },\r\n        grid: [\r\n            makeGrid(height),\r\n            makeGrid(height + spacing),\r\n            makeGrid(height + spacing * 2),\r\n            makeGrid(height, {\r\n                height: spacing\r\n            }),\r\n            makeGrid(height, {\r\n                show: true,\r\n                height: spacing * 3,\r\n                borderColor: color,\r\n                borderWidth: 1,\r\n                z: 2\r\n            })\r\n        ],\r\n        xAxis: [\r\n            makeXAxis(0),\r\n            makeXAxis(1),\r\n            makeXAxis(2),\r\n            makeXAxis(3, {\r\n                axisLine: {\r\n                    show: false\r\n                }\r\n            }),\r\n            makeXAxis(4, {\r\n                position: 'top',\r\n                axisLine: {\r\n                    show: false,\r\n                    onZero: false\r\n                },\r\n                splitLine: {\r\n                    show: true,\r\n                    lineStyle: {\r\n                        color: color,\r\n                        width: 0.3\r\n                    }\r\n                },\r\n                axisLabel: {\r\n                    show: true,\r\n                    textStyle: {\r\n                        color: color\r\n                    }\r\n                },\r\n                axisPointer: {\r\n                    show: true,\r\n                    lineStyle: {\r\n                        color: '#478cf1',\r\n                        width: 0.5\r\n                    }\r\n                }\r\n            })\r\n        ],\r\n        yAxis: [\r\n            makeYAxis(0, {\r\n                // name: param[0].name\r\n            }),\r\n            makeYAxis(1, {\r\n                // name: param[1].name\r\n            }),\r\n            makeYAxis(2, {\r\n                // name: param[2].name\r\n            }),\r\n            makeYAxis(3),\r\n            makeYAxis(4)\r\n        ],\r\n        series: serious\r\n    };\r\n    myChart.setOption(option)\r\n// 数据实时更新部分\r\n    // this.update_Broken_line = function(message) {\r\n    //     var name_set = [];\r\n    //     var sign = [];\r\n    //     for (var i = 0; i < message.length; i++) {\r\n    //         if (message[i].chartType == \"line\") {\r\n    //             name_set.push(message[i].chartName);\r\n    //             sign.push(i);\r\n    //         }\r\n    //     }\r\n    //     if (name_set.length != 0) {\r\n    //         data.time.splice(0, 1);\r\n    //         data.time.push([new Date(message[0].values[0].timeStamp), new Date(message[0].values[0].timeStamp)]);\r\n    //         for (var j = 0; j < param.length; j++) {\r\n    //             var isexist = 0;\r\n    //             var issign = \"\";\r\n    //             data[param[j].name].splice(0, 1);\r\n    //             for (var i = 0; i < name_set.length; i++) {\r\n    //                 if (param[j].name == name_set[i]) {\r\n    //                     isexist = 1;\r\n    //                     issign = i;\r\n    //                 }\r\n    //             }\r\n    //             if (isexist == 1) {\r\n    //                 data[param[j].name].push([new Date(message[0].values[0].timeStamp), init(param[j].name, message[issign].values[0].value)]);\r\n    //             } else {\r\n    //                 data[param[j].name].push([new Date(message[0].values[0].timeStamp), data[param[j].name][data[param[j].name].length - 1][1]]);\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     serious_update = [];\r\n    //     for (var i = 0; i < param.length; i++) {\r\n    //         for (var j = 1; j < 4; j++) {\r\n    //             if (param[i].chartPosition == j) {\r\n    //                 serious_update.push({\r\n    //                     name: param[i].name,\r\n    //                     data: data[param[i].name]\r\n    //                 });\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     myChart.setOption({\r\n    //         xAxis: [\r\n    //             makeXAxis(0),\r\n    //             makeXAxis(1),\r\n    //             makeXAxis(2),\r\n    //             makeXAxis(3),\r\n    //             makeXAxis(4, {\r\n    //                 axisLabel: {\r\n    //                     show: true,\r\n    //                     showMaxLabel: true,\r\n    //                     showMinLabel: true,\r\n    //                     textStyle: {\r\n    //                         color: color\r\n    //                     }\r\n    //                 }\r\n    //             })\r\n    //         ],\r\n    //         series: serious_update\r\n    //     });\r\n    // }\r\n}\r\nBroken_line(\"main\", dataset, set)","html":"","externalScripts":"","updaterUID":"bd-658419289","theme":"","layout":"","viewCount":116,"userName":"经***4","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xSyf72IWOZ.png?v=1502862362438","isCustomThumbnail":0,"builtinTags":["category-work","grid","series-line","tooltip"],"customTags":[],"updaterUserName":"经***4"}}