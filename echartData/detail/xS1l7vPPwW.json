{"status":0,"data":{"cid":"xS1l7vPPwW","authorUid":"bd-2215764494","authorUserName":"p***g","title":"Voxelize image","description":"","latestVersion":4,"alwaysLatest":1,"createTime":"2017-08-08T16:30:16.000Z","lastUpdateTime":"2021-03-20T05:02:22.000Z","auth":2,"uid":"bd-2215764494","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":4,"parentVersion":3,"echartsVersion":"3.8.0","versionCreateTime":"2019-01-24T02:12:19.000Z","code":"var canvas = document.createElement(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\n\nvar imgData;\nvar currentImg;\n\n// Configurations\nvar config = {\n    scale: 0.3,\n    roughness: 0,\n    metalness: 1,\n    projection: \"orthographic\",\n    depthOfField: 4,\n    lockY: false,\n    move: true,\n    sameColor: false,\n    color: '#777',\n    colorContrast: 1.2,\n    lightIntensity: 1,\n    lightColor: '#fff',\n    lightRotate: 30,\n    lightPitch: 40,\n    AO: 1.5,\n    showEnvironment: false,\n    \n    barNumber: 80,\n    barBevel: 0.18,\n    barSize: 1.2\n};\n\noption = {\n    tooltip: {},\n    backgroundColor: \"#000\",\n    xAxis3D: {\n        type: \"value\"\n    },\n    yAxis3D: {\n        type: \"value\"\n    },\n    zAxis3D: {\n        type: \"value\",\n        min: 0,\n        max: 100\n    },\n    grid3D: {\n        show: false,\n        viewControl: {\n            projection: \"perspective\",\n            alpha: 45,\n            beta: -45,\n            panSensitivity: config.move ? 1 : 0,\n            rotateSensitivity: config.lockY ? [1, 0] : 1,\n            damping: 0.9,\n            distance: 60\n        },\n        postEffect: {\n            enable: true,\n            bloom: {\n                intensity: 0.2\n            },\n            screenSpaceAmbientOcclusion: {\n                enable: true,\n                intensity: 1.5,\n                radius: 5,\n                quality: \"high\"\n            },\n            screenSpaceReflection: {\n                enable: true\n            },\n            depthOfField: {\n                enable: true,\n                blurRadius: config.depthOfField,\n                fstop: 10,\n                focalDistance: 55\n            }\n        },\n        boxDepth: 100,\n        boxHeight: 20,\n        environment: \"none\",\n        light: {\n            main: {\n                shadow: true,\n                intensity: 2\n            },\n            ambientCubemap: {\n                texture: '/asset/get/s/data-1491838644249-ry33I7YTe.hdr',\n                exposure: 2,\n                diffuseIntensity: 0.2,\n                specularIntensity: 1.5\n            }\n        }\n    }\n};\n\nfunction updateData(data, width, height) {\n    console.time(\"update\");\n    var dataItem = [];\n    var dataProvider = {\n        getItem: function(i) {\n            var r = data[i * 4];\n            var g = data[i * 4 + 1];\n            var b = data[i * 4 + 2];\n\n            var lum = 0.2125 * r + 0.7154 * g + 0.0721 * b;\n            lum = (lum - 125) * config.scale + 50;\n            dataItem[0] = i % width;\n            dataItem[1] = height - Math.floor(i / width);\n            dataItem[2] = lum;\n            return dataItem;\n        },\n        count: function() {\n            return data.length / 4;\n        }\n    };\n\n    myChart.setOption({\n        grid3D: {\n            boxWidth: 100 / height * width\n        },\n        series: [{\n            animation: false,\n            type: \"bar3D\",\n            shading: \"realistic\",\n            realisticMaterial: {\n                roughness: config.roughness,\n                metalness: config.metalness\n            },\n            barSize: config.barSize,\n            bevelSize: config.barBevel,\n            silent: true,\n            itemStyle: {\n                color: config.sameColor ? config.color : function(params) {\n                    var i = params.dataIndex;\n                    var r = data[i * 4] / 255;\n                    var g = data[i * 4 + 1] / 255;\n                    var b = data[i * 4 + 2] / 255;\n                    var lum = 0.2125 * r + 0.7154 * g + 0.0721 * b;\n                    r *= lum * config.colorContrast;\n                    g *= lum * config.colorContrast;\n                    b *= lum * config.colorContrast;\n                    return [r, g, b, 1];\n                }\n            },\n            data: dataProvider\n        }]\n    });\n\n    console.timeEnd(\"update\");\n\n    setTimeout(function() {\n        myChart.getZr().refresh()\n    }, 100);\n}\n\nfunction loadImage(img) {\n    var height = (canvas.height = Math.min(config.barNumber, img.height));\n    var aspect = img.width / img.height;\n    var width = (canvas.width = Math.round(height * aspect));\n\n    ctx.drawImage(img, 0, 0, width, height);\n\n    imgData = ctx.getImageData(0, 0, width, height);\n\n    updateData(imgData.data, width, height);\n}\n\nvar gui = new dat.GUI();\n\nfunction updateDataWhenChange() {\n    if (imgData) {\n        updateData(imgData.data, imgData.width, imgData.height);\n    }\n}\ngui.add(config, \"scale\", -1, 1).onFinishChange(updateDataWhenChange);\ngui.add(config, \"colorContrast\", 0, 2).onFinishChange(updateDataWhenChange);\ngui.add(config, 'sameColor').onChange(updateDataWhenChange);\ngui.addColor(config, 'color').onChange(updateDataWhenChange);\n\n[\"roughness\", \"metalness\"].forEach(function(propName) {\n    gui.add(config, propName, 0, 1).step(0.01).onFinishChange(function() {\n        myChart.setOption({\n            series: [{\n                realisticMaterial: {\n                    roughness: config.roughness,\n                    metalness: config.metalness\n                }\n            }]\n        });\n    });\n});\n\nfunction updateControlAndLight() {\n    myChart.setOption({\n        grid3D: {\n            environment: config.showEnvironment ? 'auto' : '#000',\n            viewControl: {\n                panSensitivity: config.move ? 1 : 0,\n                rotateSensitivity: config.lockY ? [1, 0] : 1\n            },\n            light: {\n                main: {\n                    intensity: config.lightIntensity,\n                    color: config.lightColor,\n                    alpha: config.lightPitch,\n                    beta: config.lightRotate\n                },\n                ambientCubemap: {\n                    texture: '/asset/get/s/data-1491838644249-ry33I7YTe.hdr'\n                }\n            },\n            postEffect: {\n                screenSpaceAmbientOcclusion: {\n                    intensity: config.AO\n                }\n            }\n        }\n    });\n}\n\ngui.add(config, 'lightIntensity', 0, 10).onChange(updateControlAndLight);\ngui.add(config, 'lightRotate', -180, 180).onChange(updateControlAndLight);\ngui.add(config, 'lightPitch', 10, 90).onChange(updateControlAndLight);\n// gui.add(config, 'AO', 0, 2).onChange(updateControlAndLight);\n// gui.addColor(config, 'lightColor').onChange(updateControlAndLight);\n\n// FIXME Not work\n// gui.add(config, 'showEnvironment').onChange(updateControlAndLight);\n// gui.add(config, 'environment', ['canyon', 'pisa']).onChange(updateControlAndLight);\n\n// gui.add(config, 'move').onChange(updateControlAndLight);\n// gui.add(config, 'lockY').onChange(updateControlAndLight);\n\ngui.add(config, 'barNumber', 0, 256).onFinishChange(function () {\n    loadImage(currentImg);\n});\ngui.add(config, 'barSize', 0, 2).onFinishChange(function () {\n    myChart.setOption({\n        series: [{\n            barSize: config.barSize\n        }]\n    })\n});\ngui.add(config, 'barBevel', 0, 1).onFinishChange(function () {\n    myChart.setOption({\n        series: [{\n            bevelSize: config.barBevel\n        }]\n    })\n});\ngui.add(config, 'depthOfField', 0., 10).onFinishChange(function () {\n    myChart.setOption({\n        grid3D: {\n            postEffect: {\n                depthOfField: {\n                    blurRadius: config.depthOfField\n                }\n            },\n        }\n    }) \n});\n\n\n// Handle file uploads.\nfunction readFile(file) {\n    if (!file || !file.type.match(/image/)) {\n        return;\n    }\n\n    var fileReader = new FileReader();\n    fileReader.onload = function(e) {\n        img = new Image();\n        img.onload = function() {\n            loadImage(img);\n            currentImg = img;\n        };\n        img.src = e.target.result;\n    };\n    fileReader.readAsDataURL(file);\n}\n\n$('<div id=\"image-upload\">Drop files here or click to upload</div>').appendTo(\n    $('#chart-panel')\n).css({\n  width: '300px',\n  height: '100px',\n  'line-height': '100px',\n  'text-align': 'center',\n  cursor: 'pointer',\n  background: 'rgba(255, 255, 255, 0.2)',\n  'border-radius': '4px',\n  border: '2px dashed #999',\n  position: 'absolute',\n  right: '10px',\n  bottom: '10px',\n  'z-index': '10',\n  color: '#fff'\n})\n\n$(\"#image-upload\").on(\"dragover\", function(e) {\n    e.stopPropagation();\n    e.preventDefault();\n});\n$(\"#image-upload\")[0].addEventListener(\"drop\", function(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    var files = e.dataTransfer.files;\n    return readFile(files[0]);\n});\n$(\"#image-upload\").on(\"click\", function() {\n    var $file = $('<input type=\"file\" />');\n    $file.on(\"change\", function(e) {\n        readFile(e.target.files[0]);\n    });\n    $file.click();\n});\n\n// Default\nvar img = new Image();\nimg.onload = function() {\n    loadImage(img);\n    currentImg = img;\n};\nimg.src = \"/asset/get/s/data-1502210091353-S1mNuDPDW.png\";","html":"","externalScripts":"https://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js","updaterUID":"bd-2215764494","theme":"default","layout":"","viewCount":252388,"userName":"p***g","commentCount":26,"starCount":347,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xS1l7vPPwW.png?v=1616216546186","isCustomThumbnail":1,"builtinTags":["category-work","grid3D","series-bar3D","tooltip"],"customTags":["echarts-gl"],"updaterUserName":"p***g"}}