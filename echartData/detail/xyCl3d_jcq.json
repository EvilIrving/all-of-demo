{"status":0,"data":{"cid":"xyCl3d_jcq","authorUid":"bd-2804485459","authorUserName":"疯***子","title":"血缘图第二版","description":"","latestVersion":5,"alwaysLatest":1,"createTime":"2019-08-13T02:22:30.000Z","lastUpdateTime":"2019-08-13T02:22:30.000Z","auth":2,"uid":"bd-2804485459","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":5,"parentVersion":4,"echartsVersion":"4.2.1","versionCreateTime":"2019-08-19T16:34:41.000Z","code":"let tableId = 1;\nconst data = [\n    [\n        {\n            tableId:2,\n            tableName:'我是祖先表AAAAAAAAAA',\n        },{\n            tableId:3,\n            tableName:'我是祖先表B',\n        }\n    ],\n    [\n        {\n            tableId:4,\n            parentId:[2],\n            tableName:'我是父亲表A',\n        },{\n            tableId:5,\n            parentId:[2,3,22],\n            tableName:'我是父亲表BAAAAAA',\n        },{\n            tableId:6,\n            parentId:[3],\n            tableName:'我是父亲表C',\n        },{\n            tableId:7,\n            parentId:[3],\n            tableName:'我是父亲表D',\n        }\n    ],\n  [\n        {\n            parentId: [4,5,6,7],\n            tableId:1,\n            tableName:'我是被选中的表',\n        }\n    ],\n    [\n        {\n            tableId:8,\n            parentId: [1],\n            tableName:'我是子表AAAAA',\n        },{\n            tableId:9,\n            parentId: [1],\n            tableName:'我是子表B',\n        }\n    ],\n    [\n        {\n            tableId:10,\n            parentId:[8,1],\n            tableName:'我是孙子表A',\n        },{\n            tableId:11,\n            parentId:[8,9],\n            tableName:'我是孙子表B',\n        },{\n            tableId:12,\n            parentId:[8,9],\n            tableName:'我是孙子表CCCCC',\n        },{\n            tableId:13,\n            parentId:[9],\n            tableName:'我是孙子表D',\n        }\n    ],\n];\nlet gleft = 150, gtop = 100;\n\nlet allTable = [];\n\nlet allLine = [];\n\n// let hasDataKeys = ['grandfatherTableList','fatherTableList','selfList','childTableList','grandsonTableList'];\n// hasDataKeys.forEach((val,index) => {\n//     if(data[val] && data[val].length < 0) {\n//         hasDataKeys.splice(index, 1)\n//     }\n// })\n\n// console.log('hasDataKeys',hasDataKeys)\nlet lengthKey = [];\nlet lengthKeyList = [];\nfor(let i = 0; i < data.length; i++){\n    lengthKeyList[i] = data[i].map(val => val.tableName.length*15);\n    lengthKey[i] = data[i].map(val => val.tableName).join('').length*25;\n}\nfunction getW(lengthList, listLength, index) {\n    let w = 0;\n    let datafloor = listLength/2;\n    let middleNum = Math.floor(listLength/2);\n    // console.log(middleNum)\n    if (index < datafloor) {\n        for(let i = index; i < middleNum; i++) {\n            if (i === index) {\n                w += lengthList[i] / 2\n            } else {\n                w += lengthList[i]\n            }\n        }\n        w = -w\n    } else if (index >= datafloor) {\n      for(let i = middleNum; i < index + 1; i++) {\n            if (i === index) {\n                w += lengthList[i]/2\n            } else {\n                w += lengthList[i]\n            }\n        }\n    }\n    return w\n}\nconst maxLengthMid = Math.max(...lengthKey) / 2;\nconsole.log(maxLengthMid)\nfor(let i = 0; i < data.length; i++){\n    let datalist = data[i];\n    let lengthList = lengthKeyList[i];\n    if (datalist) {\n        let listLength = datalist.length;\n        let middleNum = listLength/2;\n        let leftLength = 0, rightLength = 0;\n        let sumW = gleft;\n        for(let j = 0; j < datalist.length; j++){\n            let _data = datalist[j];\n            let nameW = _data.tableName.length*12;\n            if (j < middleNum) {\n                leftLength--;\n            } else if (j >= middleNum) {\n                rightLength++;\n            }\n            let moveLength = getW(lengthList, listLength, j)\n            if (moveLength < 0) {\n                moveLength += leftLength*5\n            } else if (moveLength > 0) {\n                moveLength += rightLength*5\n            }\n            allTable.push({\n                id: _data.tableId,\n                level: i,\n                name: _data.tableName,\n                tableName: _data.tableName,\n                data: _data,\n                parentId: _data.parentId,\n                value: [maxLengthMid + moveLength, gtop + i*100],\n                symbol: 'rect',\n                symbolSize: [nameW, 25],\n                itemStyle: {\n                    normal: {\n                        color: _data.tableId === tableId?'red': \"#337ab7\"\n                    }\n                }\n            })\n            \n        }\n    }\n}\nconsole.log(allTable)\n\nfor(let i = 0; i < allTable.length; i++) {\n    let data = allTable[i];\n    let _line = [];\n    data.parentId && data.parentId.forEach(val => {\n        let parentData = allTable.find(item => item.id == val)\n        if(parentData){\n            _line.push({\n                fromName: parentData.tableName,\n                toName: data.tableName,\n                coords: [\n                    parentData.value,\n                    data.value\n                ]\n            })\n        }\n    })\n    allLine = allLine.concat(_line)\n}\nconsole.log(allLine)\nconst temp = {\n    id:'',\n    name: \"数据表A\",\n    value: [gleft+0, gtop+0],\n    symbol: 'rect',\n    symbolSize: [80, 25],\n    itemStyle: {\n        normal: {\n            color: \"#337ab7\"\n        }\n    }\n};\nconst line = {\n    fromName: \"数据表A\",\n    toName: \"数据表AA\",\n    coords: [\n        [112, 215],\n        [232, 215]\n    ]\n};\n\n            \n            \n\noption = {\n    title: {\n        text: '数据库表血缘图',\n    },\n    // legend: {\n    //     show: true,\n    //     orient: 'vertical',\n    //     top: 'bottom',\n    //     left: 'right',\n    //     data: ['地点', '线路'],\n    //     textStyle: {\n    //         color: '#fff'\n    //     }\n    // },\n    tooltip: {\n        trigger: 'item',\n        show: true,\n        // alwaysShowContent:true,\n        // position:[185,75],\n        // formatter:'{b}的表信息，巴拉巴拉'\n        formatter: function(params, ticket, callback) {\n            // console.log(params)\n            if (params.componentSubType === 'scatter') {\n                return params.name + '的表信息，巴拉巴拉~~'\n            } else if (params.componentSubType === 'lines') {\n                return '从' + params.data.fromName + '到' + params.data.toName\n            }\n        }\n    },\n    geo: {\n        map: '北京市',\n        label: {\n            emphasis: {\n                show: false\n            }\n        },\n        roam: true,\n        itemStyle: {\n            normal: {\n                areaColor: '#323c48',\n                borderColor: '#404a59'\n            },\n            emphasis: {\n                areaColor: '#2a333d'\n            }\n        }\n    },\n    series: [{\n            name: '数据库表',\n            //type: 'effectScatter',\n            type: 'scatter',\n            coordinateSystem: 'geo',\n            zlevel: 2,\n            rippleEffect: {\n                brushType: 'stroke',\n                period: 7,\n                scale: 26\n            },\n            label: {\n                normal: {\n                    show: true,\n                    //   position:'top',\n                    formatter: '{b}',\n                    color: '#000',\n                },\n                emphasis: {\n                    show: true,\n                    // position: 'right',\n                    formatter: '{b}'\n                }\n            },\n            symbolSize: 2,\n            showEffectOn: 'render',\n            itemStyle: {\n                normal: {\n                    color: '#46bee9'\n                }\n            },\n            data: allTable\n        },\n        {\n            name: '线路',\n            type: 'lines',\n            coordinateSystem: 'geo',\n            zlevel: 2,\n            large: true,\n            effect: {\n                show: true,\n                constantSpeed: 30,\n                symbol: 'arrow', //ECharts 提供的标记类型包括 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow'\n                symbolSize: 6,\n                trailLength: 0,\n            },\n\n            lineStyle: {\n                normal: {\n                    color: 'green',\n                    /*\n                    color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n                            offset: 0, color: '#58B3CC'\n                        }, {\n                            offset: 1, color: '#F58158'\n                        }], false),*/\n                    width: 2,\n                    opacity: 0.6,\n                    curveness: 0\n                }\n            },\n            data: allLine\n        },\n    ]\n};\nconst clickFun = param => {\n    console.log(param.event.target)\n    param.event.target.style.textFill = \"blue\"\n}\n\nmyChart.on(\"click\", clickFun);","html":"","externalScripts":"","updaterUID":"bd-2804485459","theme":"","layout":"","viewCount":235,"userName":"疯***子","commentCount":0,"starCount":0,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xyCl3d_jcq.png?v=1566232481841","isCustomThumbnail":0,"builtinTags":["category-work","geo","series-lines","series-scatter","title","tooltip"],"customTags":[],"updaterUserName":"疯***子"}}