{"status":0,"data":{"cid":"xVToY8zMAd","authorUid":"obd-oDmQA_pCt06ZRvXaPS98PhmoJcmUY1a","authorUserName":"z***呆","title":"d3饼图柱状图联动","description":"完整代码，会有报错，建议复制到本地尝试","latestVersion":1,"alwaysLatest":1,"createTime":"2020-09-03T02:55:58.000Z","lastUpdateTime":"2020-09-03T02:55:58.000Z","auth":1,"uid":"obd-oDmQA_pCt06ZRvXaPS98PhmoJcmUY1a","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"4.8.0","versionCreateTime":"2020-09-03T02:55:58.000Z","code":"<div id='dashboard'>\r\n\r\n\r\n<script>\r\n  function dashboard(id, fData){\r\n      var barColor = 'steelblue';\r\n      function segColor(c){ return {low:\"#FFC35E\", mid:\"#287CE8\",high:\"#41E4DE\"}[c]; }\r\n      \r\n      // 计算每个状态的总数。\r\n      fData.forEach(function(d){d.total=d.freq.low+d.freq.mid+d.freq.high;});\r\n      \r\n      // 函数处理直方图。\r\n      function histoGram(fD){\r\n          var hG={},    hGDim = {t: 30, r: 0, b: 50, l: 0};\r\n          hGDim.w = 390 - hGDim.l - hGDim.r, \r\n          hGDim.h = 300 - hGDim.t - hGDim.b;\r\n              \r\n          //为直方图创建svg\r\n          var hGsvg = d3.select(id).append(\"svg\")\r\n              .attr(\"width\", hGDim.w + hGDim.l + hGDim.r)\r\n              .attr(\"height\", hGDim.h + hGDim.t + hGDim.b).append(\"g\")\r\n              .attr(\"transform\", \"translate(\" + hGDim.l + \",\" + hGDim.t + \")\");\r\n  \r\n          // 创建x轴映射函数。\r\n          var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.6)\r\n                  .domain(fD.map(function(d) { return d[0]; }));\r\n  \r\n          // 向直方图svg添加x轴。\r\n          hGsvg.append(\"g\").attr(\"class\", \"x axis\")\r\n              .attr(\"transform\", \"translate(0,\" + hGDim.h + \")\")\r\n              .call(d3.svg.axis().scale(x).orient(\"bottom\"));\r\n  \r\n          // 为y轴映射创建函数。\r\n          var y = d3.scale.linear().range([hGDim.h, 30])\r\n                  .domain([0, d3.max(fD, function(d) { return d[1]; })]);\r\n  \r\n          // 为直方图创建条形图，以包含矩形和频率标签。\r\n          var bars = hGsvg.selectAll(\".bar\").data(fD).enter()\r\n                  .append(\"g\").attr(\"class\", \"bar\");\r\n          \r\n          //创建一个矩形。\r\n          bars.append(\"rect\")\r\n              .attr(\"x\", function(d) { return x(d[0]); })\r\n              .attr(\"y\", function(d) { return y(d[1]); })\r\n              .attr(\"width\", x.rangeBand())\r\n              .attr(\"height\", function(d) { return hGDim.h - y(d[1]); })\r\n              .attr('fill',barColor)\r\n              // .on(\"mouseover\",mouseover)// mouseover is defined below.\r\n              // .on(\"mouseout\",mouseout);// mouseout is defined below.\r\n              \r\n          //在矩形上方创建频率标签。\r\n          bars.append(\"text\").text(function(d){ return d3.format(\",\")(d[1])})\r\n              .attr(\"x\", function(d) { return x(d[0])+x.rangeBand()/2; })\r\n              .attr(\"y\", function(d) { return y(d[1])-5; })\r\n              .attr(\"text-anchor\", \"middle\");\r\n          \r\n          function mouseover(d){  // 鼠标悬停时调用的实用函数。\r\n              // 筛选所选状态。\r\n              var st = fData.filter(function(s){ return s.State == d[0];})[0],\r\n                  nD = d3.keys(st.freq).map(function(s){ return {type:s, freq:st.freq[s]};});\r\n                 \r\n              // 派图和图例的调用更新功能。 \r\n              pC.update(nD);\r\n              leg.update(nD);\r\n          }\r\n          \r\n          function mouseout(d){    // 在mouseout上调用的实用函数。\r\n              // 重置饼图和图例。  \r\n              pC.update(tF);\r\n              leg.update(tF);\r\n          }\r\n          \r\n          // 创建用于更新条的函数。这将被派图使用。\r\n          hG.update = function(nD, color){\r\n              // 更新y轴图的域以反映频率的变化。\r\n              y.domain([0, d3.max(nD, function(d) { return d[1]; })]);\r\n              \r\n              //将新数据附加到条上。\r\n              var bars = hGsvg.selectAll(\".bar\").data(nD);\r\n              \r\n              // 过渡矩形的高度和颜色。\r\n              bars.select(\"rect\").transition().duration(500)\r\n                  .attr(\"y\", function(d) {return y(d[1]); })\r\n                  .attr(\"height\", function(d) { return hGDim.h - y(d[1]); })\r\n                  .attr(\"fill\", color);\r\n  \r\n              // 转换频率标签的位置和改变值。\r\n              bars.select(\"text\").transition().duration(500)\r\n                  .text(function(d){ return d3.format(\",\")(d[1])})\r\n                  .attr(\"y\", function(d) {return y(d[1])-5; });            \r\n          }        \r\n          return hG;\r\n      }\r\n      \r\n      // 函数处理pieChart。\r\n      function pieChart(pD){\r\n          var pC ={},    pieDim ={w:270, h: 300};\r\n          pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;\r\n                  \r\n          // 为饼图创建svg。\r\n          var piesvg = d3.select(id).append(\"svg\")\r\n              .attr(\"width\", pieDim.w).attr(\"height\", pieDim.h).append(\"g\")\r\n              .attr(\"transform\", \"translate(\"+pieDim.w/2+\",\"+pieDim.h/2+\")\");\r\n          \r\n          // 创建函数来绘制饼图切片的弧线。\r\n          var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(85);\r\n  \r\n          // 创建一个函数来计算饼切片角度。\r\n          var pie = d3.layout.pie().sort(null).value(function(d) { return d.freq; });\r\n  \r\n          // 画出饼片。\r\n          piesvg.selectAll(\"path\").data(pie(pD)).enter().append(\"path\").attr(\"d\", arc)\r\n              .each(function(d) { this._current = d; })\r\n              .style(\"fill\", function(d) { return segColor(d.data.type); })\r\n              .on(\"mouseover\",mouseover).on(\"mouseout\",mouseout);\r\n  \r\n          // 创建函数来更新饼图。这将被直方图使用。\r\n          pC.update = function(nD){\r\n              piesvg.selectAll(\"path\").data(pie(nD)).transition().duration(500)\r\n                  .attrTween(\"d\", arcTween);\r\n          }        \r\n          // 将在鼠标移到饼图切片上时调用的实用函数。\r\n          function mouseover(d){\r\n              // 使用新数据调用直方图的更新函数\r\n              hG.update(fData.map(function(v){ \r\n                  return [v.State,v.freq[d.data.type]];}),segColor(d.data.type));\r\n          }\r\n          //在鼠标移出饼图切片时调用的实用函数。\r\n          function mouseout(d){\r\n              // 调用直方图中所有数据的更新函数。\r\n              hG.update(fData.map(function(v){\r\n                  return [v.State,v.total];}), barColor);\r\n          }\r\n          //动画派片需要一个定制函数，该函数指定\r\n          //如何绘制中间路径。\r\n          function arcTween(a) {\r\n              var i = d3.interpolate(this._current, a);\r\n              this._current = i(0);\r\n              return function(t) { return arc(i(t));    };\r\n          }    \r\n          return pC;\r\n      }\r\n      \r\n      // 函数处理图例。\r\n      function legend(lD){\r\n          var leg = {};\r\n              \r\n          // 为图例创建表。\r\n          var legend = d3.select(id).append(\"table\").attr('class','legend');\r\n          \r\n          // 为每个段创建一行。\r\n          var tr = legend.append(\"tbody\").selectAll(\"tr\").data(lD).enter().append(\"tr\");\r\n              \r\n          // 为每个段创建第一列。\r\n          tr.append(\"td\").append(\"svg\").attr(\"width\", '16').attr(\"height\", '16').append(\"rect\")\r\n              .attr(\"width\", '16').attr(\"height\", '16')\r\n        .attr(\"fill\",function(d){ return segColor(d.type); });\r\n              \r\n          // 为每个段创建第二列。\r\n          tr.append(\"td\").text(function(d){ return d.type;});\r\n  \r\n          // 为每个段创建第三列。\r\n          tr.append(\"td\").attr(\"class\",'legendFreq')\r\n              .text(function(d){ return d3.format(\",\")(d.freq);});\r\n  \r\n          // 为每个段创建第四列。\r\n          tr.append(\"td\").attr(\"class\",'legendPerc')\r\n              .text(function(d){ return getLegend(d,lD);});\r\n  \r\n          // 用于更新图例的实用函数。\r\n          leg.update = function(nD){\r\n              // 更新附加到行元素的数据。\r\n              var l = legend.select(\"tbody\").selectAll(\"tr\").data(nD);\r\n  \r\n              // 更新频率。\r\n              l.select(\".legendFreq\").text(function(d){ return d3.format(\",\")(d.freq);});\r\n  \r\n              // 更新百分比列。\r\n              l.select(\".legendPerc\").text(function(d){ return getLegend(d,nD);});        \r\n          }\r\n          \r\n          function getLegend(d,aD){ // 用效用函数计算百分比。\r\n              return d3.format(\"%\")(d.freq/d3.sum(aD.map(function(v){ return v.freq; })));\r\n          }\r\n  \r\n          return leg;\r\n      }\r\n      \r\n      // 计算所有状态的段总频率。\r\n      var tF = ['low','mid','high'].map(function(d){ \r\n          return {type:d, freq: d3.sum(fData.map(function(t){ return t.freq[d];}))}; \r\n      });    \r\n      \r\n      // 按状态计算所有段的总频率。\r\n      var sF = fData.map(function(d){return [d.State,d.total];});\r\n  \r\n      var pC = pieChart(tF), // 创建的饼形图。\r\n          hG = histoGram(sF), // 创建柱状图。\r\n          leg= legend(tF);  // 创建一个图例。\r\n  }\r\n  </script>\r\n\r\n<script>\r\n  var freqData=[\r\n  {State:'AL',freq:{low:4786, mid:1319, high:249}}\r\n  ,{State:'AZ',freq:{low:1101, mid:412, high:674}}\r\n  ,{State:'CT',freq:{low:932, mid:2149, high:418}}\r\n  ,{State:'DE',freq:{low:832, mid:1152, high:1862}}\r\n  \r\n  ];\r\n  \r\n  dashboard('#dashboard',freqData);\r\n  </script>","html":"","externalScripts":"","updaterUID":"obd-oDmQA_pCt06ZRvXaPS98PhmoJcmUY1a","theme":"","layout":"","viewCount":53,"userName":"z***呆","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xVToY8zMAd.png?v=1599101758618","isCustomThumbnail":1,"builtinTags":["category-work"],"customTags":[],"updaterUserName":"z***呆"}}