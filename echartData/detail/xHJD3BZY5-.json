{"status":0,"data":{"cid":"xHJD3BZY5-","authorUid":"bd-2215764494","authorUserName":"p***g","title":"Global Wind Visualization 2","description":"","latestVersion":1,"alwaysLatest":1,"createTime":"2017-09-15T07:47:58.000Z","lastUpdateTime":"2017-09-15T07:47:58.000Z","auth":2,"uid":"bd-2215764494","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"3.7.1","versionCreateTime":"2017-09-15T07:47:58.000Z","code":"$.getJSON('/asset/get/s/data-1505455520728-HkKia1tqW.json', function(windData) {\n    buildGrid(windData, function(header, grid) {\n        var data = [];\n        var p = 0;\n        var maxMag = 0;\n        var minMag = Infinity;\n        for (var j = 0; j < header.ny; j++) {\n            for (var i = 0; i < header.nx; i++) {\n                var vx = grid[j][i][0];\n                var vy = grid[j][i][1];\n                var mag = Math.sqrt(vx * vx + vy * vy);\n                var lng = i / header.nx * 360;\n                if (lng >= 180) {\n                    lng = 180 - lng;\n                }\n                // 数据是一个一维数组\n                // [ [经度, 维度，向量经度方向的值，向量维度方向的值] ]\n                data.push([\n                    lng,\n                    90 - j / header.ny * 180,\n                    vx,\n                    vy,\n                    mag\n                ]);\n                maxMag = Math.max(mag, maxMag);\n                minMag = Math.min(mag, minMag);\n            }\n        }\n        myChart.setOption({\n            visualMap: {\n                left: 'right',\n                min: minMag,\n                max: maxMag,\n                dimension: 4,\n                inRange: {\n                    // color: ['green', 'yellow', 'red']\n                    color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n                },\n                realtime: false,\n                calculable: true,\n                textStyle: {\n                    color: '#fff'\n                }\n            },\n            bmap: {\n                center: [0, 0],\n                zoom: 1,\n                roam: true,\n                mapStyle: {\n                    'styleJson': [{\n                        'featureType': 'water',\n                        'elementType': 'all',\n                        'stylers': {\n                            'color': '#031628'\n                        }\n                    }, {\n                        'featureType': 'land',\n                        'elementType': 'geometry',\n                        'stylers': {\n                            'color': '#000102'\n                        }\n                    }, {\n                        'featureType': 'highway',\n                        'elementType': 'all',\n                        'stylers': {\n                            'visibility': 'off'\n                        }\n                    }, {\n                        'featureType': 'arterial',\n                        'elementType': 'geometry.fill',\n                        'stylers': {\n                            'color': '#000000'\n                        }\n                    }, {\n                        'featureType': 'arterial',\n                        'elementType': 'geometry.stroke',\n                        'stylers': {\n                            'color': '#0b3d51'\n                        }\n                    }, {\n                        'featureType': 'local',\n                        'elementType': 'geometry',\n                        'stylers': {\n                            'color': '#000000'\n                        }\n                    }, {\n                        'featureType': 'railway',\n                        'elementType': 'geometry.fill',\n                        'stylers': {\n                            'color': '#000000'\n                        }\n                    }, {\n                        'featureType': 'railway',\n                        'elementType': 'geometry.stroke',\n                        'stylers': {\n                            'color': '#08304b'\n                        }\n                    }, {\n                        'featureType': 'subway',\n                        'elementType': 'geometry',\n                        'stylers': {\n                            'lightness': -70\n                        }\n                    }, {\n                        'featureType': 'building',\n                        'elementType': 'geometry.fill',\n                        'stylers': {\n                            'color': '#000000'\n                        }\n                    }, {\n                        'featureType': 'all',\n                        'elementType': 'labels.text.fill',\n                        'stylers': {\n                            'color': '#857f7f'\n                        }\n                    }, {\n                        'featureType': 'all',\n                        'elementType': 'labels.text.stroke',\n                        'stylers': {\n                            'color': '#000000'\n                        }\n                    }, {\n                        'featureType': 'building',\n                        'elementType': 'geometry',\n                        'stylers': {\n                            'color': '#022338'\n                        }\n                    }, {\n                        'featureType': 'green',\n                        'elementType': 'geometry',\n                        'stylers': {\n                            'color': '#062032'\n                        }\n                    }, {\n                        'featureType': 'boundary',\n                        'elementType': 'all',\n                        'stylers': {\n                            'color': '#465b6c'\n                        }\n                    }, {\n                        'featureType': 'manmade',\n                        'elementType': 'all',\n                        'stylers': {\n                            'color': '#022338'\n                        }\n                    }, {\n                        'featureType': 'label',\n                        'elementType': 'all',\n                        'stylers': {\n                            'visibility': 'off'\n                        }\n                    }]\n                }\n            },\n            series: [{\n                type: 'flowGL',\n                coordinateSystem: 'bmap',\n                data: data,\n                particleDensity: 256,\n                particleSpeed: 2,\n                particleSize: 1,\n                // gridWidth: windData.nx,\n                // gridHeight: windData.ny,\n                itemStyle: {\n                    opacity: 0.7\n                }\n            }]\n        });\n    });\n});\n\n\n// https://github.com/Esri/wind-js/blob/master/windy.js#L41\nvar createWindBuilder = function(uComp, vComp) {\n    var uData = uComp.data,\n        vData = vComp.data;\n    return {\n        header: uComp.header,\n        //recipe: recipeFor(\"wind-\" + uComp.header.surface1Value),\n        data: function(i) {\n            return [uData[i], vData[i]];\n        }\n    }\n};\n\nvar createBuilder = function(data) {\n    var uComp = null,\n        vComp = null,\n        scalar = null;\n\n    data.forEach(function(record) {\n        switch (record.header.parameterCategory + \",\" + record.header.parameterNumber) {\n            case \"2,2\":\n                uComp = record;\n                break;\n            case \"2,3\":\n                vComp = record;\n                break;\n            default:\n                scalar = record;\n        }\n    });\n\n    return createWindBuilder(uComp, vComp);\n};\n\nvar buildGrid = function(data, callback) {\n    var builder = createBuilder(data);\n\n    var header = builder.header;\n    var λ0 = header.lo1,\n        φ0 = header.la1; // the grid's origin (e.g., 0.0E, 90.0N)\n    var Δλ = header.dx,\n        Δφ = header.dy; // distance between grid points (e.g., 2.5 deg lon, 2.5 deg lat)\n    var ni = header.nx,\n        nj = header.ny; // number of grid points W-E and N-S (e.g., 144 x 73)\n    var date = new Date(header.refTime);\n    date.setHours(date.getHours() + header.forecastTime);\n\n    // Scan mode 0 assumed. Longitude increases from λ0, and latitude decreases from φ0.\n    // http://www.nco.ncep.noaa.gov/pmb/docs/grib2/grib2_table3-4.shtml\n    var grid = [],\n        p = 0;\n    var isContinuous = Math.floor(ni * Δλ) >= 360;\n    for (var j = 0; j < nj; j++) {\n        var row = [];\n        for (var i = 0; i < ni; i++, p++) {\n            row[i] = builder.data(p);\n        }\n        if (isContinuous) {\n            // For wrapped grids, duplicate first column as last column to simplify interpolation logic\n            row.push(row[0]);\n        }\n        grid[j] = row;\n    }\n    callback(header, grid);\n};","html":"","externalScripts":"http://api.map.baidu.com/api?v=2.0&ak=ZUONbpqGBsYGXNIYHicvbAbM,http://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js,/dep/echarts/latest/extension/bmap.min.js","updaterUID":"bd-2215764494","theme":"","layout":"","viewCount":2223,"userName":"p***g","commentCount":2,"starCount":4,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xHJD3BZY5-.png?v=1505461682756","isCustomThumbnail":1,"builtinTags":["category-work"],"customTags":["echarts-gl"],"updaterUserName":"p***g"}}