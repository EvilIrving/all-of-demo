{"status":0,"data":{"cid":"xH1-8P6ST-","authorUid":"bd-2215764494","authorUserName":"p***g","title":"Particles","description":"","latestVersion":2,"alwaysLatest":1,"createTime":"2017-10-19T06:33:44.000Z","lastUpdateTime":"2021-04-25T02:52:29.000Z","auth":2,"uid":"bd-2215764494","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":2,"parentVersion":1,"echartsVersion":"3.7.2","versionCreateTime":"2017-10-19T09:46:49.000Z","code":"var zr = myChart.getZr();\n\n\n//////// Helper math methods\nfunction scaleAndAdd(out, v1, v2, a) {\n    out[0] = v1[0] + v2[0] * a;\n    out[1] = v1[1] + v2[1] * a;\n    return out;\n}\n\nfunction sub(out, v1, v2) {\n    out[0] = v1[0] - v2[0];\n    out[1] = v1[1] - v2[1];\n    return out;\n}\n\nfunction len(v) {\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n\n//////// Random or constant value getters\n\nvar Constant = function(val) {\n    var isArray = val instanceof Array;\n    this.get = function(out) {\n        if (isArray) {\n            out = out || [];\n            for (var i = 0; i < val.length; i++) {\n                out[i] = val[i];\n            }\n            return out;\n        }\n        return val;\n    }\n}\n\n// Random1D\nvar Random1D = function(min, max) {\n    var range = max - min;\n    this.get = function() {\n        return Math.random() * range + min;\n    };\n};\n// Random2D\nvar Random2D = function(min, max) {\n    var rangeX = max[0] - min[0];\n    var rangeY = max[1] - min[1];\n\n    this.get = function(out) {\n        if (!out) {\n            out = [];\n        }\n        out[0] = rangeX * Math.random() + min[0];\n        out[1] = rangeY * Math.random() + min[1];\n        return out;\n    };\n};\n\n\n\n\n\n\n/////////// Force fields\nfunction ForceField(force) {\n    this.force = force || [];\n}\n\nForceField.prototype.applyTo = function(velocity, position, weight, deltaTime) {\n    scaleAndAdd(velocity, velocity, this.force, deltaTime);\n}\n\nfunction BoxCollision(rect) {\n    this.rect = rect || [\n        [0, 0],\n        [100, 100]\n    ];\n}\n\nBoxCollision.prototype.applyTo = function(velocity, position, weight, deltaTime) {\n    var rect = this.rect;\n    var min = rect[0];\n    var max = rect[1];\n    position = position;\n    velocity = velocity;\n    if (position[0] < min[0] || position[0] > max[0]) {\n        velocity[0] = -velocity[0] * 0.6;\n    }\n    if (position[1] < min[1] || position[1] > max[1]) {\n        velocity[1] = -velocity[1] * 0.6;\n    }\n}\n\nfunction RepulsiveField(center, k) {\n    this.center = center;\n    this.k = k;\n}\n\nvar v = []\nRepulsiveField.prototype.applyTo = function(velocity, position, weight, deltaTime) {\n    sub(v, position, this.center);\n    var l = len(v);\n    var k = this.k;\n    var f = k / l;\n    scaleAndAdd(velocity, velocity, v, f / l);\n}\n\n\n\n/////////// Particle constructor\n\nfunction Particle() {\n    this.position = [];\n    this.oldPosition = [];\n\n    this.velocity = [];\n\n    this.life = 1;\n\n    this.age = 0;\n\n    this.path = null;\n}\n\nParticle.prototype.update = function(deltaTime) {\n    this.oldPosition[0] = this.position[0];\n    this.oldPosition[1] = this.position[1];\n    if (this.velocity) {\n        scaleAndAdd(this.position, this.position, this.velocity, deltaTime);\n    }\n}\n\nfunction Emitter(createPath) {\n    this.max = 4000;\n    this.amount = 15;\n\n    this.life = null;\n    this.position = null;\n    this.velocity = null;\n\n    this._particlePool = [];\n\n    for (var i = 0; i < this.max; i++) {\n        var particle = new Particle();\n        particle.emitter = this;\n        particle.path = createPath(particle);\n        this._particlePool.push(particle);\n    }\n}\n\nEmitter.prototype.emit = function(out) {\n    var amount = Math.min(this._particlePool.length, this.amount);\n\n    for (var i = 0; i < amount; i++) {\n        var particle = this._particlePool.pop();\n        if (this.position) {\n            this.position.get(particle.position);\n            particle.oldPosition[0] = particle.position[0];\n            particle.oldPosition[1] = particle.position[1];\n        }\n        if (this.velocity) {\n            this.velocity.get(particle.velocity);\n        }\n        if (this.life) {\n            particle.life = this.life.get();\n        }\n\n        particle.age = 0;\n\n        out.push(particle);\n    }\n}\n\nEmitter.prototype.kill = function(particle) {\n    this._particlePool.push(particle);\n}\n\nfunction ParticleEffect(zr) {\n\n    this.zr = zr;\n\n    this._particles = [];\n\n    this._effectors = [];\n\n    this._emitters = [];\n\n    this._elapsedTime = 0;\n\n    this._emitting = true;\n\n    this._shapeBundle = new echarts.graphic.CompoundPath({\n        shape: {\n            paths: []  \n        },\n        style: {\n            fill: 'none',\n            stroke: '#fff',\n            lineWidth: 3\n        }\n    });\n    zr.add(this._shapeBundle);\n}\n\nParticleEffect.prototype = {\n\n    addEmitter: function(emitter) {\n        emitter.zr = this.zr;\n        this._emitters.push(emitter);\n    },\n\n    addEffector: function(effector) {\n        this._effectors.push(effector);\n    },\n\n    update: function(deltaTime) {\n        // MS => Seconds\n        deltaTime /= 1000;\n        this._elapsedTime += deltaTime;\n\n        var particles = this._particles;\n\n        if (this._emitting) {\n            for (var i = 0; i < this._emitters.length; i++) {\n                this._emitters[i].emit(particles);\n            }\n            if (this.oneshot) {\n                this._emitting = false;\n            }\n        }\n\n        var pathList = [];\n        // Aging\n        var len = particles.length;\n        for (var i = 0; i < len;) {\n            var p = particles[i];\n            p.age += deltaTime;\n            if (p.age >= p.life) {\n                p.emitter.kill(p);\n                particles[i] = particles[len - 1];\n                particles.pop();\n                len--;\n            } else {\n                pathList.push(p.path);\n                i++;\n            }\n        }\n\n        this._shapeBundle.shape.paths = pathList;\n\n        for (var i = 0; i < len; i++) {\n            // Update\n            var p = particles[i];\n            if (this._effectors.length > 0) {\n                for (var j = 0; j < this._effectors.length; j++) {\n                    this._effectors[j].applyTo(p.velocity, p.position, p.weight, deltaTime);\n                }\n            }\n            p.update(deltaTime);\n\n            var path = p.path;\n            if (path) {\n                path.shape.x1 = p.oldPosition[0];\n                path.shape.y1 = p.oldPosition[1];\n                path.shape.x2 = p.position[0];\n                path.shape.y2 = p.position[1];\n            }\n        }\n        this._shapeBundle.dirty();\n    }\n};\n\nvar particleEffect;\n\nfunction createForceField(x, y, k) {\n    var center = [x, y];\n    particleEffect.addEffector(new RepulsiveField(\n        center, k\n    ));\n    var circle = new echarts.graphic.Circle({\n        style: {\n            fill: k > 0 ? '#800' : '#080'\n        },\n        shape: {\n            r: 10\n        },\n        position: [center[0], center[1]],\n        ondrag: function() {\n            center[0] = this.position[0];\n            center[1] = this.position[1];\n        },\n        draggable: true\n    });\n    zr.add(circle);\n}\n\nfunction init(opts) {\n    opts = opts || {};\n    particleEffect = new ParticleEffect(zr);\n\n    var emitter = new Emitter(function() {\n        return new echarts.graphic.Line({\n            shape: {\n                x1: 0,\n                x2: 0,\n                y1: 0,\n                y2: 0\n            },\n            // position: [100, 50],\n            silent: true\n        });\n    });\n    emitter.position = opts.random ? new Random2D(\n        [10, 10], [20, 20]\n    ) : new Constant[10, 10];\n\n    emitter.life = opts.random ? new Random1D(4, 6) : new Constant(1)\n\n    particleEffect.addEmitter(emitter);\n\n\n    if (opts.collision) {\n        particleEffect.addEffector(new BoxCollision([\n            [0, 0],\n            [zr.getWidth(), zr.getHeight()]\n        ]));\n    }\n    if (opts.forceField) {\n        createForceField(300, 300, 150);\n        createForceField(150, 150, -100);\n        emitter.velocity = new Random2D(\n            [120, 80], [80, 120]\n        );\n    } else {\n        emitter.velocity = opts.random ? new Random2D(\n            [400, 50], [100, 10]\n        ) : new Constant([500, 100]);\n        particleEffect.addEffector(new ForceField([0, 300]));\n    }\n\n    zr.animation.on('frame', function(deltaTime) {\n        particleEffect.update(deltaTime);\n    });\n\n    if (opts.motionBlur) {\n        zr.configLayer(0, {\n            motionBlur: true,\n            lastFrameAlpha: 0.9\n        });\n    }\n}\n\n\ninit({\n    random: true,\n    collision: true,\n    motionBlur: true,\n    forceField: true\n});\n\nvar option = {};","html":"","externalScripts":"","updaterUID":"bd-2215764494","theme":"default","layout":"","viewCount":13780,"userName":"p***g","commentCount":7,"starCount":39,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xH1-8P6ST-.png?v=1619319149613","isCustomThumbnail":1,"builtinTags":["category-work"],"customTags":[],"updaterUserName":"p***g"}}