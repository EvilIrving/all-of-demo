{"status":0,"data":{"cid":"xBy8Sk4onZ","authorUid":"bd-1225088207","authorUserName":"shangyichuan","title":"Family Tree","description":"Generate the family tree, currently support 3 layers. Can extend the function to fullfill you requirements.","latestVersion":1,"alwaysLatest":1,"createTime":"2017-10-11T05:42:21.000Z","lastUpdateTime":"2017-10-11T05:42:21.000Z","auth":2,"uid":"bd-1225088207","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"3.7.2","versionCreateTime":"2017-10-11T05:42:21.000Z","code":"var male_image = 'M321.778,95.024l30-0.049l-0.154-94.821L256.802,0l-0.049,30l43.741,0.071l-58.583,58.583  c-26.385-21.595-59.13-33.339-93.68-33.339c-39.594,0-76.817,15.419-104.814,43.417C15.419,126.729,0,163.953,0,203.547  s15.419,76.818,43.416,104.815s65.221,43.416,104.814,43.416s76.818-15.419,104.815-43.416  c54.215-54.215,57.572-140.324,10.073-198.49l58.588-58.588L321.778,95.024z M231.833,287.149  c-22.331,22.331-52.021,34.629-83.603,34.629S86.96,309.48,64.629,287.149C42.298,264.818,30,235.128,30,203.547  s12.298-61.271,34.629-83.602s52.021-34.629,83.602-34.629c31.581,0,61.271,12.298,83.603,34.629  C277.931,166.044,277.931,241.051,231.833,287.149z';\nvar female_image = 'M355.578,148.231C355.578,66.496,289.082,0,207.347,0S59.115,66.496,59.115,148.231  c0,76.672,58.514,139.933,133.231,147.476v47.601h-41.568v30h41.568v41.385h30v-41.385h41.568v-30h-41.568v-47.601  C297.064,288.164,355.578,224.903,355.578,148.231z M89.115,148.231C89.115,83.038,142.153,30,207.347,30  s118.231,53.038,118.231,118.231S272.54,266.462,207.347,266.462S89.115,213.424,89.115,148.231z';\nvar nodes = [];\nvar links = [];\nvar legend_data = [];\n\n// root node self\nvar mouse_gender = \"M\";\nvar image_path = \"\";\nvar image_mate_path = \"\";\nif (mouse_gender == \"F\") {\n    image_path = 'path://' + female_image + '';\n    image_mate_path = 'path://' + male_image + '';\n} else {\n    image_path = 'path://' + male_image + '';\n    image_mate_path = 'path://' + female_image + '';\n}\nvar root_x = 15;\nvar root_y = 30;\nnodes.push({\n    x: root_x,\n    y: root_y,\n    symbol: image_path,\n    label: {\n        normal: {\n            position: 'bottom',\n            color: 'red',\n            fontweight: 'bold'\n        }\n    },\n    itemStyle: {\n        normal: {\n            color: 'blue', //圆点的颜色\n            label: {\n                position: 'bottom',\n                textStyle: {\n                    color: 'blue'\n                }\n            }\n        }\n    },\n    name: \"self\",\n    value: \"self\"\n});\nlegend_data.push(\"self\");\n\nnodes.push({\n    x: root_x - 10,\n    y: root_y - 10,\n    symbol: 'path://' + male_image + '',\n    label: {\n        normal: {\n            position: 'bottom',\n            color: 'black',\n        }\n    },\n    itemStyle: {\n        normal: {\n            color: 'blue'\n        }\n    },\n    name: \"father\",\n    value: \"father\"\n});\n\nnodes.push({\n    x: root_x + 10,\n    y: root_y - 10,\n    symbol: 'path://' + female_image + '',\n    label: {\n        normal: {\n            position: 'bottom',\n            color: 'black',\n        }\n    },\n    itemStyle: {\n        normal: {\n            color: 'red'\n        }\n    },\n    name: \"mother\",\n    value: \"mother\"\n});\n\n//generate the nodes between father and mother\nnodes.push({\n    x: root_x,\n    y: root_y - 10,\n    itemStyle: {\n        normal: {\n            opacity: 0\n        }\n    },\n    name: \"parent_node\"\n});\n//generate the node that between parent_node and self\nnodes.push({\n    x: root_x,\n    y: root_y - 5,\n    itemStyle: {\n        normal: {\n            opacity: 0\n        }\n    },\n    name: \"parent_brage\"\n});\n//generate the mate node\nnodes.push({\n    x: root_x + 15,\n    y: root_y,\n    symbol: image_mate_path,\n    label: {\n        normal: {\n            position: 'bottom',\n            color: 'red',\n            fontweight: 'bold'\n        }\n    },\n    name: \"wife\",\n    value: \"wife\",\n    type: \"wife\"\n});\nlegend_data.push(\"wife\");\n//generate the node between self and mate node\nnodes.push({\n    x: root_x + 7.5,\n    y: root_y,\n    itemStyle: {\n        normal: {\n            opacity: 0\n        }\n    },\n    name: \"mate_node\"\n});\n\nvar litter_temp_left = -10;\nvar litter_with_mate_right = 25;\n//var litter_temp_right=10;\nfor (var i = 0; i < 4; i++) {\n    // && has_mate\n    if (i % 2 === 0) {\n        nodes.push({\n            x: root_x + litter_temp_left,\n            y: root_y,\n            symbol: \"M\" == \"M\" ? 'path://' + male_image + '' : 'path://' + female_image + '',\n            label: {\n                normal: {\n                    position: 'bottom',\n                    color: 'black',\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'blue'\n                }\n            },\n            name: \"brother\" + i.toString(),\n            value: \"brother\" + i.toString()\n        });\n        nodes.push({\n            x: root_x + litter_temp_left,\n            y: root_y - 5,\n            //symbol: data.mouse_litter_info[i].gender == \"M\" ? 'image://'+male_image+'' : 'image://'+female_image+'',\n            itemStyle: {\n                normal: {\n                    opacity: 0\n                }\n            },\n            name: \"litter\" + i.toString()\n        });\n        links.push({\n            source: \"litter\" + i.toString(),\n            target: 'parent_brage'\n        });\n        links.push({\n            source: \"litter\" + i.toString(),\n            target: \"brother\" + i.toString()\n        });\n        litter_temp_left -= 10;\n    }\n    if (i % 2 !== 0) {\n        nodes.push({\n            x: root_x + litter_with_mate_right,\n            y: root_y,\n            symbol: \"F\" == \"M\" ? 'path://' + male_image + '' : 'path://' + female_image + '',\n            label: {\n                normal: {\n                    position: 'bottom',\n                    color: 'black',\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'red'\n                }\n            },\n            name: \"sister\" + i.toString(),\n            value: \"sister\" + i.toString()\n        });\n        nodes.push({\n            x: root_x + litter_with_mate_right,\n            y: root_y - 5,\n            itemStyle: {\n                normal: {\n                    opacity: 0\n                }\n            },\n            name: \"litter\" + i.toString()\n        });\n        links.push({\n            source: \"litter\" + i.toString(),\n            target: 'parent_brage'\n        });\n        links.push({\n            source: \"litter\" + i.toString(),\n            target: \"sister\" + i.toString()\n        });\n\n        litter_with_mate_right += 10;\n    }\n}\n\nvar temp_left = -5;\nvar temp_right = 15;\nfor (var i = 0; i < 5; i++) {\n    if (i === 0) {\n        nodes.push({\n            x: root_x + 7.5,\n            y: root_y + 10,\n            symbol: \"M\" == \"M\" ? 'path://' + male_image + '' : 'path://' + female_image + '',\n            label: {\n                normal: {\n                    position: 'bottom',\n                    color: 'black',\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'blue'\n                }\n            },\n            name: \"children\" + i.toString(),\n            value: \"children\" + i.toString()\n        });\n    } else {\n        nodes.push({\n            x: i % 2 === 0 ? root_x + temp_right : root_x + temp_left,\n            y: root_y + 10,\n            symbol: \"F\" == \"M\" ? 'path://' + male_image + '' : 'path://' + female_image + '',\n            label: {\n                normal: {\n                    position: 'bottom',\n                    color: 'black',\n                }\n            },\n            itemStyle: {\n                normal: {\n                    color: 'red'\n                }\n            },\n            name: \"children\" + i.toString(),\n            value: \"children\" + i.toString()\n        });\n        temp_left -= 5;\n        temp_right += 5;\n    }\n}\n\n//generate the linkers\nlinks.push({\n    source: \"self\",\n    target: 'parent_node'\n});\nlinks.push({\n    source: \"father\",\n    target: 'parent_node'\n});\nlinks.push({\n    source: \"mother\",\n    target: 'parent_node'\n});\n\nlinks.push({\n    source: \"self\",\n    target: \"wife\"\n});\n\nfor (var i = 0; i < 5; i++) {\n    if (i === 0) {\n        links.push({\n            source: \"mate_node\",\n            target: \"children0\"\n        });\n    } else {\n        links.push({\n            source: \"children0\",\n            target: \"children\" + i.toString()\n        });\n    }\n}\n\noption = {\n    title: {\n        text: 'Family Tree'\n    },\n    tooltip: {\n        trigger: 'item',\n        formatter: \"{b}\"\n    },\n    legend: {\n        orient: 'vertical',\n        data: legend_data\n    },\n    series: [{\n        type: 'graph',\n        layout: 'none',\n        symbolSize: 24,\n        label: {\n            normal: {\n                show: true\n            }\n        },\n        data: nodes,\n        links: links,\n        lineStyle: {\n            normal: {\n                opacity: 0.9,\n                width: 1\n            }\n        }\n    }]\n};","html":"","externalScripts":"","updaterUID":"bd-1225088207","theme":"","layout":"","viewCount":7646,"userName":"shangyichuan","commentCount":0,"starCount":12,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xBy8Sk4onZ.png?v=1507700541675","isCustomThumbnail":0,"builtinTags":["category-work","legend","series-graph","title","tooltip"],"customTags":[],"updaterUserName":"shangyichuan"}}