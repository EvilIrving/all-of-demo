{"status":0,"data":{"cid":"xmzEElhOHf","authorUid":"bd-2451952737","authorUserName":"马***6","title":"3D饼图","description":"","latestVersion":1,"alwaysLatest":0,"createTime":"2021-06-04T09:16:17.000Z","lastUpdateTime":"2021-06-04T09:16:17.000Z","auth":2,"uid":"bd-2451952737","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":1,"parentVersion":-1,"echartsVersion":"5.1.1","versionCreateTime":"2021-06-04T09:16:17.000Z","code":"\nfunction getParametricEquation(startRatio, endRatio, isSelected, isHovered, k, height, i) {\n    // 计算\n    let midRatio = (startRatio + endRatio) / 2;\n\n    let startRadian = startRatio * Math.PI * 2;\n    let endRadian = endRatio * Math.PI * 2;\n    let midRadian = midRatio * Math.PI * 2;\n    if (i === 1) {\n        startRadian = 0;\n        //  endRadian = 1\n    }\n    console.log('endRatio', startRatio, endRatio);\n    // 如果只有一个扇形，则不实现选中效果。\n    if (startRatio === 0 && endRatio === 1) {\n        isSelected = false;\n    }\n\n    // 通过扇形内径/外径的值，换算出辅助参数 k（默认值 1/3）\n    // k = typeof k !== 'undefined' ? k : 1 / 3 ;\n    k = 1;\n\n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n    let offsetX = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n    let offsetY = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\n    let hoverRate = isHovered ? 1.05 : 1;\n\n    // 返回曲面参数方程\n    return {\n        u: {\n            min: -Math.PI,\n            max: Math.PI * 3,\n            step: Math.PI / 32,\n        },\n        v: {\n            min: 0,\n            max: Math.PI * 2,\n            step: Math.PI / 20,\n        },\n        x: function (u, v) {\n            if (u < startRadian) {\n                return offsetX + Math.cos(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetX + Math.cos(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetX + Math.cos(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n        y: function (u, v) {\n            if (u < startRadian) {\n                return offsetY + Math.sin(startRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            if (u > endRadian) {\n                return offsetY + Math.sin(endRadian) * (1 + Math.cos(v) * k) * hoverRate;\n            }\n            return offsetY + Math.sin(u) * (1 + Math.cos(v) * k) * hoverRate;\n        },\n        z: function (u, v) {\n            if (u < -Math.PI * 0.5) {\n                return Math.sin(u);\n            }\n            if (u > Math.PI * 2.5) {\n                return Math.sin(u);\n            }\n            if (i === 0) {\n                return Math.sin(v) > 0 ? 4 : 1;\n            }\n            return Math.sin(v) > 0 ? 1 : -1;\n        },\n    };\n}\n\n// 生成模拟 3D 饼图的配置项\nfunction getPie3D(pieData, internalDiameterRatio) {\n    let series = [];\n    let sumValue = 0;\n    let startValue = 0;\n    let endValue = 0;\n    let legendData = [];\n    let k =\n        typeof internalDiameterRatio !== 'undefined'\n            ? (1 - internalDiameterRatio) / (1 + internalDiameterRatio)\n            : 1 / 3;\n\n    // 为每一个饼图数据，生成一个 series-surface 配置\n    for (let i = 0; i < pieData.length; i++) {\n        sumValue += pieData[i].value;\n\n        let seriesItem = {\n            name: typeof pieData[i].name === 'undefined' ? `series${i}` : pieData[i].name,\n            type: 'surface',\n            parametric: true,\n            wireframe: {\n                show: false,\n            },\n            pieData: pieData[i],\n            pieStatus: {\n                selected: false,\n                hovered: false,\n                k: k,\n            },\n        };\n\n        if (typeof pieData[i].itemStyle != 'undefined') {\n            let itemStyle = {};\n\n            typeof pieData[i].itemStyle.color != 'undefined' ? (itemStyle.color = pieData[i].itemStyle.color) : null;\n            typeof pieData[i].itemStyle.opacity != 'undefined'\n                ? (itemStyle.opacity = pieData[i].itemStyle.opacity)\n                : null;\n\n            seriesItem.itemStyle = itemStyle;\n        }\n        series.push(seriesItem);\n    }\n\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametric 函数，\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n    for (let i = 0; i < series.length; i++) {\n        endValue = startValue + series[i].pieData.value;\n        console.log(series[i]);\n        series[i].pieData.startRatio = startValue / sumValue;\n        series[i].pieData.endRatio = endValue / sumValue;\n        series[i].parametricEquation = getParametricEquation(\n            series[i].pieData.startRatio,\n            series[i].pieData.endRatio,\n            false,\n            false,\n            k,\n            series[i].pieData.value,\n            i\n        );\n\n        startValue = endValue;\n\n        legendData.push(series[i].name);\n    }\n\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\n    let option = {\n        backgroundColor: '#000',\n        tooltip: {\n            formatter: (params) => {\n                if (params.seriesName !== 'mouseoutSeries') {\n                    return `${\n                        params.seriesName\n                    }<br/><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${\n                        params.color\n                    };\"></span>${option.series[params.seriesIndex].pieData.value}`;\n                }\n            },\n        },\n        legend: {\n            data: legendData,\n            textStyle: {\n                color: '#fff',\n                fontSize: 26,\n            },\n        },\n        xAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        yAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        zAxis3D: {\n            min: -1,\n            max: 1,\n        },\n        grid3D: {\n            show: false,\n            boxHeight: 10,\n            //top: '30%',\n            bottom: '50%',\n            light:{\n                ambient:{\n                    color:\"red\",\n                    intensity:.2\n                }\n            },\n            viewControl: {\n                distance: 300, //视距\n                alpha: 25,\n                beta: 130,\n                autoRotate:false,\n                damping:1,\n                zoomSensitivity:0,\n                rotateSensitivity:0,//旋转操作的灵敏度，值越大越灵敏。支持使用数组分别设置横向和纵向的旋转灵敏度\n            },\n        },\n        series: series,\n    };\n    return option;\n}\n\n// 传入数据生成 option\noption = getPie3D(\n    [\n        {\n            name: '已消除',\n            value: 4,\n            itemStyle: {\n                // opacity: 0.5,\n                color: '#74f3b5',\n            }\n        },\n\n        {\n            name: '未消除',\n            value: 2,\n            itemStyle: {\n                // opacity: 0.5,\n                color: '#00b7f7',\n            }\n        },\n    ],\n    2\n);\n","html":"","externalScripts":"https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js","updaterUID":"bd-2451952737","theme":"","layout":"","viewCount":0,"userName":"马***6","commentCount":0,"starCount":1,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xmzEElhOHf.png?v=1622798178054","isCustomThumbnail":0,"builtinTags":["category-work","grid3D","legend","series-surface","tooltip"],"customTags":[],"updaterUserName":"马***6"}}