{"status":0,"data":{"cid":"xzc6Fw_Q4","authorUid":"bd-101698999","authorUserName":"Z***8","title":"3D 饼图尝试中（新版支持饼环，请见另一个作品，链接后附）","description":"3D 饼环图链接：https://gallery.echartsjs.com/editor.html?c=xojSDhHAMm\n-----------------------------------------------\n3D 饼图尝试中，surface 隐藏 grid3D\n（点击可以选中，滑过可以放大）","latestVersion":7,"alwaysLatest":1,"createTime":"2020-02-14T08:06:47.000Z","lastUpdateTime":"2020-08-06T09:06:48.000Z","auth":2,"uid":"bd-101698999","publishedVersion":0,"forkFrom":"-","isSpam":0,"version":7,"parentVersion":6,"echartsVersion":"4.8.0","versionCreateTime":"2020-07-22T04:53:11.000Z","code":"/*************************\npie3D 尝试\n\n更新时间: 2020.7.21 13:30 v0.5\n使用组件: grid3D、xAxis3D、yAxis3D、zAxis3D、surface\n EC 版本: 4.8.0\n GL 版本：0.4.3\n 公众号 : ZXand618的ECharts之旅 \n 知乎号 : ZhXand618 \n如果转载: 请注明出处\n\n*************************\n【 getParametricEquation 函数说明 】 :\n*************************\n    根据传入的\n    startRatio（浮点数）: 当前扇形起始比例，取值区间 [0, endRatio)\n    endRatio（浮点数）: 当前扇形结束比例，取值区间 (startRatio, 1]\n    isSelected（布尔值）:是否选中，效果参照二维饼图选中效果（单选）\n    isHovered（布尔值）: 是否放大，效果接近二维饼图高亮（放大）效果（未能实现阴影）\n    \n    生成 3D 扇形曲面\n\n*************************\n【 getPie3D 函数说明 】 :\n*************************\n    根据传入的饼图数据，生成模拟 3D 饼图的配置项 option\n    \n    饼图数据格式示意：\n    [{\n        name: '数据1',\n        value: 10\n    }, {\n        // 数据项名称\n        name: '数据2',\n        value : 56,\n        itemStyle:{\n            // 透明度\n            opacity: 0.5,\n            // 扇形颜色\n            color: 'green'\n        }\n    }]\n    \n*************************\n【 鼠标事件监听说明 】 :\n*************************\n    click： 实现饼图的选中效果（单选）\n            大致思路是，通过监听点击事件，获取到被点击数据的系列序号 params.seriesIndex，\n            然后将对应扇形向外/向内移动 10% 的距离。\n            \n    mouseover： 近似实现饼图的高亮（放大）效果\n            大致思路是，在饼图外部套一层透明的圆环，然后监听 mouseover 事件，获取\n            到对应数据的系列序号 params.seriesIndex 或系列名称 params.seriesName，\n            如果鼠标移到了扇形上，则先取消高亮之前的扇形（如果有）,再高亮当前扇形；\n            如果鼠标移到了透明圆环上，则只取消高亮之前的扇形（如果有），不做任何高亮。\n            \n    globalout： 当鼠标移动过快，直接划出图表区域时，有可能监听不到透明圆环的 mouseover，\n            导致此前高亮没能取消，所以补充了对 globalout 的监听。\n\n        \n*************************/\n\n// 生成扇形的曲面参数方程，用于 series-surface.parametricEquation\nfunction getParametricEquation(startRatio, endRatio, isSelected, isHovered) {\n\n    // 计算\n    let midRatio = (startRatio + endRatio) / 2;\n\n    let startRadian = startRatio * Math.PI * 2;\n    let endRadian = endRatio * Math.PI * 2;\n    let midRadian = midRatio * Math.PI * 2;\n\n    // 如果只有一个扇形，则不实现选中效果。\n    if (startRatio === 0 && endRatio === 1) {\n        isSelected = false;\n    }\n    \n    // 计算选中效果分别在 x 轴、y 轴方向上的位移（未选中，则位移均为 0）\n    let offsetX = isSelected ? Math.sin(midRadian) * 0.1 : 0;\n    let offsetY = isSelected ? Math.cos(midRadian) * 0.1 : 0;\n\n    // 计算高亮效果的放大比例（未高亮，则比例为 1）\n    let hoverRate = isHovered ? 1.05 : 1;\n\n    // 返回曲面参数方程\n    return {\n\n        u: {\n            min: 0,\n            max: Math.PI * 2,\n            step: Math.PI / 100\n        },\n        \n        v: {\n            min: 0,\n            max: Math.PI,\n            step: Math.PI / 50\n        },\n        \n        x: function(u, v) {\n            if (midRatio - 0.5 < 0) {\n                if (u < startRadian || u > midRadian + Math.PI) {\n                    tmp = u - Math.PI - midRadian < 0 ? u + Math.PI - midRadian : u - Math.PI - midRadian;\n                    return offsetX + Math.sin(startRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n                if (u > endRadian && u < midRadian + Math.PI) {\n                    tmp = midRadian + Math.PI - u;\n                    return offsetX + Math.sin(endRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n            } else {\n                if (u < startRadian && u > midRadian - Math.PI) {\n                    tmp = u + Math.PI - midRadian;\n                    return offsetX + Math.sin(startRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n                if (u > endRadian || u < midRadian - Math.PI) {\n                    tmp = midRadian - Math.PI - u < 0 ? midRadian + Math.PI - u : midRadian - Math.PI - u;\n                    return offsetX + Math.sin(endRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n            }\n            return offsetX + Math.sin(v) * Math.sin(u) * hoverRate;\n        },\n        \n        y: function(u, v) {\n            if (midRatio - 0.5 < 0) {\n                if (u < startRadian || u > midRadian + Math.PI) {\n                    tmp = u - Math.PI - midRadian < 0 ? u + Math.PI - midRadian : u - Math.PI - midRadian;\n                    return offsetY + Math.cos(startRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n                if (u > endRadian && u < midRadian + Math.PI) {\n                    tmp = midRadian + Math.PI - u;\n                    return offsetY + Math.cos(endRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n            } else {\n                if (u < startRadian && u > midRadian - Math.PI) {\n                    tmp = u + Math.PI - midRadian;\n                    return offsetY + Math.cos(startRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n                if (u > endRadian || u < midRadian - Math.PI) {\n                    tmp = midRadian - Math.PI - u < 0 ? midRadian + Math.PI - u : midRadian - Math.PI - u;\n                    return offsetY + Math.cos(endRadian) * tmp / (Math.PI - midRadian + startRadian) * hoverRate;\n                }\n            }\n            return offsetY + Math.sin(v) * Math.cos(u) * hoverRate;\n        },\n        \n        z: function(u, v) {\n            return Math.cos(v) > 0 ? 0.1 : -0.1;\n        }\n    };\n}\n\n// 生成模拟 3D 饼图的配置项\nfunction getPie3D(pieData) {\n\n    let series = [];\n    let sumValue = 0;\n    let startValue = 0;\n    let endValue = 0;\n    let legendData = [];\n\n    // 为每一个饼图数据，生成一个 series-surface 配置\n    for (let i = 0; i < pieData.length; i++) {\n\n        sumValue += pieData[i].value;\n\n        let seriesItem = {\n            name: typeof pieData[i].name === 'undefined' ? `series${i}` : pieData[i].name,\n            type: 'surface',\n            parametric: true,\n            wireframe: {\n                show: false\n            },\n            pieData: pieData[i],\n            pieStatus: {\n                selected: false,\n                hovered: false\n            }\n        };\n\n        if (typeof pieData[i].itemStyle != 'undefined') {\n\n            let itemStyle = {};\n\n            typeof pieData[i].itemStyle.color != 'undefined' ? itemStyle.color = pieData[i].itemStyle.color : null;\n            typeof pieData[i].itemStyle.opacity != 'undefined' ? itemStyle.opacity = pieData[i].itemStyle.opacity : null;\n\n            seriesItem.itemStyle = itemStyle;\n        }\n        series.push(seriesItem);\n    }\n\n    // 使用上一次遍历时，计算出的数据和 sumValue，调用 getParametricEquation 函数，\n    // 向每个 series-surface 传入不同的参数方程 series-surface.parametricEquation，也就是实现每一个扇形。\n    for (let i = 0; i < series.length; i++) {\n        endValue = startValue + series[i].pieData.value;\n\n        series[i].pieData.startRatio = startValue / sumValue;\n        series[i].pieData.endRatio = endValue / sumValue;\n        series[i].parametricEquation = getParametricEquation(series[i].pieData.startRatio, series[i].pieData.endRatio, false, false);\n\n        startValue = endValue;\n\n        legendData.push(series[i].name);\n    }\n\n    // 补充一个透明的圆环，用于支撑高亮功能的近似实现。\n    series.push({\n        name: 'mouseoutSeries',\n        type: 'surface',\n        parametric: true,\n        wireframe: {\n            show: false\n        },\n        itemStyle: {\n            opacity: 0\n        },\n        parametricEquation: {\n            u: {\n                min: 0,\n                max: Math.PI * 2,\n                step: Math.PI / 20\n            },\n            v: {\n                min: 0,\n                max: Math.PI,\n                step: Math.PI / 20\n            },\n            x: function(u, v) {\n                return Math.sin(v) * Math.sin(u) + Math.sin(u);\n            },\n            y: function(u, v) {\n                return Math.sin(v) * Math.cos(u) + Math.cos(u);\n            },\n            z: function(u, v) {\n                return Math.cos(v) > 0 ? 0.1 : -0.1;\n            }\n        }\n    });\n\n    // 准备待返回的配置项，把准备好的 legendData、series 传入。\n    let option = {\n        //animation: false,\n        legend: {\n            data: legendData\n        },\n        tooltip: {\n            formatter: params => {\n                if (params.seriesName !== 'mouseoutSeries') {\n                    return `${params.seriesName}<br/><span style=\"display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:${params.color};\"></span>${option.series[params.seriesIndex].pieData.value}`;\n                }\n            }\n        },\n        xAxis3D: {\n            min: -1,\n            max: 1\n        },\n        yAxis3D: {\n            min: -1,\n            max: 1\n        },\n        zAxis3D: {\n            min: -1,\n            max: 1\n        },\n        grid3D: {\n            show: false,\n            boxHeight: 30,\n            //top: '30%',\n            bottom: '50%'\n        },\n        series: series\n    };\n    return option;\n}\n\n// 传入数据生成 option\noption = getPie3D([{\n    name: 'aa',\n    value: 11,\n    itemStyle: {\n        opacity: 0.5\n    }\n}, {\n    name: 'cc',\n    value: 33\n}, {\n    name: 'bb',\n    value: 22,\n    itemStyle: {\n        color: 'green'\n    }\n}]);\n\n\n// 监听鼠标事件，实现饼图选中效果（单选），近似实现高亮（放大）效果。\nlet selectedIndex = '';\nlet hoveredIndex = '';\n\n// 监听点击事件，实现选中效果（单选）\nmyChart.on('click', function(params) {\n    // 从 option.series 中读取重新渲染扇形所需的参数，将是否选中取反。\n    let isSelected = !option.series[params.seriesIndex].pieStatus.selected;\n    let isHovered = option.series[params.seriesIndex].pieStatus.hovered;\n    let startRatio = option.series[params.seriesIndex].pieData.startRatio;\n    let endRatio = option.series[params.seriesIndex].pieData.endRatio;\n\n    // 如果之前选中过其他扇形，将其取消选中（对 option 更新）\n    if (selectedIndex !== '' && selectedIndex !== params.seriesIndex) {\n        option.series[selectedIndex].parametricEquation = getParametricEquation(option.series[selectedIndex].pieData.startRatio, option.series[selectedIndex].pieData.endRatio, false, false);\n        option.series[selectedIndex].pieStatus.selected = false;\n    }\n\n    // 对当前点击的扇形，执行选中/取消选中操作（对 option 更新）\n    option.series[params.seriesIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered);\n    option.series[params.seriesIndex].pieStatus.selected = isSelected;\n    \n    // 如果本次是选中操作，记录上次选中的扇形对应的系列号 seriesIndex\n    isSelected ? selectedIndex = params.seriesIndex : null;\n\n    // 使用更新后的 option，渲染图表\n    myChart.setOption(option);\n});\n\n// 监听 mouseover，近似实现高亮（放大）效果\nmyChart.on('mouseover', function(params) {\n    \n    // 准备重新渲染扇形所需的参数\n    let isSelected;\n    let isHovered;\n    let startRatio;\n    let endRatio;\n    \n    // 如果触发 mouseover 的扇形当前已高亮，则不做操作\n    if (hoveredIndex === params.seriesIndex) {\n        return;\n        \n    // 否则进行高亮及必要的取消高亮操作\n    } else {\n\n        // 如果当前有高亮的扇形，取消其高亮状态（对 option 更新）\n        if (hoveredIndex !== '') {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 false。\n            isSelected = option.series[hoveredIndex].pieStatus.selected;\n            isHovered = false;\n            startRatio = option.series[hoveredIndex].pieData.startRatio;\n            endRatio = option.series[hoveredIndex].pieData.endRatio;\n\n            // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n            option.series[hoveredIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered);\n            option.series[hoveredIndex].pieStatus.hovered = isHovered;\n            \n            // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n            hoveredIndex = '';\n        }\n\n        // 如果触发 mouseover 的扇形不是透明圆环，将其高亮（对 option 更新）\n        if (params.seriesName !== 'mouseoutSeries') {\n            // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n            isSelected = option.series[params.seriesIndex].pieStatus.selected;\n            isHovered = true;\n            startRatio = option.series[params.seriesIndex].pieData.startRatio;\n            endRatio = option.series[params.seriesIndex].pieData.endRatio;\n\n            // 对当前点击的扇形，执行高亮操作（对 option 更新）\n            option.series[params.seriesIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered);\n            option.series[params.seriesIndex].pieStatus.hovered = isHovered;\n\n            // 记录上次高亮的扇形对应的系列号 seriesIndex\n            hoveredIndex = params.seriesIndex;\n        }\n        \n        // 使用更新后的 option，渲染图表\n        myChart.setOption(option);\n    }\n});\n\n// 修正取消高亮失败的 bug\nmyChart.on('globalout', function() {\n\n\n    if (hoveredIndex !== '') {\n        // 从 option.series 中读取重新渲染扇形所需的参数，将是否高亮设置为 true。\n        isSelected = option.series[hoveredIndex].pieStatus.selected;\n        isHovered = false;\n        startRatio = option.series[hoveredIndex].pieData.startRatio;\n        endRatio = option.series[hoveredIndex].pieData.endRatio;\n\n        // 对当前点击的扇形，执行取消高亮操作（对 option 更新）\n        option.series[hoveredIndex].parametricEquation = getParametricEquation(startRatio, endRatio, isSelected, isHovered);\n        option.series[hoveredIndex].pieStatus.hovered = isHovered;\n        \n        // 将此前记录的上次选中的扇形对应的系列号 seriesIndex 清空\n        hoveredIndex = '';\n    }\n    \n    // 使用更新后的 option，渲染图表\n    myChart.setOption(option);\n});","html":"","externalScripts":"https://echarts.baidu.com/resource/echarts-gl-latest/dist/echarts-gl.min.js","updaterUID":"bd-101698999","theme":"default","layout":"","viewCount":2511,"userName":"Z***8","commentCount":0,"starCount":12,"isStared":0,"thumbnailURL":"https://www.makeapie.com/ecg-storage/ec_gallery_thumbnail/xzc6Fw_Q4.png?v=1595174663744","isCustomThumbnail":1,"builtinTags":["category-work","grid3D","series-surface","tooltip"],"customTags":["pie3d"],"updaterUserName":"Z***8"}}